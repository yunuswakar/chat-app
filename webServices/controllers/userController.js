const user = require("../../models/userModel");
const queryModel=require("../../models/queryModel")
const pagePost = require("../../models/pagePostModel")
const webNotification = require("../../models/webNotification")
const pageModel = require("../../models/pageModel")
const gamePayment = require("../../models/videoGamePayment")
const gifModel = require("../../models/gifModel");
var crypto = require('crypto');
var node_cryptojs = require('node-cryptojs-aes');
const groupPostModel = require("../../models/groupPostModel")
const countryModel = require("../../models/countriesModel")
const prodcutBuying = require("../../models/productBuyingModel")
const bannerModel = require("../../models/bannerModel");
const productFeedback = require("../../models/productFeedbackModel")
const returnProduct = require("../../models/returnProductModel")
const productPayment = require("../../models/productPayment")
const advertisementModel = require("../../models/advertisementModel");
const addCart = require("../../models/addToCartModel")
const group = require("../../models/groupModel");
const classRoom = require("../../models/classRoomModel");
const commonFunction = require("../../helperFunctions/commonFunction");
const globalResponse = require("../../helperFunctions/responseHandler");
const globalMessege = require("../../helperFunctions/responseMessage");
const globalStatusCode = require("../../helperFunctions/statusCodes");
const userModel = require("../../models/userModel")
const newsModel = require("../../models/newsModel")
const eventModel = require("../../models/eventModel")
const productModel = require("../../models/productModel")
const categoryModel = require("../../models/categoryModel");
const discussionFormModel = require("../../models/discussionFormModel");
const notificationModel = require("../../models/notificationModel")
const reportModel = require("../../models/reportModel")
const itemReportModel = require("../../models/itemReport")
const classPostModel = require("../../models/classPostModel")
const sellingWishlist = require("../../models/sellingWishlist")
const advPayment = require("../../models/advPayment")
const bcrypt = require("bcrypt-nodejs");
const otpGenerator = require("otp-generator");
const date = require("date-and-time");
const jwt = require("jsonwebtoken");
const paymentManagement = require("../../models/paymentManagement")


const stripe = require('stripe')('sk_test_L8oA9O5IOgtmflzWMndmmEhR')
const log = console.log
const _ = require("lodash")
const mongoose = require("mongoose")

module.exports = {
    //-------------------------------------user section---------------------------------------------------------

    signUp: (req, res) => {
        try {
            if (
                !req.body.firstName ||
                !req.body.email ||
                !req.body.phoneNumber ||
                !req.body.dateOfBirth ||
                !req.body.password
            ) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var query = {
                    $and: [
                        {
                            $or: [
                                { email: req.body.email },

                                { phoneNumber: req.body.phoneNumber }
                            ]
                        },
                        { status: { $in: ["ACTIVE", "BLOCK"] } }
                    ]
                };
                user.findOne(query, (err, result) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (result) {
                        if (result.phoneNumber == req.body.phoneNumber) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.ALREADY_EXIST,
                                globalMessege.ErrorMessage.PHONE_EXIST
                            );
                        } else {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.ALREADY_EXIST,
                                globalMessege.ErrorMessage.EMAIL_EXIST
                            );
                        }
                    } else {
                        var hashPassword = bcrypt.hashSync(req.body.password);
                        var mergeNumber = req.body.countryCode + req.body.phoneNumber;
                        var emailOtp = otpGenerator.generate(4, {
                            alphabets: false,
                            upperCase: false,
                            specialChars: false
                        });


                        var now = new Date();
                        var otpExpTime = date.addMinutes(now, 10);
                        var data = {
                            firstName: req.body.firstName,
                            lastName: req.body.lastName,
                            email: req.body.email,
                            secondaryEmail: req.body.secondaryEmail,
                            countryCode: req.body.countryCode,
                            phoneNumber: req.body.phoneNumber,
                            dateOfBirth: req.body.dateOfBirth,
                            gender: req.body.gender,
                            password: hashPassword,
                            emailOtp: emailOtp,
                            emailOtpExpireTime: otpExpTime,
                            mergePhoneNumber: mergeNumber,
                            profilePic: req.body.profilePic,
                            userType: req.body.userType,
                            fcmToken: req.body.fcmToken
                        };
                        commonFunction.emailSender(
                            req.body.email,
                            "Your otp is",
                            emailOtp,
                            (error, result1) => {
                                if (error) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (!result1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.SOMETHING_WRONG,
                                        globalMessege.ErrorMessage.SOMETHING_WRONG
                                    );
                                } else {

                                    var obj = new user(data);
                                    obj.save((err1, success) => {
                                        if (err1) {

                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else {
                                            var result = { _id: success._id };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.ACCOUNT_CREATION,
                                                result
                                            );
                                        }
                                    });
                                }
                            }
                        );
                    }
                });
            }
        } catch (error) {

            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },



    otpVerify: (req, res) => {
        try {
            if (!req.headers._id || !req.body.otp) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                user.findOne(
                    { _id: req.headers._id, status: "ACTIVE" },
                    (error, success) => {
                        console.log("198>>>>>>>>>>>>..", error, success);
                        if (error) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            var now = new Date();
                            var currentTime = date.addMilliseconds(now, 1);
                            if (req.body.otp == success.emailOtp) {
                                if (currentTime < success.emailOtpExpireTime) {

                                    user.findOneAndUpdate(
                                        { _id: success._id, status: "ACTIVE" },
                                        {
                                            $set: {
                                                emailOtp: "NULL",
                                                emailOtpVerify: true
                                            }
                                        },
                                        { new: true },
                                        (error1, success1) => {
                                            if (error1) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                );
                                            } else if (!success1) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                                    globalMessege.ErrorMessage.USER_FOUND
                                                );
                                            } else {
                                                console.log(
                                                    "success in otpVerify",
                                                    success1,
                                                    "generatewToken : ",
                                                    generatewToken
                                                );
                                                var generatewToken = jwt.sign(
                                                    { _id: success1._id },
                                                    "SOCIAL"
                                                );
                                                globalResponse.sendResponseWithData(
                                                    res,
                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                    globalMessege.SuccessMessage.VERIFY_OTP,
                                                    generatewToken
                                                );
                                            }
                                        }
                                    );
                                } else {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.ALREADY_EXIST,
                                        globalMessege.ErrorMessage.OTP_EXPIRE
                                    );
                                }
                            } else {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.ALREADY_EXIST,
                                    "Please verify otp"
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },


    login: (req, res) => {

        if (req.body.password && req.body.loginId && req.body.fcmToken) {
            var query = {
                $and: [
                    {
                        $or: [
                            { email: req.body.loginId },
                            { secondaryEmail: req.body.loginId }
                        ]
                    },
                    { status: { $in: ["ACTIVE", "BLOCK"] } }
                ]
            };

            user.findOne(query, (err, result1) => {

                if (err) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                        globalMessege.ErrorMessage.INTERNAL_ERROR
                    );
                } else if (!result1) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.NOT_FOUND,
                        globalMessege.ErrorMessage.USER_FOUND
                    );
                } else {

                    user.findOneAndUpdate({ _id: result1._id }, { $set: { fcmToken: req.body.fcmToken } }, { new: true }, (tokenErr, tokenResult) => {

                        if (tokenErr) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        }
                        else {
                            if (result1.status == "ACTIVE") {

                                if (
                                    result1.email == req.body.loginId || result1.secondaryEmail == req.body.loginId &&
                                    result1.emailOtpVerify == true
                                ) {
                                    var check = bcrypt.compareSync(
                                        req.body.password,
                                        result1.password
                                    );

                                    if (check) {
                                        var generatewToken = jwt.sign({ _id: result1._id }, "SOCIAL");
                                        console.log(
                                            "success in login",
                                            result1,
                                            "generatewToken : ",
                                            generatewToken
                                        );

                                        var result = { _id: result1._id, token: generatewToken };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.LOGIN_SUCCESS,
                                            result
                                        );
                                    } else {

                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.WRONG_PASSWORD
                                        );
                                    }
                                }

                                else {
                                    var loginresult = { _id: result1._id };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.ErrorCode.ALREADY_EXIST,
                                        globalMessege.SuccessMessage.VERIFY_EMAIL,
                                        loginresult
                                    );
                                }
                                // }
                            } else {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.BLOCKED_ADMIN,
                                    globalMessege.ErrorMessage.BLOCKED_BY_ADMIN
                                );
                            }
                        }
                    })

                }
            });
        }
        else if (req.body.password && req.body.loginId && !req.body.fcmToken) {
            var query1 = {
                $and: [
                    {
                        $or: [
                            { email: req.body.loginId },
                            { secondaryEmail: req.body.loginId }
                        ]
                    },
                    { status: { $in: ["ACTIVE", "BLOCK"] } }
                ]
            };

            user.findOne(query1, (err, result1) => {

                if (err) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                        globalMessege.ErrorMessage.INTERNAL_ERROR
                    );
                } else if (!result1) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.NOT_FOUND,
                        globalMessege.ErrorMessage.USER_FOUND
                    );
                } else {
                    user.findOneAndUpdate({ _id: result1._id }, { $set: { fcmToken: null } }, { new: true }, (userErr, userResult) => {

                        if (userErr) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        }
                        else {
                            if (result1.status == "ACTIVE") {

                                if (
                                    result1.email == req.body.loginId || result1.secondaryEmail == req.body.loginId &&
                                    result1.emailOtpVerify == true
                                ) {
                                    var check = bcrypt.compareSync(
                                        req.body.password,
                                        result1.password
                                    );

                                    if (check) {
                                        var generatewToken = jwt.sign({ _id: result1._id }, "SOCIAL");
                                        console.log(
                                            "success in login",
                                            result1,
                                            "generatewToken : ",
                                            generatewToken
                                        );

                                        var result = { _id: result1._id, token: generatewToken };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.LOGIN_SUCCESS,
                                            result
                                        );
                                    } else {

                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.WRONG_PASSWORD
                                        );
                                    }
                                }

                                else {
                                    var loginresult1 = { _id: result1._id };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.ErrorCode.ALREADY_EXIST,
                                        globalMessege.SuccessMessage.VERIFY_EMAIL,
                                        loginresult1
                                    );
                                }
                                // }
                            } else {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.BLOCKED_ADMIN,
                                    globalMessege.ErrorMessage.BLOCKED_BY_ADMIN
                                );
                            }
                        }
                    })

                }
            });
        }
    },

    resetPassword: (req, res) => {
        try {
            if (
                !req.headers._id ||
                !req.body.newPassword ||
                !req.body.confirmPassword
            ) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                user.findOne(
                    { _id: req.headers._id, status: "ACTIVE" },
                    (err, result1) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!result1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            if (req.body.newPassword == req.body.confirmPassword) {
                                var hashPassword = bcrypt.hashSync(req.body.confirmPassword);
                                user.findOneAndUpdate(
                                    { _id: req.headers._id, status: "ACTIVE" },
                                    { $set: { password: hashPassword } },
                                    { new: true },
                                    (err, result2) => {
                                        if (err) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!result2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.USER_FOUND
                                            );
                                        } else {
                                            console.log("success in resetPassword", result2);
                                            var result = { _id: result2._id };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.RESET_SUCCESS,
                                                result
                                            );
                                        }
                                    }
                                );
                            } else {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.PASSWORD_NOT_MATCH
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    changePassword: (req, res) => {
        try {
            if (
                !req.headers._id ||
                !req.body.newPassword ||
                !req.body.confirmPassword ||
                !req.body.oldPassword
            ) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                user.findOne(
                    { _id: req.headers._id, status: "ACTIVE" },
                    (err, result1) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!result1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            var check = bcrypt.compareSync(req.body.oldPassword, result1.password)
                            if (check) {
                                if (req.body.newPassword == req.body.confirmPassword) {
                                    var hashPassword = bcrypt.hashSync(req.body.confirmPassword);
                                    user.findOneAndUpdate(
                                        { _id: req.headers._id, status: "ACTIVE" },
                                        { $set: { password: hashPassword } },
                                        { new: true },
                                        (err, result2) => {
                                            if (err) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                );
                                            } else if (!result2) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                                    globalMessege.ErrorMessage.USER_FOUND
                                                );
                                            } else {
                                                console.log("success in resetPassword", result2);
                                                var result = { _id: result2._id };
                                                globalResponse.sendResponseWithData(
                                                    res,
                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                    globalMessege.SuccessMessage.RESET_SUCCESS,
                                                    result
                                                );
                                            }
                                        }
                                    );
                                } else {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.PASSWORD_NOT_MATCH
                                    );
                                }
                            } else {

                                res.send({ responseCode: 404, responseMessege: "Old password not matched" })
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    imageUpload: (req, res) => {

        try {
            if (!req.body.profilePic) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                commonFunction.imageUploadCloudinary(
                    req.body.profilePic,
                    (error, result) => {
                        if (error) {

                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else {

                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.IMAGE_URL,
                                result
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    videoUpload: (req, res) => {

        try {

            commonFunction.videoUploadCloudinary(
                req.body.video,
                (error, result) => {

                    if (error) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR

                        );
                    } else {


                        globalResponse.sendResponseWithData(
                            res,
                            globalStatusCode.SuccessCode.SUCCESS,
                            "Video uploaded successfully",
                            result
                        );
                    }
                }
            );
            // }
        } catch (error) {

            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    forgotPassword: (req, res) => {
        try {
            if (!req.body.userId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var query = {
                    $and: [

                        { email: req.body.userId },

                        { status: { $in: ["ACTIVE", "BLOCK"] } }
                    ]
                };
                user.findOne(query, (err, result1) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result1) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.USER_FOUND
                        );
                    } else {
                        if (result1.status == "ACTIVE") {
                            var otp = otpGenerator.generate(4, {
                                alphabets: false,
                                upperCase: false,
                                specialChars: false
                            });
                            var now = new Date();
                            var otpExpTime = date.addMinutes(now, 10);

                            if (result1.email == req.body.userId) {
                                commonFunction.emailSender(
                                    req.body.userId,
                                    "Your otp is",
                                    otp,
                                    (error, result2) => {
                                        if (error) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!result2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.SOMETHING_WRONG,
                                                globalMessege.ErrorMessage.SOMETHING_WRONG
                                            );
                                        } else {
                                            user.findOneAndUpdate(
                                                { _id: result1._id, status: "ACTIVE" },
                                                {
                                                    $set: {
                                                        emailOtp: otp,
                                                        emailOtpExpireTime: otpExpTime
                                                    }
                                                },
                                                { new: true },
                                                (error, result3) => {
                                                    if (error) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                                        );
                                                    } else if (!result3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                                            globalMessege.ErrorMessage.USER_FOUND
                                                        );
                                                    } else {


                                                        var result = { _id: result3._id };
                                                        globalResponse.sendResponseWithData(
                                                            res,
                                                            globalStatusCode.SuccessCode.SUCCESS,
                                                            globalMessege.SuccessMessage.OTP_SEND_EMAIL,
                                                            result
                                                        );
                                                    }
                                                }
                                            );
                                        }
                                    }
                                );
                            }
                        } else {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.BLOCKED_BY_ADMIN
                            );
                        }
                    }
                });
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    resendOtp: (req, res) => {
        try {
            if (!req.headers._id) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var otp1 = otpGenerator.generate(4, {
                    alphabets: false,
                    upperCase: false,
                    specialChars: false
                });

                var now = new Date();
                var otpExpTime = date.addMinutes(now, 10);

                user.findOne({ _id: req.headers._id }, (err, result1) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result1) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.USER_FOUND
                        );
                    } else {
                        commonFunction.emailSender(
                            result1.email,
                            "Your otp is",
                            otp1,
                            (error, result2) => {
                                if (error) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (!result2) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.SOMETHING_WRONG,
                                        globalMessege.ErrorMessage.SOMETHING_WRONG
                                    );
                                } else {
                                    console.log("otp sent to email successfully ");

                                    user.findOneAndUpdate(
                                        { _id: result1._id, status: "ACTIVE" },
                                        {
                                            $set: {

                                                emailOtp: otp1,
                                                emailOtpExpireTime: otpExpTime,

                                            }
                                        },
                                        { new: true },
                                        (error, result5) => {
                                            if (error) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode
                                                        .INTERNAL_SERVER_ERROR,
                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                );
                                            } else if (!result5) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                                    globalMessege.ErrorMessage.USER_FOUND
                                                );
                                            } else {
                                                console.log("forgot result", result5);
                                                var result = {
                                                    _id: result5
                                                };
                                                console.log("forgot result", result5);
                                                globalResponse.sendResponseWithData(
                                                    res,
                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                    globalMessege.SuccessMessage.OTP_SEND_EMAIL,
                                                    result
                                                );
                                            }
                                        }
                                    );
                                }
                                // }
                                // );//
                                // }
                            }
                        );
                    }
                });
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    myProfile: (req, res) => {
        try {
            user.findOne(
                { _id: req.headers._id, status: "ACTIVE" },
                (err, result1) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result1) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.USER_FOUND
                        );
                    } else {


                        var result = {
                            gender: result1.gender,
                            profilePic: result1.profilePic,
                            firstName: result1.firstName,
                            lastName: result1.lastName,
                            email: result1.email,
                            countryCode: result1.countryCode,
                            phoneNumber: result1.phoneNumber,
                            dateOfBirth: result1.dateOfBirth
                        };
                        globalResponse.sendResponseWithData(
                            res,
                            globalStatusCode.SuccessCode.SUCCESS,
                            globalMessege.SuccessMessage.DETAIL_GET,
                            result
                        );
                    }
                }
            );
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    editProfile: (req, res) => {
        try {
            if (!req.headers._id) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                user.findOneAndUpdate(
                    { _id: req.headers._id, status: "ACTIVE" },
                    { $set: req.body },
                    { new: true },
                    (error2, success2) => {
                        if (error2) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success2) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {


                            var result = {
                                gender: success2.gender,
                                profilePic: success2.profilePic,
                                firstName: success2.firstName,
                                lastName: success2.lastName,
                                dateOfBirth: success2.dateOfBirth,
                                selectedLanguage: success2.selectedLanguage
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.PROFILE_DETAILS,
                                result
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    addUserDetails: (req, res) => {
        user.findOne({ _id: req.body.userId, status: "ACTIVE", }, (userErr, userResult) => {

            if (userErr) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                    globalMessege.ErrorMessage.INTERNAL_ERROR
                );
            }
            else if (userResult.addDetails[0] != null) {
                if (req.body.image) {
                    commonFunction.uploadImg(req.body.image, (imgErr, imgData) => {

                        if (imgErr) {
                            res.send({ responseCode: 500, responseMessege: "Internall server error22", imgErr })
                        }
                        else {
                            let obj = {}
                            if (req.body.image) {
                                obj['addDetails.$.image'] = imgData
                            }
                            if (req.body.coverPhoto) {
                                obj['addDetails.$.coverPhoto'] = req.body.coverPhoto
                            }
                            if (req.body.bioData) {
                                obj['addDetails.$.bioData'] = req.body.bioData
                            }
                            if (req.body.designation) {
                                obj['addDetails.$.designation'] = req.body.designation

                            } if (req.body.metric) {
                                obj['addDetails.$.metric'] = req.body.metric

                            } if (req.body.inter) {
                                obj['addDetails.$.inter'] = req.body.inter

                            } if (req.body.graduate) {
                                obj['addDetails.$.graduate'] = req.body.graduate

                            } if (req.body.liveIn) {
                                obj['addDetails.$.liveIn'] = req.body.liveIn
                            }
                            if (req.body.from) {
                                obj['addDetails.$.from'] = req.body.from
                            }
                            if (req.body.mariedStatus) {
                                obj['addDetails.$.mariedStatus'] = req.body.mariedStatus
                            }
                            if (req.body.gender) {
                                obj['addDetails.$.gender'] = req.body.gender
                            }
                            user.findOneAndUpdate({ 'addDetails.userId': userResult.addDetails[0].userId }, { $set: obj }, { new: true }, (updateErr, updateResult) => {

                                if (updateErr) {
                                    res.send({ responseCode: 500, responseMessege: "Internall server error33", updateErr })
                                }
                                else if (!updateResult) {
                                    res.send({ responseCode: 500, responseMessege: "User not found111" })
                                }
                                else {
                                    var data = {
                                        profileData: updateResult.addDetails[0]
                                    }
                                    res.send({ responseCode: 200, responseMessege: "Profile updated successfully", data })
                                }
                            })
                        }
                    })
                }
                else {
                    let obj = {}

                    if (req.body.coverPhoto) {
                        obj['addDetails.$.coverPhoto'] = req.body.coverPhoto
                    }
                    if (req.body.bioData) {
                        obj['addDetails.$.bioData'] = req.body.bioData
                    }
                    if (req.body.designation) {
                        obj['addDetails.$.designation'] = req.body.designation

                    } if (req.body.metric) {
                        obj['addDetails.$.metric'] = req.body.metric

                    } if (req.body.inter) {
                        obj['addDetails.$.inter'] = req.body.inter

                    } if (req.body.graduate) {
                        obj['addDetails.$.graduate'] = req.body.graduate

                    } if (req.body.liveIn) {
                        obj['addDetails.$.liveIn'] = req.body.liveIn
                    }
                    if (req.body.from) {
                        obj['addDetails.$.from'] = req.body.from
                    }
                    if (req.body.mariedStatus) {
                        obj['addDetails.$.mariedStatus'] = req.body.mariedStatus
                    }
                    if (req.body.gender) {
                        obj['addDetails.$.gender'] = req.body.gender
                    }
                    user.findOneAndUpdate({ 'addDetails.userId': userResult.addDetails[0].userId }, { $set: obj }, { new: true }, (updateErr, updateResult) => {

                        if (updateErr) {
                            res.send({ responseCode: 500, responseMessege: "Internall server error33", updateErr })
                        }
                        else if (!updateResult) {
                            res.send({ responseCode: 500, responseMessege: "User not found111" })
                        }
                        else {
                            var data = {
                                profileData: updateResult.addDetails[0]
                            }
                            res.send({ responseCode: 200, responseMessege: "Profile updated successfully", data })
                        }
                    })


                }

            }
            else {
                if (req.body.image) {
                    commonFunction.uploadImg(req.body.image, (imageErr, imgaeData) => {
                        console.log("1407======>", imageErr, imgaeData)
                        if (imageErr) {
                            res.send({ responseCode: 500, responseMessege: "Internall server error55", imageErr })

                        }
                        else {
                            req.body.image = imgaeData
                            let obj = {
                                coverPhoto: req.body.coverPhoto,
                                image: imgaeData,
                                bioData: req.body.bioData,
                                designation: req.body.designation,
                                metric: req.body.metric,
                                inter: req.body.inter,
                                graduate: req.body.graduate,
                                liveIn: req.body.liveIn,
                                from: req.body.from,
                                mariedStatus: req.body.mariedStatus,
                                gender: req.body.gender,
                                userId: req.body.userId
                            }
                            userModel.findOneAndUpdate({ _id: userResult._id }, { $push: { addDetails: obj } }, { new: true }, (err1, result1) => {
                                if (err1) {
                                    res.send({ responseCode: 500, responseMessege: "Internall server error11", err1 })
                                }
                                else if (!result1) {
                                    res.send({ responseCode: 404, responseMessege: "User not found" })

                                }

                                else {
                                    var profileData = {
                                        Data: result1.addDetails
                                    }
                                    res.send({ responseCode: 200, responseMessege: "Profile added successfully", profileData })

                                }
                            })

                        }
                    })
                }
                else {
                    let obj = {
                        coverPhoto: req.body.coverPhoto,
                        bioData: req.body.bioData,
                        designation: req.body.designation,
                        metric: req.body.metric,
                        inter: req.body.inter,
                        graduate: req.body.graduate,
                        liveIn: req.body.liveIn,
                        from: req.body.from,
                        mariedStatus: req.body.mariedStatus,
                        gender: req.body.gender,
                        userId: req.body.userId
                    }
                    userModel.findOneAndUpdate({ _id: userResult._id }, { $push: { addDetails: obj } }, { new: true }, (err1, result1) => {
                        if (err1) {
                            res.send({ responseCode: 500, responseMessege: "Internall server error11", err1 })
                        }
                        else if (!result1) {
                            res.send({ responseCode: 404, responseMessege: "User not found" })

                        }

                        else {
                            var profileData = {
                                Data: result1.addDetails
                            }
                            res.send({ responseCode: 200, responseMessege: "Profile added successfully", profileData })

                        }
                    })
                }

            }
        })
    },

    getUserDetails: (req, res) => {
        userModel.findOne({ "addDetails.userId": req.body.userId }, (error, result) => {
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
            }
            else if (!result) {
                return res.send({ responseCode: 404, responseMessage: "Address not found" })
            }
            else {
                var data = {
                    address: result.addDetails
                };
                return res.send({ responseCode: 200, responseMessage: "Address found successfully", data })
            }
        })
    },
    socialLogin: (req, res) => {
        try {
            if (!req.body.socialId || !req.body.loginType) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                user.findOne(
                    { socialId: req.body.socialId, status: { $ne: "DELETED" } },
                    (error, checkSocialId) => {
                        if (error) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!checkSocialId) {
                            var data = {
                                socialId: req.body.socialId,
                                loginType: req.body.loginType,
                                firstName: req.body.firstName,
                                lastName: req.body.lastName,
                                email: req.body.email,
                                profilePic: req.body.profilePic
                            };
                            var obj = new user(data);
                            obj.save((err1, success) => {
                                if (err1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else {
                                    var generatewToken = jwt.sign({ _id: success._id }, "SOCIAL");
                                    var result = {
                                        userDetail: success._id,
                                        token: generatewToken
                                    };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.LOGIN_SUCCESS,
                                        result
                                    );
                                }
                            });
                        } else {
                            var generatewToken = jwt.sign(
                                { _id: checkSocialId._id },
                                "SOCIAL"
                            );
                            var result = {
                                userDetail: checkSocialId._id,
                                token: generatewToken
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.LOGIN_SUCCESS,
                                result
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    forgotEmail: (req, res) => {
        try {
            if (!req.body.secondaryEmail) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {

                user.findOne(
                    { secondaryEmail: req.body.secondaryEmail, status: "ACTIVE" },
                    (error2, success2) => {
                        if (error2) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success2) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            commonFunction.emailSender(
                                success2.secondaryEmail,
                                "Your email is",
                                success2.email,
                                (error, result4) => {
                                    if (error) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!result4) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.SOMETHING_WRONG,
                                            globalMessege.ErrorMessage.SOMETHING_WRONG
                                        );
                                    } else {

                                        var result = { email: success2.email };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.GET_EMAIL,
                                            result
                                        );
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    selectLanguage: (req, res) => {
        try {
            if (!req.headers._id || !req.body.selectedLanguage) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {

                user.findOne(
                    { _id: req.headers._id, status: "ACTIVE" },
                    (error1, success1) => {
                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            user.findOneAndUpdate(
                                { _id: req.headers._id, status: "ACTIVE" },
                                { $set: { selectedLanguage: req.body.selectedLanguage } },
                                { new: true },
                                (error3, success3) => {
                                    if (error3) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success3) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.USER_FOUND
                                        );
                                    } else {

                                        var result = {
                                            selectedLanguage: success3.selectedLanguage
                                        };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.LANGUAGE_SELECTED,
                                            result
                                        );
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    getSelectedLanguage: (req, res) => {
        try {

            user.findOne({ _id: req.headers._id }, (error1, success1) => {
                if (error1) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                        globalMessege.ErrorMessage.INTERNAL_ERROR
                    );
                } else if (!success1) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.NOT_FOUND,
                        globalMessege.ErrorMessage.USER_FOUND
                    );
                } else {

                    var result = {
                        selectedLanguage: success1.selectedLanguage
                    };
                    globalResponse.sendResponseWithData(
                        res,
                        globalStatusCode.SuccessCode.SUCCESS,
                        globalMessege.SuccessMessage.SELECTED_LANGUAGE,
                        result
                    );
                }
            });
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    changeEmailOrPhoneNumber: (req, res) => {
        try {
            if (!req.body.type) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                if (req.body.type == "PHONE") {
                    if (!req.body.countryCode || !req.body.phoneNumber) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.PARAMETER_MISSING,
                            globalMessege.ErrorMessage.FIELD_REQUIRED
                        );
                    } else {
                        var mergeNumber = req.body.countryCode + req.body.phoneNumber;
                        user.findOne(
                            {
                                mergePhoneNumber: mergeNumber,
                                status: "ACTIVE"
                            },
                            (error1, success1) => {

                                if (error1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (success1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.SuccessCode.ALREADY_EXIST,
                                        globalMessege.ErrorMessage.MOBILE_EXIST
                                    );
                                } else {
                                    user.findOne(
                                        {
                                            _id: req.headers._id,
                                            status: "ACTIVE"
                                        },
                                        (error11, success11) => {

                                            if (error11) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                );
                                            } else if (!success11) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                                    globalMessege.ErrorMessage.USER_FOUND
                                                );
                                            } else {
                                                if (success11.emailOtpVerify == true || success11.phoneOtpVerify == true) {
                                                    var phoneOtp = otpGenerator.generate(4, {
                                                        alphabets: false,
                                                        upperCase: false,
                                                        specialChars: false
                                                    });

                                                    var now = new Date();
                                                    var otpExpTime = date.addMinutes(now, 10);
                                                    commonFunction.smsSender(
                                                        mergeNumber,
                                                        phoneOtp,
                                                        (error2, result2) => {
                                                            if (error2) {
                                                                globalResponse.commonResponse(
                                                                    res,
                                                                    globalStatusCode.ErrorCode
                                                                        .INTERNAL_SERVER_ERROR,
                                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                );
                                                            } else if (!result2) {
                                                                globalResponse.commonResponse(
                                                                    res,
                                                                    globalStatusCode.ErrorCode.SOMETHING_WRONG,
                                                                    globalMessege.ErrorMessage.SOMETHING_WRONG
                                                                );
                                                            } else {
                                                                user.findOneAndUpdate(
                                                                    {
                                                                        _id: req.headers._id,
                                                                        status: "ACTIVE"
                                                                    },
                                                                    {
                                                                        $set: {
                                                                            mergePhoneNumber: mergeNumber,
                                                                            countryCode: req.body.countryCode,
                                                                            phoneNumber: req.body.phoneNumber,
                                                                            phoneOtpVerify: false,
                                                                            phoneOtp: phoneOtp,
                                                                            phoneOtpExpireTime: otpExpTime
                                                                        }
                                                                    },
                                                                    { new: true },
                                                                    (error2, success2) => {

                                                                        if (error2) {
                                                                            globalResponse.commonResponse(
                                                                                res,
                                                                                globalStatusCode.ErrorCode
                                                                                    .INTERNAL_SERVER_ERROR,
                                                                                globalMessege.ErrorMessage
                                                                                    .INTERNAL_ERROR
                                                                            );
                                                                        } else if (!success2) {
                                                                            globalResponse.commonResponse(
                                                                                res,
                                                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                                                globalMessege.ErrorMessage.USER_FOUND
                                                                            );
                                                                        } else {

                                                                            globalResponse.commonResponse(
                                                                                res,
                                                                                globalStatusCode.SuccessCode.SUCCESS,
                                                                                globalMessege.SuccessMessage
                                                                                    .PHONE_CHANGE
                                                                            );
                                                                        }
                                                                    }
                                                                );
                                                            }
                                                        }
                                                    );
                                                } else {
                                                    globalResponse.commonResponse(
                                                        res,
                                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                                        "Please login again"
                                                    );
                                                }
                                            }
                                        }
                                    );
                                }
                            }
                        );
                    }
                } else if (req.body.type == "EMAIL") {
                    if (!req.body.email) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.PARAMETER_MISSING,
                            globalMessege.ErrorMessage.FIELD_REQUIRED
                        );
                    } else {
                        user.findOne(
                            {
                                email: req.body.email,
                                status: "ACTIVE"
                            },
                            (error1, success1) => {

                                if (error1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (success1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.SuccessCode.ALREADY_EXIST,
                                        globalMessege.ErrorMessage.EMAIL_EXIST
                                    );
                                } else {
                                    user.findOne(
                                        {
                                            _id: req.headers._id,
                                            status: "ACTIVE"
                                        },
                                        (error11, success11) => {

                                            if (error11) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                );
                                            } else if (!success11) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                                    globalMessege.ErrorMessage.USER_FOUND
                                                );
                                            } else {
                                                if (success11.phoneOtpVerify == true || success11.emailOtpVerify == true) {
                                                    var emailOtp = otpGenerator.generate(4, {
                                                        alphabets: false,
                                                        upperCase: false,
                                                        specialChars: false
                                                    });

                                                    var now = new Date();
                                                    var otpExpTime = date.addMinutes(now, 10);
                                                    commonFunction.emailSender(
                                                        req.body.email,
                                                        "Your otp is",
                                                        emailOtp,
                                                        (error, result1) => {
                                                            if (error) {
                                                                globalResponse.commonResponse(
                                                                    res,
                                                                    globalStatusCode.ErrorCode
                                                                        .INTERNAL_SERVER_ERROR,
                                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                );
                                                            } else if (!result1) {
                                                                globalResponse.commonResponse(
                                                                    res,
                                                                    globalStatusCode.ErrorCode.SOMETHING_WRONG,
                                                                    globalMessege.ErrorMessage.SOMETHING_WRONG
                                                                );
                                                            } else {
                                                                user.findOneAndUpdate(
                                                                    {
                                                                        _id: req.headers._id,
                                                                        status: "ACTIVE"
                                                                    },
                                                                    {
                                                                        $set: {
                                                                            email: req.body.email,
                                                                            emailOtpVerify: false,
                                                                            emailOtp: emailOtp,
                                                                            emailOtpExpireTime: otpExpTime
                                                                        }
                                                                    },
                                                                    { new: true },
                                                                    (error2, success2) => {
                                                                        console.log(
                                                                            "error2, success2>>>>>>>>>2860>>>>>>>>>",
                                                                            error2,
                                                                            success2
                                                                        );
                                                                        if (error2) {
                                                                            globalResponse.commonResponse(
                                                                                res,
                                                                                globalStatusCode.ErrorCode
                                                                                    .INTERNAL_SERVER_ERROR,
                                                                                globalMessege.ErrorMessage
                                                                                    .INTERNAL_ERROR
                                                                            );
                                                                        } else if (!success2) {
                                                                            log("nnnnnnnnnnnnnnnnnnnnppppptttt")
                                                                            globalResponse.commonResponse(
                                                                                res,
                                                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                                                globalMessege.ErrorMessage.USER_FOUND
                                                                            );
                                                                        } else {

                                                                            globalResponse.commonResponse(
                                                                                res,
                                                                                globalStatusCode.SuccessCode.SUCCESS,
                                                                                globalMessege.SuccessMessage
                                                                                    .EMAIL_CHANGE
                                                                            );
                                                                        }
                                                                    }
                                                                );
                                                            }
                                                        }
                                                    );
                                                } else {
                                                    log("errrrrrrrrrrrrrrrroorrrrrr")
                                                    globalResponse.commonResponse(
                                                        res,
                                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                                        "Please login again "
                                                    );
                                                }
                                            }
                                        }
                                    );
                                }
                            }
                        );
                    }
                } else {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.BAD_REQUEST,
                        globalMessege.ErrorMessage.INVALID_INPUT
                    );
                }
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    //-----------------------------------friend section--------------------------------------------------------------

    friendSuggestion: (req, res) => {
        try {

            user.findOne({ _id: req.headers._id }, (errr, resultt) => {

                if (errr) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                        globalMessege.ErrorMessage.INTERNAL_ERROR
                    );
                } else if (!resultt) {

                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.NOT_FOUND,
                        globalMessege.ErrorMessage.NOT_FOUND
                    );
                } else {
                    const arr = resultt.friendRequestSentList;
                    const arr1 = resultt.friendList;
                    const arr2 = resultt.friendRequistList;
                    let friends = [];
                    let friendlist = [];
                    let friendrequestsent = [];
                    arr.forEach(x => {

                        if (x.status == "WAITING") {
                            arr1.push(x.friendRequistId);
                        }
                    });
                    arr.forEach(x => {
                        if (x.status != "DELETE") {
                            friendrequestsent.push(x.friendRequestSentId);
                        }
                    });
                    arr1.forEach(x => {
                        if (x.status != "DELETE") {
                            friends.push(x.friendId);
                        }
                    });
                    arr2.forEach(x => {
                        if (x.status != "DELETE") {
                            friendlist.push(x.friendRequistId);
                        }
                    });
                    const newArr = friendrequestsent.concat(friendlist, friends);
                    newArr.push(resultt._id);
                    var options = {
                        page: req.body.pageNumber || 1,
                        limit: req.body.limit || 5,
                        select: "firstName email phoneNumber profilePic friendList friendId ",
                        sort: {
                            createdAt: -1
                        }
                    };
                    user.paginate(
                        {
                            _id: { $nin: newArr },
                            status: "ACTIVE"
                        },
                        options,
                        (errr, result1) => {
                            if (errr) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            } else if (result1.length == 0) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.NOT_FOUND
                                );
                            } else {

                                var result = { success2: result1 };

                                let doc = result1.docs
                                // let docArr=[]
                                let newArray = []
                                doc.forEach(x => {
                                    let friendArray = []
                                    let count = []
                                    let friendId = []
                                    friendArray.concat(x.friendList)
                                    log("+++++++++++++++++++++++++++++++++++", x, "ttttttttttttttttt", x.friendList)
                                    for (let a = 0; a < friendArray.length; a++) {
                                        friendId.push(friendArray[a].friendId)
                                    }

                                    var presents = _.intersectionWith(friendlist, friendId, _.isEqual);

                                    var obj = {
                                        _id: x._id,
                                        firstName: x.firstName,
                                        email: x.email,
                                        phoneNumber: x.phoneNumber,
                                        profilePic: x.profilePic,
                                        mutual: presents
                                            .length
                                    }
                                    newArray.push(obj);


                                })

                                const total = result1.total;
                                const pages = result1.pages;
                                const limit = result1.limit;
                                const page = result1.page;
                                var result0 = { success2: { docs: newArray, total, limit, page, pages } };

                                globalResponse.sendResponseWithData(
                                    res,
                                    globalStatusCode.SuccessCode.SUCCESS,
                                    globalMessege.SuccessMessage.USER_LIST_FETCH,
                                    result0
                                );
                            }
                        }

                    );
                }
            });
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    sendFriendRequest: (req, res) => {
        try {
            if ((!req.body.friendId, !req.body.response)) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                user.findOne({ _id: req.headers._id }, (error1, success1) => {

                    if (error1) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!success1) {

                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.USER_FOUND
                        );
                    } else {
                        if (success1.friendRequestSentList.filter(a => a.friendRequestSentId.toString() == req.body.friendId).length == 0) {
                            user.findOneAndUpdate(
                                {
                                    _id: req.headers._id
                                },
                                {
                                    $push: {
                                        friendRequestSentList: [
                                            {
                                                friendRequestSentId: req.body.friendId,
                                                status: req.body.response
                                            }
                                        ]
                                    }
                                },
                                { new: true },
                                (error10, success10) => {

                                    if (error10) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success10) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.USER_FOUND
                                        );
                                    } else {

                                        if (req.body.response == "SENT") {
                                            user.findOneAndUpdate(
                                                {
                                                    _id: req.body.friendId,
                                                    status: "ACTIVE"
                                                },
                                                {
                                                    $push: {
                                                        friendRequistList: [
                                                            {
                                                                friendRequistId: req.headers._id
                                                            }
                                                        ]
                                                    }
                                                },
                                                { new: true },
                                                (error6, success6) => {

                                                    if (error6) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                                        );
                                                    } else if (!success6) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                                            globalMessege.ErrorMessage.USER_FOUND
                                                        );
                                                    } else {
                                                        if (success6.fcmToken == null) {

                                                            var result = {
                                                                success10: success10,
                                                                success6: success6
                                                            };
                                                            var notification0 = {
                                                                userId: req.body.friendId,
                                                                senderId: req.headers._id,
                                                                title: "Friend request",
                                                                body: success1.firstName + " has sent you a friend request",
                                                                senderIdMessage: `${success1.firstName} sent friend request to ${success6.firstName}`,
                                                                notificationType: "Friend Request"
                                                            }
                                                            var notify4 = new webNotification(notification0)
                                                            notify4.save((SaveError, save) => {

                                                                if (SaveError) {
                                                                    globalResponse.commonResponse(
                                                                        res,
                                                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                                        globalMessege.ErrorMessage.INTERNAL_ERROR, SaveError
                                                                    );
                                                                }
                                                                else {
                                                                    globalResponse.sendResponseWithData(
                                                                        res,
                                                                        globalStatusCode.SuccessCode.SUCCESS,
                                                                        globalMessege.SuccessMessage.ADD_FRIEND
                                                                    );
                                                                }
                                                            })
                                                        }
                                                        else {
                                                            commonFunction.pushNotification(success6.fcmToken, "Friend Request", success1.firstName + "has sent you a friend request", (err, notificationResult) => {
                                                                if (err) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err })
                                                                }
                                                                else {
                                                                    var notification = {
                                                                        userId: req.body.friendId,
                                                                        senderId: req.headers._id,
                                                                        title: "Friend request",
                                                                        body: success1.firstName + " has sent you a friend request",
                                                                        senderIdMessage: `${success1.firstName} sent friend request to ${success6.firstName}`,
                                                                        notificationType: "Friend Request"
                                                                    }
                                                                    var notify = new notificationModel(notification)
                                                                    notify.save((SaveError, save) => {
                                                                        if (SaveError) {
                                                                            globalResponse.commonResponse(
                                                                                res,
                                                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                            );
                                                                        }
                                                                        else {
                                                                            globalResponse.sendResponseWithData(
                                                                                res,
                                                                                globalStatusCode.SuccessCode.SUCCESS,
                                                                                globalMessege.SuccessMessage.ADD_FRIEND
                                                                            );
                                                                        }
                                                                    })
                                                                }
                                                            })
                                                        }
                                                    }
                                                }
                                            );
                                        } else {
                                            var result = {
                                                success10: success10
                                            };

                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.REMOVE_FRIEND
                                            );
                                        }
                                    }
                                }
                            );
                        }
                        else {
                            res.send({ respononseCode: 404, responseMessage: "Friend request already sent" })
                        }

                    }
                });
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },


    actionToFriendRequest1: (req, res) => {
        try {
            if (
                !req.body.response ||
                !req.body.friendRequestId ||
                !req.body.friendRequestUserId
            ) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var set = {};
                if (req.body.response) {

                    set["friendRequistList.$.status"] = req.body.response;
                }
                user.findOneAndUpdate(
                    {
                        "friendRequistList._id": req.body.friendRequestId
                    },
                    {
                        $set: set
                    },
                    { new: true },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            var set1 = {};
                            if (req.body.response) {
                                set1["friendRequestSentList.$.status"] = req.body.response;
                            }
                            user.findOneAndUpdate(
                                {
                                    "friendRequestSentList.friendRequestSentId": req.headers._id
                                },
                                { $set: set1 },
                                { new: true },
                                (error2, success2) => {

                                    if (error2) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success2) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.USER_FOUND
                                        );
                                    } else {
                                        if (req.body.response == "ACCEPT") {
                                            user.findOneAndUpdate(
                                                {
                                                    _id: req.body.friendRequestUserId
                                                },
                                                {
                                                    $push: {
                                                        friendList: [
                                                            {
                                                                friendId: req.headers._id
                                                            }
                                                        ]
                                                    }
                                                },
                                                { new: true },
                                                (error3, success3) => {

                                                    if (error3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                                        );
                                                    } else if (!success3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                                            globalMessege.ErrorMessage.USER_FOUND
                                                        );
                                                    } else {
                                                        user.findOneAndUpdate(
                                                            {
                                                                _id: req.headers._id
                                                            },
                                                            {
                                                                $push: {
                                                                    friendList: [
                                                                        {
                                                                            friendId: req.body.friendRequestUserId
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            { new: true },
                                                            (error4, success4) => {

                                                                if (error4) {
                                                                    globalResponse.commonResponse(
                                                                        res,
                                                                        globalStatusCode.ErrorCode
                                                                            .INTERNAL_SERVER_ERROR,
                                                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                    );
                                                                } else if (!success4) {
                                                                    globalResponse.commonResponse(
                                                                        res,
                                                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                                                        globalMessege.ErrorMessage.USER_FOUND
                                                                    );
                                                                } else {

                                                                    globalResponse.sendResponseWithData(
                                                                        res,
                                                                        globalStatusCode.SuccessCode.SUCCESS,
                                                                        globalMessege.SuccessMessage.REQUEST_ACCEPT

                                                                    );
                                                                }
                                                            }
                                                        );
                                                    }
                                                }
                                            );
                                        } else {
                                            if (req.body.response == "DELETE") {

                                                globalResponse.sendResponseWithData(
                                                    res,
                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                    globalMessege.SuccessMessage.REQUEST_DELETE

                                                );
                                            } else {

                                                globalResponse.sendResponseWithData(
                                                    res,
                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                    globalMessege.SuccessMessage.REQUEST_BLOCK

                                                );
                                            }
                                        }
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    actionToFriendRequest: (req, res) => {
        try {
            if (
                !req.body.response ||
                !req.body.friendRequestId ||
                !req.body.friendRequestUserId
            ) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var set = {};
                if (req.body.response) {

                    set["friendRequistList.$.status"] = req.body.response;
                }
                user.findOneAndUpdate(
                    {
                        "friendRequistList._id": req.body.friendRequestId
                    },
                    {
                        $set: set
                    },
                    { new: true },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            var set1 = {};
                            if (req.body.response) {
                                set1["friendRequestSentList.$.status"] = req.body.response;
                            }
                            user.findOneAndUpdate(
                                {
                                    "friendRequestSentList.friendRequestSentId": req.headers._id
                                },
                                { $set: set1 },
                                { new: true },
                                (error2, success2) => {

                                    if (error2) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success2) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.USER_FOUND
                                        );
                                    } else {

                                        if (req.body.response == "ACCEPT") {
                                            user.findOneAndUpdate(
                                                {
                                                    _id: req.body.friendRequestUserId
                                                },
                                                {
                                                    $push: {
                                                        friendList: [
                                                            {
                                                                friendId: req.headers._id
                                                            }
                                                        ]
                                                    }
                                                },
                                                { new: true },
                                                (error3, success3) => {

                                                    if (error3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                                        );
                                                    } else if (!success3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                                            globalMessege.ErrorMessage.USER_FOUND
                                                        );
                                                    } else {
                                                        user.findOneAndUpdate(
                                                            {
                                                                _id: req.headers._id
                                                            },
                                                            {
                                                                $push: {
                                                                    friendList: [
                                                                        {
                                                                            friendId: req.body.friendRequestUserId
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            { new: true },
                                                            (error4, success4) => {

                                                                if (error4) {
                                                                    globalResponse.commonResponse(
                                                                        res,
                                                                        globalStatusCode.ErrorCode
                                                                            .INTERNAL_SERVER_ERROR,
                                                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                    );
                                                                } else if (!success4) {
                                                                    globalResponse.commonResponse(
                                                                        res,
                                                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                                                        globalMessege.ErrorMessage.USER_FOUND
                                                                    );
                                                                } else {
                                                                    if (success3.fcmToken == null) {
                                                                        var obj = {
                                                                            userId: req.body.friendRequestUserId,
                                                                            senderId: req.headers._id,
                                                                            title: "You are now friend with " + success1.firstName,

                                                                            body: "You are now friend with " + success1.firstName,
                                                                            notificationType: "Friend Request Accepted"
                                                                        };
                                                                        new webNotification(obj).save((saveErr, saveResult) => {
                                                                            if (saveErr) {
                                                                                globalResponse.commonResponse(
                                                                                    res,
                                                                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                                );
                                                                            }
                                                                            else {

                                                                                globalResponse.sendResponseWithData(
                                                                                    res,
                                                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                                                    globalMessege.SuccessMessage.REQUEST_ACCEPT

                                                                                );
                                                                            }
                                                                        })

                                                                    }
                                                                    else {
                                                                        commonFunction.pushNotification(success3.fcmToken, "Friend request accepted", "You are now friend with " + success2.firstName, (err, notificationResult) => {
                                                                            if (err) {
                                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error", err })
                                                                            }
                                                                            else {
                                                                                var notification = {
                                                                                    userId: req.body.friendRequestUserId,
                                                                                    senderId: req.headers._id,
                                                                                    title: "You are now friend with " + success1.firstName,
                                                                                    body: "You are now friend with " + success1.firstName,
                                                                                    notificationType: "Friend Request Accepted"
                                                                                }
                                                                                var notify = new notificationModel(notification)
                                                                                notify.save((SaveError, save) => {
                                                                                    if (SaveError) {
                                                                                        globalResponse.commonResponse(
                                                                                            res,
                                                                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                                        );
                                                                                    }
                                                                                    else {
                                                                                        globalResponse.sendResponseWithData(
                                                                                            res,
                                                                                            globalStatusCode.SuccessCode.SUCCESS,
                                                                                            globalMessege.SuccessMessage.REQUEST_ACCEPT

                                                                                        );
                                                                                    }
                                                                                })
                                                                            }
                                                                        })
                                                                    }
                                                                }
                                                            }
                                                        );
                                                    }
                                                }
                                            );
                                        } else {
                                            if (req.body.response == "DELETE") {
                                                if (success2.fcmToken == null) {
                                                    var obj = {
                                                        userId: req.body.friendRequestUserId,
                                                        senderId: req.headers._id,
                                                        title: "Friend request rejected",
                                                        body: "Your friend request was rejected by " + success1.firstName,
                                                        notificationType: "Friend Request Rejected"
                                                    };
                                                    new webNotification(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            globalResponse.commonResponse(
                                                                res,
                                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                                            );
                                                        }
                                                        else {

                                                            globalResponse.sendResponseWithData(
                                                                res,
                                                                globalStatusCode.SuccessCode.SUCCESS,
                                                                globalMessege.SuccessMessage.REQUEST_DELETE

                                                            );
                                                        }
                                                    })
                                                }
                                                else {
                                                    commonFunction.pushNotification(success2.fcmToken, "Friend request rejected", "Your friend request was rejected by " + success2.firstName, (err, notificationResult) => {
                                                        if (err) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err })
                                                        }
                                                        else {
                                                            var notification = {
                                                                userId: req.body.friendRequestUserId,
                                                                senderId: req.headers._id,
                                                                title: "Your friend request was rejected by " + success1.firstName,
                                                                body: "Your friend request was rejected by " + success1.firstName,
                                                                notificationType: "Friend Request Rejected"
                                                            }
                                                            var notify = new notificationModel(notification)
                                                            notify.save((SaveError, save) => {
                                                                if (SaveError) {
                                                                    globalResponse.commonResponse(
                                                                        res,
                                                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                                                    );
                                                                }
                                                                else {
                                                                    globalResponse.sendResponseWithData(
                                                                        res,
                                                                        globalStatusCode.SuccessCode.SUCCESS,
                                                                        globalMessege.SuccessMessage.REQUEST_ACCEPT

                                                                    );
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            } else {

                                                globalResponse.sendResponseWithData(
                                                    res,
                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                    globalMessege.SuccessMessage.REQUEST_BLOCK

                                                );
                                            }
                                        }
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },


    viewFriend: (req, res) => {
        user.findOne({ _id: req.body.userId, status: "ACTIVE" }).populate({ path: "friendList.friendId", select: "profilePic firstName lastName" }).exec((userErr, userResutl) => {
            if (userErr) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                    globalMessege.ErrorMessage.INTERNAL_ERROR
                );
            }
            else {
                if (userResutl.friendList != null) {
                    var data = {
                        friendList: userResutl.friendList
                    }
                    return res.send({ responseCode: 200, responseMessage: "Friend found sucessfully", data })
                }
                else {
                    return res.send({ responseCode: 404, responseMessage: "You are not having friends" })

                }
            }
        })
    },
    // getFriendList: (req, res) => {
    //     try {
    //         user.findOne(
    //             {
    //                 _id: req.headers._id
    //             },
    //             (err, success1) => {

    //                 if (err) {
    //                     globalResponse.commonResponse(
    //                         res,
    //                         globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
    //                         globalMessege.ErrorMessage.INTERNAL_ERROR
    //                     );
    //                 } else if (!success1) {
    //                     var result = { friendList: { docs: [] } };
    //                     globalResponse.commonResponse(
    //                         res,
    //                         globalStatusCode.ErrorCode.SUCCESS,
    //                         globalMessege.ErrorMessage.USER_FOUND,
    //                         result
    //                     );
    //                 } else {
    //                     var arr = success1.friendList;
    //                     var arr1 = [];

    //                     arr.forEach(x => {
    //                         console.log("3290>>>>>>>>>>>", x);
    //                         if (x.status == "ACTIVE") {
    //                             arr1.push(x.friendId);
    //                         }
    //                     });
    //                     var options = {
    //                         sort: { created_at: -1 },
    //                         page: req.body.pageNumber || 1,
    //                         select: "profilePic _id firstName email friendList _id",
    //                         limit: arr1.length
    //                     };

    //                     user.paginate(
    //                         {
    //                             _id: arr1
    //                         },
    //                         options,
    //                         (err1, success11) => {
    //                             if (err1) {
    //                                 globalResponse.commonResponse(
    //                                     res,
    //                                     globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
    //                                     globalMessege.ErrorMessage.INTERNAL_ERROR
    //                                 );
    //                             } else if (!success11) {
    //                                 var result = { friendList: "[]" };
    //                                 globalResponse.commonResponse(
    //                                     res,
    //                                     globalStatusCode.ErrorCode.SUCCESS,
    //                                     globalMessege.ErrorMessage.USER_FOUND,
    //                                     result
    //                                 );
    //                             } else {


    //                                 let doc = success11.docs
    //                                 let newArray = []
    //                                 doc.forEach(x => {

    //                                     let count = []
    //                                     let friendId = []
    //                                     let counter = 0

    //                                     for (let a = 0; a < x.friendList.length; a++) {
    //                                         friendId.push(x.friendList[a].friendId)
    //                                     }
    //                                     var presents = _.intersectionWith(arr1, friendId, _.isEqual);



    //                                     var obj = {
    //                                         _id: x._id,
    //                                         firstName: x.firstName,
    //                                         email: x.email,

    //                                         profilePic: x.profilePic,
    //                                         friendList: x.friendList,
    //                                         mutual: presents.length
    //                                     }
    //                                     newArray.push(obj);


    //                                 })

    //                                 const total = success11.total;
    //                                 const pages = success11.pages;
    //                                 const limit = success11.limit;
    //                                 const page = success11.page;
    //                                 var result = { success2: { docs: newArray, total, limit, page, pages } };


    //                                 globalResponse.sendResponseWithData(
    //                                     res,
    //                                     globalStatusCode.SuccessCode.SUCCESS,
    //                                     globalMessege.SuccessMessage.FRIEND_DETAIL,
    //                                     result
    //                                 );
    //                             }
    //                         }


    //                     );

    //                 }
    //             }
    //         );
    //     } catch (error) {
    //         globalResponse.commonResponse(
    //             res,
    //             globalStatusCode.ErrorCode.BAD_REQUEST,
    //             globalMessege.ErrorMessage.ERROR_IN_CATCH
    //         );
    //     }
    // },
    getFriendRequestList: (req, res) => {
        try {
            user.findOne(
                {
                    _id: req.headers._id
                },
                (err, success1) => {

                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!success1) {
                        var result = { friendRequistList: { docs: [] } };
                        globalResponse.sendResponseWithData(
                            res,
                            globalStatusCode.SuccessCode.SUCCESS,
                            globalMessege.SuccessMessage.USER_FOUND,
                            result
                        );
                    } else {
                        var arr = success1.friendRequistList;
                        var arr1 = [];
                        var arr2 = [];
                        console.log("3288>>>>>>>>>>>>>", arr);
                        arr.forEach(x => {
                            console.log("3290>>>>>>>>>>>", x);
                            if (x.status == "WAITING") {
                                arr1.push(x.friendRequistId);
                                arr2.push(x._id);
                            }
                        });
                        console.log("3288>>>>>>>>>>>>>>>>>>", arr1);
                        console.log("3289>>>>>>>>>>>>>>>>", arr2);

                        var options = {
                            sort: { created_at: -1 },

                            page: req.body.pageNumber || 1,
                            select: "firstName email phoneNumber profilePic _id",
                            limit: 5
                        };
                        console.log("gggggggggggggggggggggggggg", options);
                        user.paginate(
                            {
                                _id: arr1
                            },
                            options,
                            (err1, success11) => {
                                if (err1) {

                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (!success11) {
                                    var result = { friendRequistList: { docs: [] } };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.USER_FOUND,
                                        result
                                    );
                                } else {
                                    var getFriendRequestListresult = {
                                        success2: success11,
                                        friendRequestUserId: arr1,
                                        friendRequestId: arr2

                                    };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.FRIEND_DETAIL,
                                        getFriendRequestListresult
                                    );
                                }
                            }
                        );

                    }
                }
            );
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    searchFriendSuggestion: (req, res) => {                
        try {
            if (!req.body.search) {
                user.findOne({ _id: req.headers._id }, (errr, resultt) => {
                    if (errr) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!resultt) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.NOT_FOUND
                        );
                    } else {
                        const arr = resultt.friendRequestSentList;
                        const arr1 = resultt.friendList;
                        const arr2 = resultt.friendRequistList;
                        let friends = [];
                        let friendlist = [];
                        let friendrequestsent = [];
                        arr.forEach(x => {
                            if (x.status == "WAITING") {
                                arr1.push(x.friendRequistId);
                            }
                        });
                        arr.forEach(x => {
                            if (x.status != "DELETE") {
                                friendrequestsent.push(x.friendRequestSentId);
                            }
                        });
                        arr1.forEach(x => {
                            if (x.status != "DELETE") {
                                friends.push(x.friendId);
                            }
                        });
                        arr2.forEach(x => {
                            if (x.status != "DELETE") {
                                friendlist.push(x.friendRequistId);
                            }
                        });
                        const newArr = friendrequestsent.concat(friendlist, friends);
                        newArr.push(resultt._id);
                        var options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            select: "firstName email phoneNumber profilePic",
                            sort: {
                                createdAt: -1
                            }
                        };
                        user.paginate(
                            {
                                _id: { $nin: newArr },
                                status: "ACTIVE"
                            },
                            options,
                            (errr, result1) => {
                                if (errr) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (result1.length == 0) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.NOT_FOUND
                                    );
                                } else {

                                    var result = { success2: result1 };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.USER_LIST_FETCH,
                                        result
                                    );
                                }
                            }
                        );
                    }
                });
            } else {
                user.findOne({ _id: req.headers._id }, (errr, resultt) => {
                    if (errr) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!resultt) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.NOT_FOUND
                        );
                    } else {
                        const arr = resultt.friendRequestSentList;
                        const arr1 = resultt.friendList;
                        const arr2 = resultt.friendRequistList;
                        let friends = [];
                        let friendlist = [];
                        let friendrequestsent = [];
                        arr.forEach(x => {
                            friendrequestsent.push(x.friendRequestSentId);
                        });
                        arr1.forEach(x => {
                            friends.push(x.friendId);
                        });
                        arr2.forEach(x => {
                            friendlist.push(x.friendRequistId);
                        });
                        const newArr = friendrequestsent.concat(friendlist, friends);
                        newArr.push(resultt.userId);
                        user.find(
                            {
                                _id: { $nin: newArr },
                                status: "ACTIVE"
                            },
                            (errr, result1) => {
                                if (errr) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (result1.length == 0) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.NOT_FOUND
                                    );
                                } else {


                                    var arr = [];
                                    var i = 0,
                                        j = 0;
                                    for (i = 0; i < result1.length; i++) {
                                        var check = result1[i].firstName.slice(
                                            0,
                                            req.body.search.length
                                        );
                                        if (check == req.body.search) {
                                            console.log("j = ", j);
                                            arr[j] = result1[i]._id;
                                            console.log("2425>>>>>>>>>>>>>>", arr[j]);
                                            j++;
                                        }
                                    }
                                    for (i = 0; i < arr.length; i++) {
                                        console.log("2431>>>>>>>>>>>>>>array detail ", arr[i]);
                                    }
                                    console.log("2433>>>>>>>>>", result1.length);
                                    console.log("2435>>>>>>>>>", result1[0].firstName);
                                    var options = {
                                        page: req.body.pageNumber || 1,
                                        limit: req.body.limit || 5,
                                        select: "firstName _id profilePic email",
                                        sort: {
                                            createdAt: -1
                                        }
                                    };

                                    user.paginate(
                                        { status: "ACTIVE", _id: arr },
                                        options,
                                        (err, result11) => {
                                            if (err) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                                );
                                            } else if (result11.length == 0) {
                                                globalResponse.commonResponse(
                                                    res,
                                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                                    globalMessege.ErrorMessage.NOT_FOUND
                                                );
                                            } else {
                                                let arrr = result11.docs;
                                                let user = [];
                                                arrr.forEach(x => {
                                                    if (x._id != req.headers._id) {
                                                        user.push(x);
                                                    }
                                                });
                                                var result33 = { success2: result11 };
                                                globalResponse.sendResponseWithData(
                                                    res,
                                                    globalStatusCode.SuccessCode.SUCCESS,
                                                    globalMessege.SuccessMessage.USER_LIST_FETCH,
                                                    result33
                                                );
                                            }
                                        }
                                    );
                                }
                            }
                        );
                    }
                });
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    searchFriendList: (req, res) => {
        try {
            if (!req.body.search) {
                user.findOne(
                    {
                        _id: req.headers._id
                    },
                    (err, success1) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = { success11: "[]" };
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.SUCCESS,
                                globalMessege.ErrorMessage.USER_FOUND,
                                result
                            );
                        } else {
                            const list = success1.friendList;
                            let friendList = [];
                            list.forEach(x => {
                                console.log("3290>>>>>>>>>>>", x);
                                if (x.status == "ACTIVE") {
                                    friendList.push(x.friendId);
                                }
                            });

                            var options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                select: "firstName email phoneNumber profilePic",
                                sort: {
                                    createdAt: -1
                                }
                            };

                            user.paginate(
                                { status: "ACTIVE", _id: friendList },
                                options,
                                (err, result1) => {
                                    if (err) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {
                                        var result = { success11: result1 };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                                            result
                                        );
                                    }
                                }
                            );
                        }
                    }
                );
            } else {
                user.findOne(
                    {
                        _id: req.headers._id
                    },
                    (err, success1) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = { success11: "[]" };
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.SUCCESS,
                                globalMessege.ErrorMessage.USER_FOUND,
                                result
                            );
                        } else {
                            const list = success1.friendList;
                            let friendList = [];
                            list.forEach(x => {
                                console.log("3290>>>>>>>>>>>", x);
                                if (x.status == "ACTIVE") {
                                    friendList.push(x.friendId);
                                }
                            });
                            user.find(
                                {
                                    _id: friendList,
                                    status: "ACTIVE"
                                },
                                (errr, result1) => {
                                    console.log("2599>>>>>>>>>>>>.", errr, result1);
                                    if (errr) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {
                                        var arr = [];
                                        var i = 0,
                                            j = 0;
                                        console.log("2617>>>>>>>>>>>", result1.length);

                                        for (i = 0; i < result1.length; i++) {
                                            var check = result1[i].firstName.slice(
                                                0,
                                                req.body.search.length
                                            );
                                            if (check == req.body.search) {
                                                console.log("j = ", j);
                                                arr[j] = result1[i]._id;
                                                console.log("2425>>>>>>>>>>>>>>", arr[j]);
                                                j++;
                                            }
                                        }
                                        console.log("2429>>>>>>>>array length", arr.length);
                                        for (i = 0; i < arr.length; i++) {
                                            console.log("2431>>>>>>>>>>>>>>array detail ", arr[i]);
                                        }

                                        var options = {
                                            page: req.body.pageNumber || 1,
                                            limit: req.body.limit || 5,
                                            select: "firstName email phoneNumber profilePic",
                                            sort: {
                                                createdAt: -1
                                            }
                                        };

                                        user.paginate(
                                            { status: "ACTIVE", _id: arr },
                                            options,
                                            (err, result1) => {
                                                if (err) {
                                                    globalResponse.commonResponse(
                                                        res,
                                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                                    );
                                                } else if (result1.length == 0) {
                                                    globalResponse.commonResponse(
                                                        res,
                                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                                        globalMessege.ErrorMessage.NOT_FOUND
                                                    );
                                                } else {
                                                    var result = { success11: result1 };
                                                    globalResponse.sendResponseWithData(
                                                        res,
                                                        globalStatusCode.SuccessCode.SUCCESS,
                                                        globalMessege.SuccessMessage.USER_LIST_FETCH,
                                                        result
                                                    );
                                                }
                                            }
                                        );
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    searchFriendRequestList: (req, res) => {
        try {
            if (!req.body.search) {
                user.findOne(
                    {
                        _id: req.headers._id
                    },
                    (err, success1) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = { success2: "[]" };
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.SUCCESS,
                                globalMessege.ErrorMessage.USER_FOUND,
                                result
                            );
                        } else {
                            const list = success1.friendRequistList;
                            let friendrequestsent = [];
                            list.forEach(x => {
                                console.log("3290>>>>>>>>>>>", x);
                                if (x.status == "WAITING") {
                                    friendrequestsent.push(x.friendRequistId);
                                }
                            });

                            var options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                select: "firstName email phoneNumber profilePic",
                                sort: {
                                    createdAt: -1
                                }
                            };

                            user.paginate(
                                { status: "ACTIVE", _id: friendrequestsent },
                                options,
                                (err, result1) => {
                                    if (err) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {
                                        var result = { success2: result1 };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                                            result
                                        );
                                    }
                                }
                            );
                        }
                    }
                );
            } else {
                user.findOne(
                    {
                        _id: req.headers._id
                    },
                    (err, success1) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = { success2: "[]" };
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.SUCCESS,
                                globalMessege.ErrorMessage.USER_FOUND,
                                result
                            );
                        } else {
                            const list = success1.friendRequistList;
                            console.log("2584>>>>>>>>>>..", list);
                            let friendrequestsent = [];
                            list.forEach(x => {
                                console.log("3290>>>>>>>>>>>", x);
                                if (x.status == "WAITING") {
                                    friendrequestsent.push(x.friendRequistId);
                                }
                            });
                            user.find(
                                {
                                    _id: friendrequestsent,
                                    status: "ACTIVE"
                                },
                                (errr, result1) => {
                                    if (errr) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {
                                        var arr = [];
                                        var i = 0,
                                            j = 0;
                                        console.log("2617>>>>>>>>>>>", result1.length);

                                        for (i = 0; i < result1.length; i++) {
                                            var check = result1[i].firstName.slice(
                                                0,
                                                req.body.search.length
                                            );
                                            if (check == req.body.search) {
                                                console.log("j = ", j);
                                                arr[j] = result1[i]._id;
                                                console.log("2425>>>>>>>>>>>>>>", arr[j]);
                                                j++;
                                            }
                                        }
                                        for (i = 0; i < arr.length; i++) {
                                            console.log("2431>>>>>>>>>>>>>>array detail ", arr[i]);
                                        }

                                        var options = {
                                            page: req.body.pageNumber || 1,
                                            limit: req.body.limit || 5,
                                            select: "firstName email phoneNumber profilePic",
                                            sort: {
                                                createdAt: -1
                                            }
                                        };

                                        user.paginate(
                                            { status: "ACTIVE", _id: arr },
                                            options,
                                            (err, result1) => {
                                                if (err) {
                                                    globalResponse.commonResponse(
                                                        res,
                                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                                    );
                                                } else if (result1.length == 0) {
                                                    globalResponse.commonResponse(
                                                        res,
                                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                                        globalMessege.ErrorMessage.NOT_FOUND
                                                    );
                                                } else {
                                                    var result = { success2: result1 };
                                                    globalResponse.sendResponseWithData(
                                                        res,
                                                        globalStatusCode.SuccessCode.SUCCESS,
                                                        globalMessege.SuccessMessage.USER_LIST_FETCH,
                                                        result
                                                    );
                                                }
                                            }
                                        );
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },


    //----------------------------------------group section-----------------------------------------------------------

    createGroup: (req, res) => {
        try {

            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err2, result2) => {
                if (err2) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                        globalMessege.ErrorMessage.INTERNAL_ERROR
                    );
                } else if (!result2) {
                    res.send({ responseCode: 404, responseMessege: "User not found" })
                }
                else {
                    if (req.body.image) {
                        commonFunction.imageUploadCloudinary(req.body.image, (imgError, imgResult) => {
                            if (imgError) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            }
                            else {
                                req.body.coverPic = imgResult


                                let admin = {
                                    memberId: req.body.userId,
                                    role: "GROUPADMIN"
                                };
                                req.body.members.push(admin);
                                var obj = new group(req.body);
                                obj.userName = result2.firstName + " " + result2.lastName

                                obj.save((err1, success) => {
                                    if (err1) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR, err1
                                        );
                                    } else {
                                        var result = { _id: success };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.GROUP_CREATED,
                                            result
                                        );
                                    }
                                });
                            }
                        })
                    }
                    else {
                        let admin = {
                            memberId: req.body.userId,
                            role: "GROUPADMIN"
                        };
                        req.body.members.push(admin);
                        var obj = new group(req.body);
                        obj.userName = result2.firstName + " " + result2.lastName

                        obj.save((err1, success) => {
                            if (err1) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR, err1
                                );
                            } else {
                                var result = { _id: success };
                                globalResponse.sendResponseWithData(
                                    res,
                                    globalStatusCode.SuccessCode.SUCCESS,
                                    globalMessege.SuccessMessage.GROUP_CREATED,
                                    result
                                );
                            }
                        });

                    }

                }

            })

        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    groupAddFriend: (req, res) => {
        try {
            if (!req.body.members || !req.body.groupId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                var arr = req.body.members;
                var arr1 = [];
                console.log("3288>>>>>>>>>>>>>", arr);
                arr.forEach(x => {
                    arr1.push(x.memberId);
                });
                user.findOne(
                    {
                        _id: arr1,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            group.findOne(
                                {
                                    _id: req.body.groupId,
                                    status: "ACTIVE"
                                },
                                (error2, success2) => {

                                    if (error2) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success2) {
                                        var result = {
                                            success2: []
                                        };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.GROUP_NOT_FOUND,
                                            result
                                        );
                                    } else {
                                        var arr2 = success2.members;


                                        arr2.forEach(x => {
                                            if (
                                                x.memberId == req.headers._id &&
                                                x.status == "ACTIVE" &&
                                                x.role == "GROUPADMIN"
                                            ) {
                                                check = true;
                                            }
                                        });


                                        if (!check) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.ONLY_ADMIN_CAN_ADD
                                            );
                                        } else {
                                            group.findOneAndUpdate(
                                                {
                                                    _id: req.body.groupId,
                                                    status: "ACTIVE"
                                                },
                                                {
                                                    $push: {
                                                        members: req.body.members
                                                    }
                                                },
                                                { new: true },
                                                (error3, success3) => {

                                                    if (error3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                                        );
                                                    } else if (!success3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                                            globalMessege.ErrorMessage.GROUP_NOT_FOUND
                                                        );
                                                    } else {
                                                        var result = {
                                                            success2: success3
                                                        };
                                                        globalResponse.sendResponseWithData(
                                                            res,
                                                            globalStatusCode.SuccessCode.SUCCESS,
                                                            globalMessege.SuccessMessage.FRIEND_ADDED,
                                                            result
                                                        );
                                                    }
                                                }
                                            );
                                        }
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    groupFriendList: (req, res) => {
        try {
            var check = false;
            group.findOne(
                {
                    _id: req.body.groupId,
                    status: "ACTIVE"
                },
                (err, success1) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!success1) {
                        var result = { success2: { docs: [] } };
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.SUCCESS,
                            globalMessege.ErrorMessage.GROUP_NOT_FOUND,
                            result
                        );
                    } else {
                        var arr = success1.members;
                        var arr1 = [];
                        var arr2 = [];
                        console.log("3288>>>>>>>>>>>>>", arr);
                        arr.forEach(x => {
                            if (x.status == "ACTIVE") {
                                if (x.memberId == req.headers._id) {
                                    check = true;
                                } else {
                                    arr1.push(x.memberId);
                                    arr2.push(x._id);
                                }
                            }
                        });
                        if (!check) {
                            var finalresult1 = { friendList: "[]" };
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.ErrorMessage.NO_PERMISSION_TO_GET_INFO,
                                finalresult1
                            );
                        } else {
                            var options = {
                                sort: { created_at: -1 },
                                page: req.body.pageNumber || 1,
                                select: "profilePic _id firstName email",
                                limit: 5
                            };
                            user.paginate(
                                {
                                    _id: arr1
                                },
                                options,
                                (err1, success11) => {
                                    if (err1) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success11) {
                                        var result = { friendList: "[]" };
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.ErrorMessage.USER_FOUND,
                                            result
                                        );
                                    }
                                    var finalresult = {
                                        success2: success11,
                                        member: arr1,
                                        members_id: arr2
                                    };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.FRIEND_DETAIL,
                                        finalresult
                                    );
                                }
                            );
                        }


                    }
                }
            );
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    groupRemoveFriend: (req, res) => {
        try {
            if (!req.body.response || !req.body.groupId || !req.body.memberId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                var updateId;
                group.findOne(
                    {
                        _id: req.body.groupId,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = {
                                success2: []
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.GROUP_NOT_FOUND,
                                result
                            );
                        } else {
                            var arr2 = success1.members;


                            arr2.forEach(x => {
                                if (
                                    x.memberId == req.headers._id &&
                                    x.status == "ACTIVE" &&
                                    x.role == "GROUPADMIN"
                                ) {
                                    check = true;
                                }
                                if (x.memberId == req.body.memberId && x.status == "ACTIVE") {
                                    updateId = x._id;
                                }
                            });

                            if (!check || !updateId) {
                                if (!check) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.ONLY_ADMIN_CAN_ADD
                                    );
                                } else {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.MEMBER_NOT_FOUND
                                    );
                                }
                            } else {

                                var set = {};
                                if (req.body.response) {
                                    set["members.$.status"] = req.body.response;
                                }
                                group.findOneAndUpdate(
                                    {
                                        "members._id": updateId,
                                        status: "ACTIVE"
                                    },
                                    {
                                        $set: set
                                    },
                                    { new: true },
                                    (error2, success2) => {

                                        if (error2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!success2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.USER_FOUND
                                            );
                                        } else {
                                            var result = {
                                                success2: success2
                                            };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.REMOVE_FRIEND,
                                                result
                                            );
                                        }
                                    }
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    groupDelete: (req, res) => {
        try {
            if (!req.body.response || !req.body.groupId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                group.findOne(
                    {
                        _id: req.body.groupId,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = {
                                success2: []
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.GROUP_NOT_FOUND,
                                result
                            );
                        } else {
                            var arr2 = success1.members;


                            arr2.forEach(x => {
                                if (
                                    x.memberId == req.headers._id &&
                                    x.status == "ACTIVE" &&
                                    x.role == "GROUPADMIN"
                                ) {
                                    check = true;
                                }
                            });

                            if (!check) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.ONLY_ADMIN_CAN_DELETE
                                );
                            } else {
                                var set = {};
                                if (req.body.response) {
                                    set["members.$.status"] = req.body.response;
                                }
                                group.findOneAndUpdate(
                                    {
                                        _id: req.body.groupId,
                                        status: "ACTIVE"
                                    },
                                    {
                                        $set: { status: req.body.response }
                                    },
                                    { new: true },
                                    (error2, success2) => {

                                        if (error2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!success2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.GROUP_NOT_FOUND
                                            );
                                        } else {
                                            var result = {
                                                success2: success2
                                            };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.DELETED,
                                                result
                                            );
                                        }
                                    }
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    groupUpdate: (req, res) => {
        try {
            if (!req.body.groupId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                group.findOne(
                    {
                        _id: req.body.groupId,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = {
                                success2: []
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.GROUP_NOT_FOUND,
                                result
                            );
                        } else {
                            var arr2 = success1.members;

                            arr2.forEach(x => {
                                if (
                                    x.memberId == req.headers._id &&
                                    x.status == "ACTIVE" &&
                                    x.role == "GROUPADMIN"
                                ) {
                                    check = true;
                                }
                            });

                            if (!check) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.ONLY_ADMIN_CAN_DELETE
                                );
                            } else {
                                var set = {};
                                if (req.body.response) {
                                    set["members.$.status"] = req.body.response;
                                }
                                group.findOneAndUpdate(
                                    {
                                        _id: req.body.groupId,
                                        status: "ACTIVE"
                                    },
                                    {
                                        $set: req.body
                                    },
                                    { new: true },
                                    (error2, success2) => {

                                        if (error2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!success2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.GROUP_NOT_FOUND
                                            );
                                        } else {
                                            var result = {
                                                success2: success2
                                            };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.UPDATED,
                                                result
                                            );
                                        }
                                    }
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    groupSuggestionList: (req, res) => {
        try {

            group.find(
                { "members.memberId": req.headers._id, status: { $in: ["ACTIVE", "LEAVE"] } },
                (error2, success2) => {

                    if (error2) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!success2) {

                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.GROUP_NOT_FOUND
                        );
                    } else {


                        const arr1 = [];
                        success2.forEach(x => {

                            if (x.status == "ACTIVE") {
                                arr1.push(x._id);
                            }
                        });
                        var options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            select: "coverPic description category groupName",
                            sort: {
                                createdAt: -1
                            }
                        };
                        if (req.body.search) {

                            group.paginate(
                                {
                                    groupName: { $regex: req.body.search },
                                    _id: { $nin: arr1 },
                                    status: "ACTIVE",
                                    privacy: "PUBLIC"
                                },
                                options,
                                (errr, result1) => {
                                    if (errr) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {

                                        var result = { success2: result1 };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                                            result
                                        );
                                    }
                                }
                            );//
                        } else {
                            group.paginate(
                                {
                                    _id: { $nin: arr1 },
                                    status: "ACTIVE",
                                    privacy: "PUBLIC"
                                },
                                options,
                                (errr, result1) => {
                                    if (errr) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {

                                        var result = { success2: result1 };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                                            result
                                        );
                                    }
                                }
                            );//

                        }



                    }
                }
            );
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    recentlyVisited: (req, res) => {
        try {

            var options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 5,
                select: "coverPic description category groupName members welcomePost",
                sort: {
                    createdAt: -1
                }
            };
            if (req.body.search) {
                group.paginate(
                    { groupName: { $regex: req.body.search }, status: { $in: ["ACTIVE", "LEAVE"] } },
                    options,
                    (error2, success2) => {

                        if (error2) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success2) {

                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.GROUP_NOT_FOUND
                            );
                        } else {

                            var result = { success2: success2 };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.USER_LIST_FETCH,
                                result
                            );
                        }
                    }

                );
            } else {
                group.paginate(
                    { "members.memberId": req.body.userId, status: { $in: ["ACTIVE", "LEAVE"] } },
                    options,
                    (error2, success2) => {

                        if (error2) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success2) {

                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.GROUP_NOT_FOUND
                            );
                        } else {

                            var result = { success2: success2 };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.USER_LIST_FETCH,
                                result
                            );
                        }
                    }

                );

            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    groupByCategory: (req, res) => {
        try {
            if (!req.body.userId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result) {

                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.NOT_FOUND
                        );
                    } else {
                        var options = {
                            sort: { created_at: -1 },
                            page: req.body.pageNumber || 1,
                            select: "category.categoryName category.categoryImage",
                            limit: req.body.limit || 5
                        };
                        group.paginate({ status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                            if (err1) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            } else if (result1.length == 0) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.NOT_FOUND
                                );
                            } else {
                                var result = { success: result1 };
                                globalResponse.sendResponseWithData(
                                    res,
                                    globalStatusCode.SuccessCode.SUCCESS,
                                    globalMessege.SuccessMessage.USER_LIST_FETCH,
                                    result
                                );
                            }
                        })
                    }
                })
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    discoverGroup: (req, res) => {
        try {
            if (!req.body.userId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                if (req.body.categoryName) {
                    userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!result) {

                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.NOT_FOUND
                            );
                        } else {
                            if (req.body.search) {
                                var options = {
                                    sort: { created_at: -1 },
                                    page: req.body.pageNumber || 1,
                                    select: "groupName privacy coverPic welcomePost category.categoryName category.categoryImage",
                                    limit: req.body.limit || 5
                                };
                                group.paginate({ 'groupName': { $regex: req.body.search }, status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                                    if (err1) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {

                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {
                                        var result = { success: result1 };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                                            result
                                        );
                                    }
                                })
                            } else if (req.body.categoryName) {
                                var options = {
                                    sort: { created_at: -1 },
                                    page: req.body.pageNumber || 1,
                                    select: "groupName privacy coverPic welcomePost category.categoryName category.categoryImage",
                                    limit: req.body.limit || 5
                                };
                                group.paginate({ 'category.$.categoryName': req.body.categoryName, status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                                    if (err1) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {

                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {
                                        var result = { success: result1 };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                                            result
                                        );
                                    }
                                })
                            } else {
                                var options1 = {
                                    sort: { created_at: -1 },
                                    page: req.body.pageNumber || 1,
                                    select: "groupName privacy coverPic welcomePost category.categoryName category.categoryImage",
                                    limit: req.body.limit || 5
                                };
                                group.paginate({ 'category.$.categoryName': req.body.cateogryName, status: "ACTIVE", privacy: "PUBLIC" }, options1, (err1, result1) => {
                                    if (err1) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (result1.length == 0) {

                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                            globalMessege.ErrorMessage.NOT_FOUND
                                        );
                                    } else {
                                        var result = { success: result1 };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                                            result
                                        );
                                    }
                                })

                            }
                        }
                    })
                } else {
                    userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!result) {

                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.NOT_FOUND
                            );
                        } else {
                            var options = {
                                sort: { created_at: -1 },
                                page: req.body.pageNumber || 1,
                                select: "groupName privacy coverPic welcomePost category.categoryName category.categoryImage",
                                limit: req.body.limit || 5
                            };
                            group.paginate({ status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                                if (err1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (result1.length == 0) {

                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.NOT_FOUND
                                    );
                                } else {
                                    var result = { success: result1 };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.USER_LIST_FETCH,
                                        result
                                    );
                                }
                            })

                        }
                    })
                }
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    joinGroup: (req, res) => {
        try {
            if (!req.body.groupId || !req.body.userId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {

                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result) {

                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.NOT_FOUND
                        );
                    } else {
                        group.findOne({ _id: req.body.groupId, members: { $elemMatch: { memberId: result._id, status: "ACTIVE" } } }, (err2, result2) => {

                            if (err2) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            } else if (result2) {
                                res.send({ responseCode: 201, responseMessege: "Member already exist" })
                            } else {
                                var obj = {
                                    memberId: result._id
                                }
                                group.findOneAndUpdate({ _id: req.body.groupId, status: "ACTIVE" },
                                    { $addToSet: { members: obj } },
                                    { new: true },
                                    (err1, result1) => {

                                        if (err1) {

                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else {
                                            var result = { success: result1 };
                                            res.send({ responseCode: 200, responseMessage: "Successfully added in group", result })
                                        }
                                    })
                            }
                        })
                    }
                })
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    viewGroup: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        group.findOne({ _id: req.body.groupId, status: "ACTIVE" }, (err2, result2) => {
                            if (err2) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result2) {
                                return res.send({ responseCode: 404, responseMessage: "Group not found" })
                            }
                            else {
                                return res.send({
                                    responseCode: 200,
                                    responseMessage: "Group found successfully", result: result2
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    groupdescription: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        groupPostModel.find({ groupId: req.body.groupId, postStatus: "ACTIVE" }).populate("groupId userId", "profilePic description members coverPic groupName category firstName lastName text").exec((err2, result2) => {
                            if (err2) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (result2.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: "Group post not found" })
                            }
                            else {
                                return res.send({
                                    responseCode: 200,
                                    responseMessage: "Group description found successfully", result: result2
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    addPostGroupDescription: (req, res) => {
        try {
            if (
                !req.body.userId ||
                !req.body.groupId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            } else {
                user.findOne({ _id: req.body.userId, status: "ACTIVE" },
                    async (err, result) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error1" })
                        } else if (!result) {
                            return res.send({ responseCode: 404, responseMessage: "User not found" })
                        } else {
                            group.findOne({ _id: req.body.groupId, status: "ACTIVE" }, async (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                                } else if (!result1) {
                                    return res.send({ responseCode: 404, responseMessage: "Group not found" })
                                }
                                else {
                                    if (req.body.image) {
                                        commonFunction.multipleImageUploadCloudinary(req.body.image, (err, success) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error ", err })
                                            }
                                            else {
                                                req.body.image = success
                                                var post = {
                                                    userId: result._id,
                                                    groupId: result1._id,
                                                    image: success,
                                                    text: req.body.text,
                                                    tagFriends: req.body.friendsId
                                                }
                                                if (req.body.privacy == "FRIENDS") {
                                                    post.privacy = "FRIENDS",
                                                        post.timeLine = []
                                                    result.friendList.forEach(x => {
                                                        post.timeLine.push(x.friendId)
                                                    })
                                                }

                                                if (req.body.privacy == "SPECIFICFRIENDS") {
                                                    post.privacy = "SPECIFICFRIENDS"
                                                    post.timeLine = req.body.friendId

                                                }
                                                if (req.body.privacy == "ONLYME") {
                                                    post.privacy = "ONLYME"
                                                }
                                                groupPostModel.create(post, (error, success1) => {

                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error1 " })
                                                    } else if (!success1) {
                                                        return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                                    } else {

                                                        return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                    else if (req.body.video) {
                                        commonFunction.multipleImageUploadCloudinary(req.body.video, (err, success) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error " })
                                            }
                                            else {
                                                req.body.video = success
                                                var post = {
                                                    userId: result._id,
                                                    groupId: result1._id,
                                                    video: success,
                                                    text: req.body.text,
                                                    tagFriends: req.body.friendsId
                                                }
                                                if (req.body.privacy == "FRIENDS") {
                                                    post.privacy = "FRIENDS",
                                                        post.timeLine = []
                                                    result.friendList.forEach(x => {
                                                        post.timeLine.push(x.friendId)
                                                    })
                                                }
                                                if (req.body.privacy == "FRIENDSEXCEPT") {
                                                    post.privacy = "FRIENDSEXCEPT"
                                                    post.timeLine = req.body.friendId;
                                                }
                                                if (req.body.privacy == "SPECIFICFRIENDS") {
                                                    post.privacy = "SPECIFICFRIENDS"
                                                    post.timeLine = req.body.friendId

                                                }
                                                if (req.body.privacy == "ONLYME") {
                                                    post.privacy = "ONLYME"
                                                }
                                                groupPostModel.create(post, (error, success1) => {
                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error1" })
                                                    } else if (!success1) {
                                                        return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                                    } else {

                                                        return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                    else if (req.body.GIF) {
                                        var post = {
                                            userId: result._id,
                                            groupId: result1._id,
                                            GIF: success,
                                            text: req.body.text,
                                            tagFriends: req.body.friendsId
                                        }
                                        if (req.body.privacy == "FRIENDS") {
                                            post.privacy = "FRIENDS",
                                                post.timeLine = []
                                            result.friendList.forEach(x => {
                                                post.timeLine.push(x.friendId)
                                            })
                                        }
                                        if (req.body.privacy == "FRIENDSEXCEPT") {
                                            post.privacy = "FRIENDSEXCEPT"
                                            post.timeLine = req.body.friendId;
                                        }
                                        if (req.body.privacy == "SPECIFICFRIENDS") {
                                            post.privacy = "SPECIFICFRIENDS"
                                            post.timeLine = req.body.friendId

                                        }
                                        if (req.body.privacy == "ONLYME") {
                                            post.privacy = "ONLYME"
                                        }
                                        new groupPostModel(post).save((error, success1) => {
                                            if (error) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            } else if (!success1) {
                                                return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                            } else {

                                                return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                            }
                                        })


                                    }
                                    else if (req.body.text) {
                                        var post = {
                                            userId: result._id,
                                            groupId: result1._id,

                                            text: req.body.text,
                                            tagFriends: req.body.friendsId
                                        }
                                        if (req.body.privacy == "FRIENDS") {
                                            post.privacy = "FRIENDS",
                                                post.timeLine = []
                                            result.friendList.forEach(x => {
                                                post.timeLine.push(x.friendId)
                                            })
                                        }
                                        if (req.body.privacy == "FRIENDSEXCEPT") {
                                            post.privacy = "FRIENDSEXCEPT"
                                            post.timeLine = req.body.friendId;
                                        }
                                        if (req.body.privacy == "SPECIFICFRIENDS") {
                                            post.privacy = "SPECIFICFRIENDS"
                                            post.timeLine = req.body.friendId

                                        }
                                        if (req.body.privacy == "ONLYME") {
                                            post.privacy = "ONLYME"
                                        }
                                        groupPostModel.create(post, (error, success1) => {
                                            if (error) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            } else if (!success1) {
                                                return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                            } else {

                                                return res.send({ responseCode: 200, responseMessage: "post created", success1 })
                                            }
                                        })
                                    }
                                    else if (req.body.location) {
                                        commonFunction.getLatLong(req.body.location, (error, location) => {
                                            if (error) {
                                                console.log(" 121 Internal server error")
                                            } else if (!location) {
                                                console.log("Unable to find", location)
                                            } else {
                                                var result1 = { latitude: location[0].latitude, longitude: location[0].longitude }
                                                console.log("pppppppppppppppppp", result1)
                                                var post = {
                                                    userId: result._id,
                                                    groupId: result1._id,

                                                    location: req.body.location,
                                                    latitude: location[0].latitude,
                                                    longitude: location[0].longitude,
                                                    text: req.body.text,
                                                    tagFriends: req.body.tagFriends
                                                }
                                                if (req.body.privacy == "FRIENDS") {
                                                    post.privacy = "FRIENDS",
                                                        post.timeLine = []
                                                    result.friendList.forEach(x => {
                                                        post.timeLine.push(x.friendId)
                                                    })
                                                }
                                                if (req.body.privacy == "FRIENDSEXCEPT") {
                                                    post.privacy = "FRIENDSEXCEPT"
                                                    post.timeLine = req.body.friendId;
                                                }
                                                if (req.body.privacy == "SPECIFICFRIENDS") {
                                                    post.privacy = "SPECIFICFRIENDS"
                                                    post.timeLine = req.body.friendId

                                                }
                                                if (req.body.privacy == "ONLYME") {
                                                    post.privacy = "ONLYME"
                                                }
                                                groupPostModel.create(post, (error, success1) => {
                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!success1) {
                                                        return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                                    } else {
                                                        console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                        return res.send({ responseCode: 200, responseMessage: "post created", success1 })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                    else {

                                        var post = {
                                            userId: result._id,
                                            groupId: result1._id,
                                            sticker: req.body.sticker,
                                            text: req.body.text,
                                            tagFriends: req.body.friendsId
                                        }
                                        if (req.body.privacy == "FRIENDS") {
                                            post.privacy = "FRIENDS",
                                                post.timeLine = []
                                            result.friendList.forEach(x => {
                                                post.timeLine.push(x.friendId)
                                            })
                                        }
                                        if (req.body.privacy == "FRIENDSEXCEPT") {
                                            post.privacy = "FRIENDSEXCEPT"
                                            post.timeLine = req.body.friendId;
                                        }
                                        if (req.body.privacy == "SPECIFICFRIENDS") {
                                            post.privacy = "SPECIFICFRIENDS"
                                            post.timeLine = req.body.friendId

                                        }
                                        if (req.body.privacy == "ONLYME") {
                                            post.privacy = "ONLYME"
                                        }
                                        groupPostModel.create(post, (error, success1) => {
                                            if (error) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            } else if (!success1) {
                                                return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                            } else {

                                                return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                            }
                                        })
                                    }
                                }
                            })
                        }
                    })
            }
        }
        catch (error) {
            return res.send({ responseCode: 404, responseMessage: "Error in catch !" })
        }
    },

    replyCommentInGroup: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    groupPostModel.findOne({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        console.log(">>>>>>>5091", err, postResult);
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            console.log(">>>>>5100", deviceToken)

                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in group"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        groupPostModel.findOneAndUpdate({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" },
                                            { $push: { replyComments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)

                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment.`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in group"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                groupPostModel.findOneAndUpdate({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" },
                                                    { $push: { replyComments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }
                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    hideAndDeleteGroupPost: (req, res) => {
        try {
            if (!req.body.userId && !req.body.postId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.type == "HIDE") {
                            groupPostModel.findOneAndUpdate({ _id: req.body.postId, userId: result._id, postStatus: "ACTIVE" },
                                {
                                    $set: { postStatus: "HIDE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Post hide successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "DELETE") {
                            groupPostModel.findOneAndUpdate({ _id: req.body.postId, userId: result._id, postStatus: "ACTIVE" },
                                {
                                    $set: { postStatus: "DELETE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Post deleted successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "ARCHIVE") {
                            groupPostModel.findOneAndUpdate({ _id: req.body.postId, userId: result._id, postStatus: "ACTIVE" },
                                {
                                    $set: { postStatus: "ARCHIVE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Post archive successfully", result: result1 })
                                    }
                                })
                        }

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    shareGroupPost: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                console.log("5702=======>", listData)
                if (err) {
                    res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                }
                else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    groupPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err, postData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                        }
                        else if (!postData) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            group.findOne({ _id: postData.groupId, status: "ACTIVE", members: { $elemMatch: { memberId: req.body.memberId, status: "ACTIVE" } } }, (err, classData) => {
                                if (err) {
                                    res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                                } else if (!classData) {
                                    return res.send({ responseCode: 404, responseMessage: "class not found" })
                                } else {
                                    var object = [{
                                        memberId: req.body.memberId,
                                        sharedTo: []
                                    }]
                                    var arr = req.body.sharedTo;
                                    arr.forEach(a => {
                                        object[0].sharedTo.push({ friendId: a })
                                    })
                                    console.log("My object to be saved is.....", object);
                                    listData.friendList.forEach((item, index) => {
                                        if (item.friendId != null && item.friendId.fcmToken == null) {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Post",
                                                body: `${listData.firstName} shared a post with you`,
                                                senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                notificationType: "Post shared in group"
                                            };
                                            new webNotification(obj).save((saveErr, saveResult) => {
                                                console.log("5742====>", saveErr, saveResult)
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "Post successfully shared66", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else if (item.friendId != null && item.friendId.fcmToken != null) {
                                            commonFunction.pushNotification(item.friendId.fcmToken, "Shared Post", `${listData.firstName} shared a post with you`, (err, notificationResult) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                }
                                                else {
                                                    var obj = {
                                                        userId: item.friendId,
                                                        senderId: req.body.memberId,
                                                        title: "Shared Post",
                                                        body: `${listData.firstName} shared a post with you`,
                                                        senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                        notificationType: "Post shared in group"
                                                    };
                                                    new notificationModel(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                        }
                                                        else {
                                                            groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                                if (err) {
                                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                                }
                                                                else if (!updateData) {
                                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                                }
                                                                else {
                                                                    console.log({ responseCode: 200, responseMessage: "Post successfully ", updateData })
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else {
                                            console.log({ responseCode: 404, responseMessage: "Data not found" });
                                        }
                                    })
                                    return res.send({ responseCode: 200, responseMessage: "Post successfully " })
                                }
                            })
                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },


    tagFriendsGroupPost: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            } else {
                user.findOne({ _id: req.body.userId, status: "ACTIVE" },
                    (err, result) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Intrnal server error111111" })
                        } else if (!result) {
                            return res.send({ responseCode: 404, responseMessage: "User not found" })
                        } else {
                            group.findOne({ _id: req.body.groupId, status: "ACTIVE" },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error222222222" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 500, responseMessage: "Group not found" })
                                    }
                                    else {
                                        group.findOne({ members: { $elemMatch: { memberId: req.body.memberId, status: "ACTIVE" } } }).populate({ path: 'members.memberId', match: { _id: { $in: req.body.memberId } }, select: 'fcmToken firstName' }).exec((err2, result2) => {
                                            if (err2) {
                                                return res.send({ responseCode: 500, responseMessage: "Intrnal server error3333" })
                                            } else if (!result2) {
                                                return res.send({ responseCode: 404, responseMessage: "Friend not found", result2 })
                                            } else {
                                                result2.members.forEach((item, index) => {
                                                    if (item.memberId != null && item.memberId.fcmToken == null) {
                                                        var obj = {
                                                            userId: item.memberId,
                                                            senderId: req.body.userId,
                                                            title: "Tag Friend",
                                                            body: `${result.firstName} tagged you in the post`,
                                                            senderIdMessage: `${result.firstName} tagged ${item.memberId.firstName}`,
                                                            notificationType: "Tag friend"
                                                        };
                                                        new webNotification(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                            }
                                                            else {
                                                                groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                                    { $addToSet: { tagFriends: req.body.memberId } },
                                                                    { new: true },
                                                                    (err3, result3) => {
                                                                        if (err3) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                                        } else {
                                                                            return res.send({ responseCode: 200, responseMessage: "Friend tagged successfully", result3 })
                                                                        }
                                                                    })
                                                            }
                                                        })
                                                    }
                                                    else if (item.memberId != null && item.memberId.fcmToken != null) {
                                                        commonFunction.pushNotification(item.memberId.fcmToken, "Tag Friend", `${result.firstName} tagged you in the post`, (err, notificationResult) => {
                                                            if (err) {
                                                                console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                            }
                                                            else {
                                                                var obj = {
                                                                    userId: item.memberId,
                                                                    senderId: req.body.userId,
                                                                    title: "Tag Friend",
                                                                    body: `${result.firstName} tagged you in the post`,
                                                                    senderIdMessage: `${result.firstName} tagged ${item.memberId.firstName}`,
                                                                    notificationType: "Tag friend"
                                                                };
                                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                                    if (saveErr) {
                                                                        console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                                    }
                                                                    else {
                                                                        groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                                            { $addToSet: { tagFriends: req.body.memberId } },
                                                                            { new: true },
                                                                            (err3, result3) => {
                                                                                if (err3) {
                                                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                                                } else {
                                                                                    console.log({ responseCode: 200, responseMessage: "Friend tagged successfully", result3 })
                                                                                }
                                                                            })
                                                                    }
                                                                })
                                                            }
                                                        })
                                                    }
                                                    else {
                                                        console.log({ responseCode: 404, responseMessage: "Data not found" });
                                                    }
                                                })
                                                return res.send({ responseCode: 200, responseMessage: "Friend tagged successfully" })
                                            }
                                        })
                                    }
                                })
                        }
                    })
            }
        }
        catch (error) {
            return res.send({ responseCode: 404, responseMessage: "Error in catch !" })
        }
    }, groupLikeAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                var likes;
                console.log("USER ID>>>>>>>>", req.body.userId)
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    console.log("}}}}}}}}}}}}", result)
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        groupPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }).populate('userId').exec((err, postResult) => {
                            if (err) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!postResult) {
                                return res.send({ responseCode: 404, responseMessage: "User not found" })
                            }
                            else {

                                if (req.body.like == "true") {
                                    groupPostModel.findOne({
                                        _id: req.body.postId,
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        console.log(">>>>>>>>>>>22>>>>>>>>>>>>", err3, result3)
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                        } else {
                                            var like = {
                                                likedId: result._id,
                                                likedTime: new Date(),
                                                userName: `${result.firstName} ${result.lastName}`,
                                            };

                                            if (postResult.userId.fcmToken == null) {
                                                var obj = {
                                                    userId: postResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Post Liked",
                                                    body: `${result.firstName} liked your post`,
                                                    senderIdMessage: `${result.firstName} liked on ${postResult.userId.firstName}'s post`,
                                                    notificationType: "Post liked in group"
                                                };
                                                new webNotification(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ respononseCode: 500, responseMessage: "Internal server error" });
                                                    }
                                                    else {
                                                        groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                            { $addToSet: { likes: like } },
                                                            { new: true },
                                                            (err1, result1) => {
                                                                console.log(">>>>>>>>>>>>>>>44>>>>>>>>>14344>>>>441", err1, result1)
                                                                if (err1) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    const count = result1.likes;

                                                                    return res.send({ responseCode: 200, responseMessage: "Post liked successfully", likes: count })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                            else {
                                                commonFunction.pushNotification(postResult.userId.fcmToken, "Post Liked", `${result.firstName} liked your post`, (err, notificationResult) => {
                                                    if (err) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        var obj = {
                                                            userId: postResult.userId,
                                                            senderId: req.body.userId,
                                                            title: "Post Liked",
                                                            body: `${result.firstName} liked your post`,
                                                            senderIdMessage: `${result.firstName} liked on ${postResult.userId.firstName}'s post`,
                                                            notificationType: "Post liked in group"
                                                        };
                                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ respononseCode: 500, responseMessage: "Internal server error" });
                                                            }
                                                            else {
                                                                groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                                    { $addToSet: { likes: like } },
                                                                    { new: true },
                                                                    (err1, result1) => {
                                                                        console.log(">>>>>>>>>>>>>>>44>>>>>>>>>14344>>>>441", err1, result1)
                                                                        if (err1) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                        } else {
                                                                            const count = result1.likes;

                                                                            return res.send({ responseCode: 200, responseMessage: "Post liked successfully", likes: count })
                                                                        }
                                                                    }
                                                                )
                                                            }
                                                        })
                                                    }
                                                })
                                            }

                                        }
                                    })
                                } else if (req.body.comments == "true") {
                                    var comment = [{
                                        commentedUser: result._id,
                                        comment: req.body.comment,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        userPic: result.profilePic,
                                        commentedTime: new Date()
                                    }];
                                    if (postResult.userId.fcmToken == null) {
                                        var obj = {
                                            userId: postResult.userId,
                                            senderId: req.body.userId,
                                            title: "Post Commented",
                                            senderIdMessage: `${result.firstName} commented on ${postResult.userId.firstName}'s post`,
                                            body: `${result.firstName} commented on your post`,
                                            notificationType: "Post commented in group"
                                        };
                                        new webNotification(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                    { $push: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {

                                                        if (err2) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                    else {
                                        commonFunction.pushNotification(postResult.userId.fcmToken, "Post Commented", `${result.firstName} commented on your post`, (err, notificationResult) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                var obj = {
                                                    userId: postResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Post Commented",
                                                    body: `${result.firstName} commented on your post`,
                                                    senderIdMessage: `${result.firstName} commented on ${postResult.userId.firstName}'s post`,
                                                    notificationType: "Post commented in group"
                                                };
                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        groupPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                            { $push: { comments: comment } },
                                                            { new: true },
                                                            (err2, result2) => {

                                                                if (err2) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                        })
                                    }

                                } else if (req.body.like == "false") {
                                    groupPostModel.findOne({
                                        _id: req.body.postId,
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {

                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));

                                            groupPostModel.findByIdAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $pull: { likes: dislike[0] } }, { new: true }, (err4, result4) => {
                                                if (err4) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                } else if (!result4) {
                                                    return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                }
                                            })
                                        }
                                    })
                                } else if (req.body.comments == "false") {
                                    groupPostModel.findOne({
                                        _id: req.body.postId,
                                        comments: { $elemMatch: { _id: req.body.commentId } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const deleteComment = _.filter(result3.comments, _.matches({
                                                _id: mongoose.Tyypes.ObjectId(req.body.commentId)

                                            }));

                                            groupPostModel.findByIdAndUpdate({ _id: req.body.postId }, { $pull: { comments: deleteComment[0] } }, { new: true }, (err4, result4) => {
                                                if (err4) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                } else if (!result4) {
                                                    return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment deleted successfully", result: result4 })
                                                }
                                            })
                                        }
                                    })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {

            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    editGroupPostLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        groupPostModel.findOne({ _id: req.body.postId, postStatus: { $ne: "DELETE" } }, (err1, result1) => {
                            if (err1) {

                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })

                            }
                            else {

                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                groupPostModel.findOneAndUpdate({ 'comments._id': req.body.commentId, postStatus: "ACTIVE" }, { $set: { "comments.$": newComment } },
                                    { new: true }, (err2, result2) => {
                                        if (err2) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                                        }
                                        else if (!result2) {

                                            return res.send({ responseCode: 404, responseMessage: "Post not found" })

                                        }
                                        else {
                                            return res.send({ responseCode: 200, responseMessage: "Comment edited successfully", result2 })
                                        }
                                    })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewPostLikesAndCommentInGroup: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        groupPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })
                            } else {
                                if (req.body.show == "comments") {
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;

                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //------------------------------------------class section---------------------------------------------------------------
    //class creation
    createClass: (req, res) => {
        try {


            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err2, result2) => {

                if (err2) {
                    globalResponse.commonResponse(
                        res,
                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                        globalMessege.ErrorMessage.INTERNAL_ERROR
                    );
                } else if (!result2) {
                    res.send({ responseCode: 404, responseMessege: "User not found" })
                } else {
                    if (req.body.image) {
                        commonFunction.imageUploadCloudinary(req.body.image, (imgError, imgResult) => {
                            if (imgError) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            }
                            else {
                                req.body.coverPic = imgResult
                                let admin = {
                                    memberId: req.body.userId,
                                    role: "CLASSADMIN"
                                };
                                req.body.userId = result2._id;
                                req.body.members.push(admin);

                                var obj = new classRoom(req.body);
                                obj.userName = result2.firstName + " " + result2.lastName

                                obj.save((err1, success) => {
                                    if (err1) {

                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else {

                                        var result = { success2: success };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.CLASS_CREATED,
                                            result
                                        );
                                    }
                                });
                            }


                        })
                    }
                    else {
                        let admin = {
                            memberId: req.body.userId,
                            role: "CLASSADMIN"
                        };
                        req.body.userId = result2._id;
                        req.body.members.push(admin);

                        var obj = new classRoom(req.body);
                        obj.userName = result2.firstName + " " + result2.lastName

                        obj.save((err1, success) => {
                            if (err1) {

                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            } else {

                                var result = { success2: success };
                                globalResponse.sendResponseWithData(
                                    res,
                                    globalStatusCode.SuccessCode.SUCCESS,
                                    globalMessege.SuccessMessage.CLASS_CREATED,
                                    result
                                );
                            }
                        });


                    }
                }
            })

        } catch (error) {

            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },

    classAddFriend: (req, res) => {
        try {
            if (!req.body.members || !req.body.classId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                var arr = req.body.members;
                var arr1 = [];
                console.log("3288>>>>>>>>>>>>>", arr);
                arr.forEach(x => {
                    arr1.push(x.memberId);
                });

                user.findOne(
                    {
                        _id: arr1,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.USER_FOUND
                            );
                        } else {
                            classRoom.findOne(
                                {
                                    _id: req.body.classId,
                                    status: "ACTIVE"
                                },
                                (error2, success2) => {

                                    if (error2) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success2) {
                                        var result = {
                                            success2: []
                                        };
                                        globalResponse.sendResponseWithData(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.SuccessMessage.CLASS_NOT_FOUND,
                                            result
                                        );
                                    } else {
                                        var arr2 = success2.members;


                                        arr2.forEach(x => {
                                            if (
                                                x.memberId == req.headers._id &&
                                                x.status == "ACTIVE" &&
                                                x.role == "CLASSADMIN"
                                            ) {
                                                check = true;
                                            }
                                        });


                                        if (!check) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.ONLY_ADMIN_CAN_ADD
                                            );
                                        } else {
                                            classRoom.findOneAndUpdate(
                                                {
                                                    _id: req.body.classId,
                                                    status: "ACTIVE"
                                                },
                                                {
                                                    $push: {
                                                        members: req.body.members
                                                    }
                                                },
                                                { new: true },
                                                (error3, success3) => {

                                                    if (error3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                                        );
                                                    } else if (!success3) {
                                                        globalResponse.commonResponse(
                                                            res,
                                                            globalStatusCode.ErrorCode.NOT_FOUND,
                                                            globalMessege.ErrorMessage.CLASS_NOT_FOUND
                                                        );
                                                    } else {
                                                        var result = {
                                                            success2: success3
                                                        };
                                                        globalResponse.sendResponseWithData(
                                                            res,
                                                            globalStatusCode.SuccessCode.SUCCESS,
                                                            globalMessege.SuccessMessage.FRIEND_ADDED,
                                                            result
                                                        );
                                                    }
                                                }
                                            );
                                        }
                                    }
                                }
                            );
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    classFriendList: (req, res) => {
        try {
            var check = false;
            classRoom.findOne(
                {
                    _id: req.body.classId,
                    status: "ACTIVE"
                },
                (err, success1) => {

                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!success1) {
                        var result = { success2: { docs: [] } };
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.SUCCESS,
                            globalMessege.ErrorMessage.CLASS_NOT_FOUND,
                            result
                        );
                    } else {
                        var arr = success1.members;
                        var arr1 = [];
                        var arr2 = [];

                        arr.forEach(x => {
                            console.log("3290>>>>>>>>>>>", x);
                            if (x.status == "ACTIVE") {
                                if (x.memberId == req.headers._id) {
                                    check = true;
                                } else {
                                    arr1.push(x.memberId);
                                    arr2.push(x._id);
                                }
                            }
                        });

                        if (!check) {
                            var result = { friendList: "[]" };
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.ErrorMessage.NO_PERMISSION_TO_GET_INFO,
                                result
                            );
                        } else {
                            var options = {
                                sort: { created_at: -1 },

                                page: req.body.pageNumber || 1,
                                select: "profilePic _id firstName email",
                                limit: 5
                            };

                            user.paginate(
                                {
                                    _id: arr1
                                },
                                options,
                                (err1, success11) => {
                                    if (err1) {
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                            globalMessege.ErrorMessage.INTERNAL_ERROR
                                        );
                                    } else if (!success11) {
                                        var result = { friendList: "[]" };
                                        globalResponse.commonResponse(
                                            res,
                                            globalStatusCode.SuccessCode.SUCCESS,
                                            globalMessege.ErrorMessage.USER_FOUND,
                                            result
                                        );
                                    }
                                    var result = {
                                        success2: success11,
                                        member: arr1,
                                        members_id: arr2
                                    };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.FRIEND_DETAIL,
                                        result
                                    );
                                }
                            );
                        }
                    }
                }
            );
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    classRemoveFriend: (req, res) => {
        try {
            if (!req.body.response || !req.body.classId || !req.body.memberId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                var updateId;
                classRoom.findOne(
                    {
                        _id: req.body.classId,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = {
                                success2: []
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.CLASS_NOT_FOUND,
                                result
                            );
                        } else {
                            var arr2 = success1.members;
                            arr2.forEach(x => {
                                if (
                                    x.memberId == req.headers._id &&
                                    x.status == "ACTIVE" &&
                                    x.role == "CLASSADMIN"
                                ) {
                                    check = true;
                                }
                                if (x.memberId == req.body.memberId && x.status == "ACTIVE") {
                                    updateId = x._id;
                                }
                            });
                            if (!check || !updateId) {
                                if (!check) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.ONLY_ADMIN_CAN_ADD
                                    );
                                } else {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.MEMBER_NOT_FOUND
                                    );
                                }
                            } else {
                                var set = {};
                                if (req.body.response) {
                                    set["members.$.status"] = req.body.response;
                                }
                                classRoom.findOneAndUpdate(
                                    {
                                        "members._id": updateId,
                                        status: "ACTIVE"
                                    },
                                    {
                                        $set: set
                                    },
                                    { new: true },
                                    (error2, success2) => {

                                        if (error2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!success2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.USER_FOUND
                                            );
                                        } else {
                                            var result = {
                                                success2: success2
                                            };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.REMOVE_FRIEND,
                                                result
                                            );
                                        }
                                    }
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    classDelete: (req, res) => {
        try {
            if (!req.body.response || !req.body.classId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                classRoom.findOne(
                    {
                        _id: req.body.classId,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {
                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = {
                                success2: []
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.CLASS_NOT_FOUND,
                                result
                            );
                        } else {
                            var arr2 = success1.members;
                            arr2.forEach(x => {
                                if (
                                    x.memberId == req.headers._id &&
                                    x.status == "ACTIVE" &&
                                    x.role == "CLASSADMIN"
                                ) {
                                    check = true;
                                }
                            });
                            if (!check) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.ONLY_ADMIN_CAN_DELETE
                                );
                            } else {
                                var set = {};
                                if (req.body.response) {
                                    set["members.$.status"] = req.body.response;
                                }
                                classRoom.findOneAndUpdate(
                                    {
                                        _id: req.body.classId,
                                        status: "ACTIVE"
                                    },
                                    {
                                        $set: { status: req.body.response }
                                    },
                                    { new: true },
                                    (error2, success2) => {

                                        if (error2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!success2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.CLASS_NOT_FOUND
                                            );
                                        } else {
                                            var result = {
                                                success2: success2
                                            };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.DELETED,
                                                result
                                            );
                                        }
                                    }
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    classUpdate: (req, res) => {
        try {
            if (!req.body.classId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                var check = false;
                classRoom.findOne(
                    {
                        _id: req.body.classId,
                        status: "ACTIVE"
                    },
                    (error1, success1) => {

                        if (error1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!success1) {
                            var result = {
                                success2: []
                            };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.CLASS_NOT_FOUND,
                                result
                            );
                        } else {
                            var arr2 = success1.members;
                            arr2.forEach(x => {
                                if (
                                    x.memberId == req.headers._id &&
                                    x.status == "ACTIVE" &&
                                    x.role == "CLASSADMIN"
                                ) {
                                    check = true;
                                }
                            });
                            if (!check) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.ONLY_ADMIN_CAN_UPDATE
                                );
                            } else {
                                var set = {};
                                if (req.body.response) {
                                    set["members.$.status"] = req.body.response;
                                }
                                classRoom.findOneAndUpdate(
                                    {
                                        _id: req.body.classId,
                                        status: "ACTIVE"
                                    },
                                    {
                                        $set: req.body
                                    },
                                    { new: true },
                                    (error2, success2) => {
                                        if (error2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else if (!success2) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.NOT_FOUND,
                                                globalMessege.ErrorMessage.CLASS_NOT_FOUND
                                            );
                                        } else {
                                            var result = {
                                                success2: success2
                                            };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.UPDATED,
                                                result
                                            );
                                        }
                                    }
                                );
                            }
                        }
                    }
                );
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    classSuggestionList: (req, res) => {
        try {

            classRoom.find(
                { "members.memberId": req.headers._id, status: { $in: ["ACTIVE", "LEAVE"] } },
                (error2, success2) => {
                    if (error2) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!success2) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.CLASS_NOT_FOUND
                        );
                    } else {
                        const arr1 = [];
                        success2.forEach(x => {
                            console.log("3290>>>>>>>>>>>", x);
                            if (x.status == "ACTIVE") {
                                arr1.push(x._id);
                            }
                        });

                        var options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            select: "coverPic description category classRoomName",
                            sort: {
                                createdAt: -1
                            }
                        };
                        classRoom.paginate(
                            {
                                _id: { $nin: arr1 },
                                status: "ACTIVE",
                                privacy: "PUBLIC"
                            },
                            options,
                            (errr, result1) => {
                                if (errr) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (result1.length == 0) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.NOT_FOUND
                                    );
                                } else {
                                    var result = { success2: result1 };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.USER_LIST_FETCH,
                                        result
                                    );
                                }
                            }
                        );
                    }
                }
            );
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    discoverClass: (req, res) => {
        try {
            if (!req.body.userId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                if (req.body.categoryName) {
                    userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!result) {

                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.NOT_FOUND
                            );
                        } else {
                            var options = {
                                sort: { created_at: -1 },
                                page: req.body.pageNumber || 1,
                                select: "classRoomName privacy coverPic welcomePost category.categoryName category.categoryImage",
                                limit: req.body.limit || 5
                            };
                            classRoom.paginate({ 'category.$.categoryName': req.body.cateogryName, status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                                if (err1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (result1.length == 0) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.NOT_FOUND
                                    );
                                } else {
                                    var result = { success: result1 };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.USER_LIST_FETCH,
                                        result
                                    );
                                }
                            })
                        }
                    })
                } else if (req.body.search) {
                    var options = {
                        sort: { created_at: -1 },
                        page: req.body.pageNumber || 1,
                        select: "classRoomName privacy coverPic welcomePost category.categoryName category.categoryImage",
                        limit: req.body.limit || 5
                    };
                    classRoom.paginate({ 'classRoomName': { $regex: req.body.search }, status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                        if (err1) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (result1.length == 0) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.NOT_FOUND
                            );
                        } else {
                            var result = { success: result1 };
                            globalResponse.sendResponseWithData(
                                res,
                                globalStatusCode.SuccessCode.SUCCESS,
                                globalMessege.SuccessMessage.USER_LIST_FETCH,
                                result
                            );
                        }
                    })
                } else {
                    userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                        if (err) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                globalMessege.ErrorMessage.INTERNAL_ERROR
                            );
                        } else if (!result) {
                            globalResponse.commonResponse(
                                res,
                                globalStatusCode.ErrorCode.NOT_FOUND,
                                globalMessege.ErrorMessage.NOT_FOUND
                            );
                        } else {
                            var options = {
                                sort: { created_at: -1 },
                                page: req.body.pageNumber || 1,
                                select: "classRoomName privacy coverPic welcomePost category.categoryName category.categoryImage",
                                limit: req.body.limit || 5
                            };
                            classRoom.paginate({ status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                                if (err1) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                        globalMessege.ErrorMessage.INTERNAL_ERROR
                                    );
                                } else if (result1.length == 0) {
                                    globalResponse.commonResponse(
                                        res,
                                        globalStatusCode.ErrorCode.NOT_FOUND,
                                        globalMessege.ErrorMessage.NOT_FOUND
                                    );
                                } else {
                                    var result = { success: result1 };
                                    globalResponse.sendResponseWithData(
                                        res,
                                        globalStatusCode.SuccessCode.SUCCESS,
                                        globalMessege.SuccessMessage.USER_LIST_FETCH,
                                        result
                                    );
                                }
                            })

                        }
                    })
                }
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    recentlyVisitedClass: (req, res) => {
        try {
            var options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 5,
                select: "coverPic description category classRoomName members welcomePost",
                sort: {
                    createdAt: -1
                }
            };
            classRoom.paginate(
                { "members.memberId": req.body.userId, status: { $in: ["ACTIVE", "LEAVE"] } },
                options,
                (error2, success2) => {
                    if (error2) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!success2) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.GROUP_NOT_FOUND
                        );
                    } else {

                        var result = { success2: success2 };
                        globalResponse.sendResponseWithData(
                            res,
                            globalStatusCode.SuccessCode.SUCCESS,
                            globalMessege.SuccessMessage.USER_LIST_FETCH,
                            result
                        );
                    }
                }
            );
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    classByCategory: (req, res) => {
        try {
            if (!req.body.userId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.NOT_FOUND
                        );
                    } else {
                        var options = {
                            sort: { created_at: -1 },
                            page: req.body.pageNumber || 1,
                            select: "category.categoryName category.categoryImage",
                            limit: req.body.limit || 5
                        };
                        classRoom.paginate({ status: "ACTIVE", privacy: "PUBLIC" }, options, (err1, result1) => {
                            if (err1) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            } else if (result1.length == 0) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.NOT_FOUND,
                                    globalMessege.ErrorMessage.NOT_FOUND
                                );
                            } else {
                                var result = { success: result1 };
                                globalResponse.sendResponseWithData(
                                    res,
                                    globalStatusCode.SuccessCode.SUCCESS,
                                    globalMessege.SuccessMessage.USER_LIST_FETCH,
                                    result
                                );
                            }
                        })
                    }
                })
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    joinClass: (req, res) => {
        try {
            if (!req.body.classId || !req.body.userId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.NOT_FOUND
                        );
                    } else {
                        classRoom.findOne({ _id: req.body.classId, members: { $elemMatch: { memberId: result._id, status: "ACTIVE" } } }, (err2, result2) => {
                            if (err2) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            } else if (result2) {
                                res.send({ responseCode: 201, responseMessege: "Member already exist" })
                            } else {
                                var obj = {
                                    memberId: result._id
                                }
                                classRoom.findOneAndUpdate({ _id: req.body.classId, status: "ACTIVE" },
                                    { $addToSet: { members: obj } },
                                    { new: true },
                                    (err1, result1) => {
                                        if (err1) {
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else {
                                            var result = { success: result1 };
                                            res.send({ responseCode: 200, responseMessage: "Successfully added in class", result })
                                        }
                                    })
                            }
                        })
                    }
                })
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    //------------------------------------Stripe add cards-------------------------------------------------------

    addCard: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessege: "Internall server error" })
                } else if (!result) {
                    res.send({ responseCode: 201, responseMessege: "User not found1" })
                } else {

                    var flag = 0
                    result.cardDetails.forEach(a => a.cardNumber == req.body.cardNumber ? flag = 1 : 0);
                    if (flag == 0) {
                        var r_pass = crypto.randomBytes(128);

                        var r_pass_base64 = r_pass.toString("base64");
                        var CryptoJS = node_cryptojs.CryptoJS;

                        var JsonFormatter = node_cryptojs.JsonFormatter;

                        var message = req.body.cvvNumber;
                        var encrypted = CryptoJS.AES.encrypt(message, req.body.userId, { format: JsonFormatter });
                        var encrypted_json_str = encrypted.toString();

                        let card = {
                            firstName: req.body.firstName,
                            lastName: req.body.lastName,
                            email: req.body.email,
                            phoneNumber: req.body.phoneNumber,
                            countryCode: req.body.countryCode,

                            bankName: req.body.bankName,
                            cardNumber: req.body.cardNumber,
                            expiryDate: req.body.expiryDate,
                            cvvNumber: encrypted_json_str,
                            country: req.body.country,
                            address: req.body.address,
                            city: req.body.city,
                            state: req.body.state,
                            zipCode: req.body.zipCode,
                            stripeAccountId: " "
                        }
                        stripe.accounts.create({
                            type: 'custom',
                            email: result.email,
                            requested_capabilities: ['card_payments', 'transfers'],
                        }, (err, stripResult) => {
                            if (err) {
                                res.send({ responseCode: 500, responseMessage: "Internal server error", err })
                            }
                            else {
                                card.stripAccountId = stripResult.id
                                userModel.findOneAndUpdate({ _id: result._id }, { $push: { cardDetails: card } }, { new: true }, (err1, result1) => {
                                    if (err1) {
                                        res.send({ responseCode: 500, responseMessege: "Internall server error" })
                                    } else {
                                        res.send({ responseCode: 200, responseMessege: "Card created successfully", result1 })
                                    }
                                })

                            }
                        })
                    } else {
                        res.send({ respononseCode: 404, responseMessage: "Card already exist" })
                    }
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "somthing went wrong" })
        }
    },
    editCard: (req, res) => {
        userModel.findOne({ _id: req.body.userId, cardDetails: { $elemMatch: { _id: req.body.cardId } } }, (err2, result2) => {
            if (err2) {
                return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
            } else if (!result2) {
                return res.send({ responseCode: 404, responseMessage: "card  not found" })
            } else {
                const arr = _.filter(result2.cardDetails, _.matches({ '_id': mongoose.Types.ObjectId(req.body.cardId) }));
                const cardDetails = {}
                cardDetails["_id"] = arr[0]._id;
                { { req.body.firstName ? cardDetails["firstName"] = req.body.firstName : cardDetails["firstName"] = arr[0].firstName } }
                { { req.body.lastName ? cardDetails["lastName"] = req.body.lastName : cardDetails["lastName"] = arr[0].lastName } }
                { { req.body.email ? cardDetails["email"] = req.body.email : cardDetails["email"] = arr[0].email } }
                { { req.body.phoneNumber ? cardDetails["phoneNumber"] = req.body.phoneNumber : cardDetails["phoneNumber"] = arr[0].phoneNumber } }
                { { req.body.countryCode ? cardDetails["countryCode"] = req.body.countryCode : cardDetails["countryCode"] = arr[0].countryCode } }
                { { req.body.cardNumber ? cardDetails["cardNumber"] = req.body.cardNumber : cardDetails["cardNumber"] = arr[0].cardNumber } }
                { { req.body.expiryDate ? cardDetails["expiryDate"] = req.body.expiryDate : cardDetails["expiryDate"] = arr[0].expiryDate } }
                { { req.body.bankName ? cardDetails["bankName"] = req.body.bankName : cardDetails["bankName"] = arr[0].bankName } }
                { { req.body.cvvNumber ? cardDetails["cvvNumber"] = bcrypt.hashSync(req.body.cvvNumber) : cardDetails["cvvNumber"] = arr[0].cvvNumber } }
                { { req.body.country ? cardDetails["country"] = req.body.country : cardDetails["country"] = arr[0].country } }
                { { req.body.address ? cardDetails["address"] = req.body.address : cardDetails["address"] = arr[0].address } }
                { { req.body.city ? cardDetails["city"] = req.body.city : cardDetails["city"] = arr[0].city } }
                { { req.body.state ? cardDetails["state"] = req.body.state : cardDetails["state"] = arr[0].state } }
                { { req.body.zipCode ? cardDetails["zipCode"] = req.body.zipCode : cardDetails["zipCode"] = arr[0].zipCode } }
                userModel.findOneAndUpdate({ "cardDetails._id": req.body.cardId },
                    { $set: { "cardDetails.$": cardDetails } },
                    { new: true },
                    (err1, result1) => {
                        if (err1) {
                            console.log("hfgdahdsgfhsdgfhagsdkjf", err1)
                            return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                        } else {
                            return res.send({ responseCode: 200, responseMessage: "Card edited successfully", result1 })
                        }
                    })
            }
        })
    },
    viewCard: (req, res) => {
        try {
            if (req.body.userId) {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        const cards = result.cardDetails
                        return res.send({ responseCode: 200, responseMessage: "Card found successfully", result: cards })
                    }
                })
            }

        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    getCard: (req, res) => {
        try {
            userModel.aggregate([
                { $match: { _id: mongoose.Types.ObjectId(req.body.userId), status: "ACTIVE" } },
                { $unwind: "$cardDetails" },
                { $match: { 'cardDetails._id': mongoose.Types.ObjectId(req.body.cardId) } }
            ], (err1, result1) => {
                if (err1) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                } else if (!result1) {
                    return res.send({ responseCode: 404, responseMessage: "Card not found" })
                } else {
                    return res.send({ responseCode: 200, responseMessage: "Card found successfully", result1 })
                }

            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    getAllnews: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        let today = new Date();
                        today.setHours(0, 0, 0, 0);
                        var offset = (new Date().getTimezoneOffset()) * 60000;
                        today = new Date(today - offset).getTime()
                        var day = new Date(today)
                        let query = {}
                        query.$and = []
                        if (req.body.newsDay == "Today") {
                            query.$and.push({
                                date: {
                                    $gte: today,
                                    $lte: today + 86400000
                                }
                            })
                        }
                        if (req.body.newsDay == "Tommorow") {
                            query.$and.push({
                                date: {
                                    $gte: today + 86400000,
                                    $lte: today + 172800000
                                }
                            })
                        }
                        if (req.body.newsDay == "Week") {
                            let futureDay = 7 - day;
                            let futureTime = futureDay * 86400000;
                            futureTime = futureTime + today
                            let time = day * 86400000;
                            time = today - time
                            query.$and.push({
                                date: {
                                    $gte: time,
                                    $lte: futureTime
                                }
                            })
                        }
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            select: "newsPic description",
                            sort: {
                                createdAt: -1
                            }
                        }
                        newsModel.paginate(query, options, (err1, result1) => {
                            if (err1) {
                                res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                            } else if (result1.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: "News not found" })
                            } else {
                                return res.send({ responseCode: 200, responseMessage: "News found successfully", result: result1 })
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }

    },

    //--------------------------------------------------event section--------------------------------------------------

    addEvent: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", err })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.video) {
                            commonFunction.videoUploadCloudinary(req.body.video, (error, videoResult) => {
                                if (error) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                }
                                else {
                                    const event = new eventModel({
                                        userName: result.firstName + " " + result.lastName,
                                        userId: result._id,
                                        title: req.body.title,
                                        description: req.body.description,
                                        video: videoResult,
                                        date: req.body.date,
                                        time: req.body.time,
                                        location: req.body.location,
                                        eventType: req.body.eventType
                                    })
                                    event.save((err1, result1) => {
                                        if (err1) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err1 })
                                        } else {
                                            return res.send({ responseCode: 200, responseMessage: "Event saved successfully", result: result1 })
                                        }
                                    })
                                }
                            })
                        }
                        else if (req.body.image) {
                            commonFunction.uploadImg(req.body.image, (error, imageResult) => {
                                if (error) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                }
                                else {
                                    const event = new eventModel({
                                        userName: result.firstName + " " + result.lastName,
                                        userId: result._id,
                                        title: req.body.title,
                                        description: req.body.description,
                                        image: imageResult,
                                        date: req.body.date,
                                        time: req.body.time,
                                        location: req.body.location,
                                        eventType: req.body.eventType
                                    })
                                    event.save((err1, result2) => {
                                        if (err1) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err1 })
                                        } else {
                                            return res.send({ responseCode: 200, responseMessage: "Event saved successfully", result: result2 })
                                        }
                                    })
                                }
                            })
                        }
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    shareEventPost: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    eventModel.findOne({ _id: req.body.eventId, status: "ACTIVE" }, (err, classData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                        } else if (!classData) {
                            return res.send({ responseCode: 404, responseMessage: "Event not found" })
                        } else {
                            var object = [{
                                memberId: req.body.memberId,
                                sharedTo: []
                            }]
                            var arr = req.body.sharedTo;
                            arr.forEach(a => {
                                object[0].sharedTo.push({ friendId: a })
                            })
                            listData.friendList.forEach((item, index) => {
                                if (item.friendId != null && item.friendId.fcmToken == null) {
                                    var obj = {
                                        userId: item.friendId,
                                        senderId: req.body.memberId,
                                        title: "Shared Post",
                                        body: `${listData.firstName} shared a post with you`,
                                        senderIdMessage: `${listData.firstName} shared event with ${item.friendId.firstName}`,
                                        notificationType: "Post shared of event"
                                    };
                                    new webNotification(obj).save((saveErr, saveResult) => {
                                        if (saveErr) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                        }
                                        else {
                                            eventModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                } else if (!updateData) {
                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                } else {
                                                    console.log({ responseCode: 200, responseMessage: "Post successfully ", updateData })
                                                }
                                            })
                                        }
                                    })
                                }
                                else if (item.friendId != null && item.friendId.fcmToken != null) {
                                    commonFunction.pushNotification(item.friendId.fcmToken, "Shared Post", `${listData.firstName} shared a post with you`, (err, notificationResult) => {
                                        if (err) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                        }
                                        else {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Post",
                                                body: `${listData.firstName} shared a post with you`,
                                                senderIdMessage: `${listData.firstName} shared event with ${item.friendId.firstName}`,
                                                notificationType: "Post shared of event"
                                            };
                                            new notificationModel(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    eventModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        } else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        } else {
                                                            console.log({ responseCode: 200, responseMessage: "Post successfully ", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                    })
                                }
                                else {
                                    console.log({ responseCode: 404, responseMessage: "Data not found" });
                                }
                            })
                            return res.send({ responseCode: 200, responseMessage: "Post successfully shared" })
                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewEvent: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                        }
                        let today = new Date();
                        today.setHours(0, 0, 0, 0)
                        var offset = (new Date().getTimezoneOffset()) * 60000;
                        today = new Date(today - offset).getTime()
                        var day = new Date(today)
                        let day1 = day.getDay()
                        let today1 = new Date()
                        let end = today1.setHours(23, 59, 59, 999)
                        var endDay = new Date(end)
                        let Tommorow1 = day.setDate(day.getDate() + 1)
                        let Tommorow = new Date(Tommorow1)
                        console.log(Tommorow)
                        let lastTommorow = Tommorow.setHours(23, 59, 59, 999)
                        let query = {}
                        query.$and = []
                        if (req.body.newsDay == "Today") {
                            query.$and.push({
                                status: "ACTIVE", eventType: "EVENT",
                                createdAt: {
                                    $gte: day,
                                    $lte: endDay
                                }
                            })
                            eventModel.paginate(query, options, (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                }
                            })
                        }
                        else if (req.body.newsDay == "Tommorow") {
                            query.$and.push({
                                status: "ACTIVE", eventType: "EVENT",
                                createdAt: {
                                    $gte: Tommorow,
                                    $lte: lastTommorow
                                }
                            })
                            eventModel.paginate(query, options, (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                }
                            })
                        }
                        else if (req.body.newsDay == "Week") {
                            const futureDay = 7 - day1;
                            const futureTime = futureDay * 86400000;
                            const time = day1 * 86400000;
                            let startTime = today - time;
                            let startDate = new Date(startTime)
                            let endTime = today + futureTime;
                            let endDate = new Date(endTime)
                            query.$and.push({
                                status: "ACTIVE", eventType: "EVENT",
                                createdAt: {
                                    $gte: startDate,
                                    $lte: endDate
                                }
                            })
                            eventModel.paginate(query, options, (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                }
                            })
                        }
                        else if (req.body.search) {
                            eventModel.paginate({ location: { $regex: req.body.search }, status: "ACTIVE", eventType: "EVENT" }, options, (err1, result1) => {
                                console.log(">>>>>>>>>>>>>>>>>>>>>>")
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                }
                            })
                        }
                        else {
                            eventModel.paginate({ status: "ACTIVE", eventType: "EVENT" }, options, (err1, result1) => {
                                console.log(">>>>>>>>>>>>>>>>>>>>>>")
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                }
                            })
                        }

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    myEvent: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.search) {
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                },
                                populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                            }
                            eventModel.paginate({ $and: [{ userId: req.body.userId }, { title: { $regex: "^" + req.body.search, $options: 'i' } }, { status: "ACTIVE" }, { eventType: "EVENT" }] }, options
                                , (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (result1.length == 0) {

                                        return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                    }
                                })
                        } else {
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                },
                                populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                            }
                            eventModel.paginate({ userId: req.body.userId, status: "ACTIVE", eventType: "EVENT" }, options
                                , (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (result1.length == 0) {

                                        return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                    }
                                })

                        }
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    eventLocation: (req, res) => {
        try {
            eventModel.distinct("location", { eventType: "EVENT" }, (err, result) => {
                if (err) {
                    globalResponse.commonResponse(res, globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR, globalMessege.ErrorMessage.INTERNAL_ERROR);
                } else if (result.length == 0) {
                    res.send({ responseCode: 404, responseMessege: "Industry type notfound ", result: [] })
                } else {
                    res.send({ responseCode: 200, responseMessege: "Industry type found successfully", result })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    inviteMembers: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.eventId, status: "ACTIVE" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result1) {

                                return res.send({ responseCode: 404, responseMessage: "Event not found" })
                            } else {
                                userModel.findOne({ _id: req.body.memberId, status: "ACTIVE" }, (err2, result2) => {
                                    if (err2) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (!result2) {
                                        return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                    } else {
                                        var members = [{
                                            member: req.body.memberId,
                                            memberName: result2.firstName,
                                            memberPic: result2.profilePic
                                        }]
                                        if (result2.fcmToken == null) {
                                            var obj = {
                                                userId: req.body.memberId,
                                                senderId: req.body.userId,
                                                title: "Invite member",
                                                body: `${result.firstName} invited you for the ${result1.title}`,
                                                senderIdMessage: `${result.firstName} invited ${result2.firstName}' for the ${result1.title}`,
                                                notificationType: "Invite member"
                                            };
                                            new webNotification(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                }
                                                else {
                                                    eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                                        { $addToSet: { memberId: members } },
                                                        { new: true },
                                                        (err3, result3) => {
                                                            if (err3) {
                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                            } else if (!result3) {
                                                                return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                                            } else {
                                                                return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                                            }
                                                        }
                                                    )
                                                }
                                            })
                                        }
                                        else {
                                            commonFunction.pushNotification(result2.fcmToken, "Invite member", `${result.firstName} invited you for the ${result1.title}`, (err, notificationResult) => {
                                                if (err) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                }
                                                else {
                                                    var obj = {
                                                        userId: req.body.memberId,
                                                        senderId: req.body.userId,
                                                        title: "Invite member",
                                                        body: `${result.firstName} invited you for the ${result1.title}`,
                                                        senderIdMessage: `${result.firstName} invited ${result2.firstName}' for the ${result1.title}`,
                                                        notificationType: "Invite member"
                                                    };
                                                    new notificationModel(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        }
                                                        else {
                                                            eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                                                { $addToSet: { memberId: members } },
                                                                { new: true },
                                                                (err3, result3) => {
                                                                    if (err3) {
                                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                    } else if (!result3) {
                                                                        return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                                                    } else {
                                                                        return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                                                    }
                                                                }
                                                            )
                                                        }
                                                    })
                                                }
                                            })
                                        }

                                    }
                                })

                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    eventLikeAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" }).populate('userId').exec((err, eventResult) => {
                            if (err) {
                                return res.send({ respononseCode: 500, responseMessage: "Internal server error" });
                            }
                            else if (!eventResult) {
                                return res.send({ respononseCode: 404, responseMessage: "Event not found" });
                            }
                            else {
                                if (req.body.like == "true") {
                                    eventModel.findOne({
                                        _id: req.body.eventId,
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                        } else {
                                            var like = {
                                                likedId: result._id,
                                                userName: `${result.firstName} ${result.lastName}`,
                                                userPic: result.profilePic
                                            };
                                            if (eventResult.userId.fcmToken == null) {
                                                var obj = {
                                                    userId: eventResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Event Liked",
                                                    body: `${result.firstName} liked your event`,
                                                    senderIdMessage: `${result.firstName} liked on ${eventResult.userId.firstName}' event`,
                                                    notificationType: "Event liked"
                                                };
                                                new webNotification(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                                    }
                                                    else {
                                                        eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                                            { $push: { likes: like } },
                                                            { new: true },
                                                            (err1, result1) => {
                                                                if (err1) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    const count = result1.likes;
                                                                    return res.send({ responseCode: 200, responseMessage: "Event liked successfully", likes: count })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                            else {
                                                commonFunction.pushNotification(eventResult.userId.fcmToken, "Event Liked", `${result.firstName} liked your event`, (err, notificationResult) => {
                                                    if (err) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        var obj = {
                                                            userId: eventResult.userId,
                                                            senderId: req.body.userId,
                                                            title: "Event Liked",
                                                            body: `${result.firstName} liked your event`,
                                                            senderIdMessage: `${result.firstName} liked on ${eventResult.userId.firstName}' event`,
                                                            notificationType: "Event liked"
                                                        };
                                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                                            }
                                                            else {
                                                                eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                                                    { $push: { likes: like } },
                                                                    { new: true },
                                                                    (err1, result1) => {
                                                                        if (err1) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                        } else {
                                                                            const count = result1.likes;
                                                                            return res.send({ responseCode: 200, responseMessage: "Event liked successfully", likes: count })
                                                                        }
                                                                    }
                                                                )
                                                            }
                                                        })
                                                    }
                                                })
                                            }
                                        }
                                    })

                                } else if (req.body.comments == "true") {
                                    var comment = {
                                        commentedUser: result._id,
                                        comment: req.body.comment,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        userPic: result.profilePic,
                                        commentedTime: new Date()
                                    };
                                    if (eventResult.userId.fcmToken == null) {
                                        var obj = {
                                            userId: eventResult.userId,
                                            senderId: req.body.userId,
                                            title: "Event Commented",
                                            body: `${result.firstName} commented on your event`,
                                            senderIdMessage: `${result.firstName} commented on ${eventResult.userId.firstName}' Event`,
                                            notificationType: "Event commented"
                                        };
                                        new webNotification(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                            }
                                            else {
                                                eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                                    { $push: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })

                                    }
                                    else {
                                        commonFunction.pushNotification(eventResult.userId.fcmToken, "Event Commented", `${result.firstName} commented on your event`, (err, notificationResult) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                            }
                                            else {
                                                var obj = {
                                                    userId: eventResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Event Commented",
                                                    body: `${result.firstName} commented on your event`,
                                                    senderIdMessage: `${result.firstName} commented on ${eventResult.userId.firstName}' Event`,
                                                    notificationType: "Event commented"
                                                };
                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                                    }
                                                    else {
                                                        eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                                            { $push: { comments: comment } },
                                                            { new: true },
                                                            (err2, result2) => {
                                                                if (err2) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                        })

                                    }
                                } else if (req.body.like == "false") {
                                    eventModel.findOne({
                                        _id: req.body.eventId,
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));
                                            eventModel.findByIdAndUpdate({ _id: req.body.eventId }, { $pull: { likes: dislike[0] } }, { new: true }, (err4, result4) => {
                                                if (err4) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                } else if (!result4) {
                                                    return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                }

                                            })

                                        }
                                    })


                                } else if (req.body.comments == "false") {
                                    eventModel.findOne({
                                        _id: req.body.eventId,
                                        comments: { $elemMatch: { _id: req.body.commentId } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const deleteComment = _.filter(result3.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                            eventModel.findByIdAndUpdate({ _id: req.body.eventId }, { $pull: { comments: deleteComment[0] } }, { new: true }, (err4, result4) => {
                                                if (err4) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                } else if (!result4) {
                                                    return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment deleted successfully", result: result4 })
                                                }

                                            })

                                        }
                                    })
                                }
                            }
                        })

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    eventEditComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        eventModel.findOne({ _id: req.body.eventId, status: { $ne: "DELETE" }, eventType: "EVENT" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })

                            }
                            else {
                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                eventModel.findOneAndUpdate({ 'comments._id': req.body.commentId, status: "ACTIVE", eventType: "EVENT" }, { $set: { "comments.$": newComment } }, { new: true }, (err2, result2) => {
                                    if (err2) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })

                                    }
                                    else if (!result2) {
                                        return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Comment successfully edited", result2 })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })

        }
    },
    replyCommentInEvent: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    eventModel.findOne({ _id: req.body.eventId, "comments._id": req.body.commentId, status: "ACTIVE" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in Event"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        eventModel.findOneAndUpdate({ _id: req.body.eventId, "comments._id": req.body.commentId, status: "ACTIVE" },
                                            { $push: { replyComments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment.`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in Event"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                eventModel.findOneAndUpdate({ _id: req.body.eventId, "comments._id": req.body.commentId, status: "ACTIVE" },
                                                    { $push: { replyComments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }
                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    eventViewers: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.eventId, status: "ACTIVE" }, (err2, result2) => {
                            if (err2) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result2) {
                                return res.send({ responseCode: 404, responseMessage: "Event not found" })
                            } else {
                                eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE" },
                                    {
                                        $addToSet: { viewers: result._id }
                                    },
                                    { new: true },
                                    (err1, result1) => {
                                        if (err1) {

                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else {
                                            let viewers = result1.viewers.length;
                                            return res.send({ responseCode: 200, responseMessage: "Viewer added successfully", result: viewers })
                                        }
                                    })
                            }
                        })
                    }
                })
            }


        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    hideAndDeleteEvent: (req, res) => {
        try {
            if (!req.body.userId && !req.body.eventId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.type == "HIDE") {
                            eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                {
                                    $set: { status: "HIDE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Nonprofit hide successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "DELETE") {
                            eventModel.findOneAndUpdate({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" },
                                {
                                    $set: { status: "DELETE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Nonprofit delete successfully", result: result1 })
                                    }
                                })
                        }

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    viewEventsLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    let friends = result.friendList;
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.eventId, status: "ACTIVE", eventType: "EVENT" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result) {
                                return res.send({ responseCode: 404, responseMessage: "Event not found" })
                            } else {
                                if (req.body.show == "comments") {
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                  
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;
                                  
                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                                
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //--------------------------------------------------discussionFormManagement---------------------------------------

    addDiscussionForm: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        const event = new discussionFormModel({
                            userId: result._id,
                            title: req.body.title,
                            description: req.body.description,
                            latitude: req.body.lat,
                            longitude: req.body.long,
                            userName: result.firstName + " " + result.lastName
                        })
                        event.save((err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else {
                                return res.send({ responseCode: 200, responseMessage: "Discussion saved successfully", result: result1 })
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //---------------------------------------------------------View Discussion Forum----------------------------------------------------

    viewDiscussionForum: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        console.log("LLLLLLLLLLLLLLLLLLL", err)
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.discussionId) {
                            discussionFormModel.findOne({ _id: req.body.discussionId, status: "ACTIVE" }
                                , (err1, result1) => {
                                    if (err1) {
                                        console.log("EEEEEEEEEEEEEEEEE", err1)
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (!result1) {
                                        return res.send({ responseCode: 404, responseMessage: "Discussion forum not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Discussion forum found successfully", result: result1 })
                                    }
                                })
                        }
                        else {
                            var query = { status: { $eq: "ACTIVE" } }
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 10,
                                sort: {
                                    createdAt: -1
                                }
                            }
                            if (req.body.search) {
                                query.$and = [{ title: { $regex: "^" + req.body.search, $options: 'i' } }, { status: { $eq: "ACTIVE" } }]
                            }
                            discussionFormModel.paginate(query, options, (err1, result1) => {
                                if (err1) {
                                    console.log("EEEEEEEEEEEEEEEEE", err1)
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {

                                    return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Post list found successfully", result: result1 })
                                }
                            })
                        }
                    }
                })

            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    replyCommentInDisscussion: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    discussionFormModel.findOne({ _id: req.body.discussionId, "comments._id": req.body.commentId, status: "ACTIVE" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in discussion forum"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, "comments._id": req.body.commentId, status: "ACTIVE" },
                                            { $push: { comments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)

                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment.`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in discussion forum"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, "comments._id": req.body.commentId, status: "ACTIVE" },
                                                    { $push: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }

                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //--------------------------------------Discussion Forum Like and Comment----------------------------------------------------
    discussionFormLikeAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        discussionFormModel.findOne({ _id: req.body.discussionId, status: "ACTIVE" }).populate('userId').exec((err, formResult) => {

                            if (err) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!result) {
                                return res.send({ responseCode: 404, responseMessage: "Discussion form not found" })
                            }
                            else {
                                if (req.body.like == "true") {
                                    discussionFormModel.findOne({
                                        _id: req.body.discussionId,
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                        } else {
                                            var like = {
                                                likedId: result._id,
                                                likedTime: new Date(),
                                                userName: `${result.firstName} ${result.lastName}`,
                                            };
                                            if (formResult.userId.fcmToken == null) {
                                                var obj = {
                                                    userId: formResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Discussion form liked",
                                                    body: `${result.firstName} liked your discussion form`,
                                                    senderIdMessage: `${result.firstName} liked on ${formResult.userId.firstName}'s post`,
                                                    notificationType: "Liked discussion forum"
                                                };
                                                new webNotification(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, status: "ACTIVE" },
                                                            { $addToSet: { likes: like } },
                                                            { new: true },
                                                            (err1, result1) => {
                                                                if (err1) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    const count = result1.likes;
                                                                    return res.send({ responseCode: 200, responseMessage: "Discussion liked successfully", likes: count })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                            else {
                                                commonFunction.pushNotification(formResult.userId.fcmToken, "Discussion form liked", `${result.firstName} liked your discussion form`, (err, notificationResult) => {
                                                    if (err) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        var obj = {
                                                            userId: formResult.userId,
                                                            senderId: req.body.userId,
                                                            title: "Discussion form liked",
                                                            body: `${result.firstName} liked your discussion form`,
                                                            senderIdMessage: `${result.firstName} liked on ${formResult.userId.firstName}'s post`,
                                                            notificationType: "Liked discussion forum"
                                                        };
                                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                            }
                                                            else {
                                                                discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, status: "ACTIVE" },
                                                                    { $addToSet: { likes: like } },
                                                                    { new: true },
                                                                    (err1, result1) => {
                                                                        if (err1) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                        } else {
                                                                            const count = result1.likes;
                                                                            return res.send({ responseCode: 200, responseMessage: "Discussion liked successfully", likes: count })
                                                                        }
                                                                    }
                                                                )
                                                            }
                                                        })
                                                    }
                                                })
                                            }

                                        }
                                    })

                                } else if (req.body.comments == "true") {
                                    var comment = {
                                        commentedUser: result._id,
                                        comment: req.body.comment,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        userPic: result.profilePic,
                                        commentedTime: new Date()
                                    };
                                    if (formResult.userId.fcmToken == null) {
                                        var obj = {
                                            userId: formResult.userId,
                                            senderId: req.body.userId,
                                            title: "Discussion form commented",
                                            body: `${result.firstName} commented on your discussion form`,
                                            senderIdMessage: `${result.firstName} commented on ${formResult.userId.firstName}'s post`,

                                            notificationType: "Commented discussion form"
                                        };
                                        new webNotification(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, status: "ACTIVE" },
                                                    { $push: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })

                                    }
                                    else {
                                        commonFunction.pushNotification(formResult.userId.fcmToken, "Discussion form commented", `${result.firstName} commented on your discussion form`, (err, notificationResult) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                var obj = {
                                                    userId: formResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Discussion form commented",
                                                    body: `${result.firstName} commented on your discussion form`,
                                                    senderIdMessage: `${result.firstName} commented ${formResult.userId.firstName}'s post`,
                                                    notificationType: "Commented discussion form"
                                                };
                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, status: "ACTIVE" },
                                                            { $push: { comments: comment } },
                                                            { new: true },
                                                            (err2, result2) => {
                                                                if (err2) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                        })
                                    }

                                } else if (req.body.like == "false") {
                                    discussionFormModel.findOne({
                                        _id: req.body.discussionId,
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));
                                            discussionFormModel.findByIdAndUpdate({ _id: req.body.discussionId }, { $pull: { likes: dislike[0] } }, { new: true }, (err4, result4) => {
                                                if (err4) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                } else if (!result4) {
                                                    return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                }

                                            })

                                        }
                                    })
                                } else if (req.body.comments == "false") {
                                    discussionFormModel.findOne({
                                        _id: req.body.discussionId,
                                        comments: { $elemMatch: { _id: req.body.commentId } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const deleteComment = _.filter(result3.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                            discussionFormModel.findByIdAndUpdate({ _id: req.body.discussionId }, { $pull: { comments: deleteComment[0] } }, { new: true }, (err4, result4) => {
                                                if (err4) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                } else if (!result4) {
                                                    return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment deleted successfully", result: result4 })
                                                }

                                            })
                                        }
                                    })
                                }
                            }
                        })

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewDisscussionLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    let friends = result.friendList;
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        discussionFormModel.findOne({ _id: req.body.discussionId, status: "ACTIVE" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result) {
                                return res.send({ responseCode: 404, responseMessage: "Disscussion  not found" })
                            } else {
                                if (req.body.show == "comments") {
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                  
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;
                                  
                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                                
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    shareDiscussionPost: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    discussionFormModel.findOne({ _id: req.body.discussionId, status: "ACTIVE" }, (err, classData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
                        } else if (!classData) {
                            return res.send({ responseCode: 404, responseMessage: "Discussion not found" })
                        } else {
                            var object = [{
                                memberId: req.body.memberId,
                                sharedTo: []
                            }]
                            var arr = req.body.sharedTo;
                            arr.forEach(a => {
                                object[0].sharedTo.push({ friendId: a })
                            })
                            listData.friendList.forEach((item, index) => {
                                if (item.friendId != null && item.friendId.fcmToken == null) {
                                    var obj = {
                                        userId: item.friendId,
                                        senderId: req.body.memberId,
                                        title: "Shared Post",
                                        body: `${listData.firstName} shared a post with you`,
                                        senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                        notificationType: "Post shared of discussion forum"
                                    };
                                    new webNotification(obj).save((saveErr, saveResult) => {
                                        if (saveErr) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                        }
                                        else {
                                            discussionFormModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                }
                                                else if (!updateData) {
                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                }
                                                else {
                                                    console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                }
                                            })
                                        }
                                    })
                                }
                                else if (item.friendId != null && item.friendId.fcmToken != null) {
                                    commonFunction.pushNotification(item.friendId.fcmToken, "Shared Post", `${listData.firstName} shared a post with you`, (err, notificationResult) => {
                                        if (err) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                        }
                                        else {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Post",
                                                body: `${listData.firstName} shared a post with you`,
                                                senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                notificationType: "Post shared of discussion forum"
                                            };
                                            new notificationModel(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    discussionFormModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                    })
                                }
                                else {
                                    console.log({ responseCode: 404, responseMessage: "Data not found" });
                                }
                            })
                            return res.send({ responseCode: 200, responseMessage: "Post successfully shared" })
                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //-------------------------------------------Edit Discussion comments----------------------------------------
    editDiscussionComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        discussionFormModel.findOne({ _id: req.body.discussionId, status: { $ne: "DELETE" } }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Discussion not found" })
                            }
                            else {
                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                discussionFormModel.findOneAndUpdate({ 'comments._id': req.body.commentId, status: "ACTIVE" }, { $set: { "comments.$": newComment } }, { new: true }, (err2, result2) => {
                                    if (err2) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result2) {
                                        return res.send({ responseCode: 404, responseMessage: "Comment not found" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Comment edited successfully", result: result2 })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })

        }
    },

    //---------------------------------------------------------Tag friends Discussion Forum-------------------------------------

    tagFriendsDiscussionForum: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" },
                    (err, result) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                        }
                        else if (!result) {
                            return res.send({ responseCode: 404, responseMessage: "User not found" })
                        }
                        else {
                            userModel.findOne({ _id: req.body.userId, friendList: { $elemMatch: { friendId: req.body.friendId, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.friendId } }, select: 'fcmToken firstName' }).exec((err2, result2) => {
                                if (err2) {
                                    return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                                }
                                else if (!result2) {
                                    return res.send({ responseCode: 404, responseMessage: "Friend not found" })
                                }
                                else {
                                    result2.friendList.forEach((item, index) => {
                                        if (item.friendId != null && item.friendId.fcmToken == null) {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.userId,
                                                title: "Tag Friend",
                                                body: `${result.firstName} tagged you in the discussion forum`,
                                                senderIdMessage: `${result.firstName} tagged ${item.friendId.firstName} in the discussion forum`,
                                                notificationType: "Tag friend"
                                            };
                                            new webNotification(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, status: "ACTIVE" },
                                                        { $push: { tagFriends: result2._id } },
                                                        { new: true },
                                                        (err1, result1) => {
                                                            if (err1) {
                                                                console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                            }
                                                            else {
                                                                console.log({ responseCode: 200, responseMessage: "Friend tagged successfully", result1 })
                                                            }
                                                        })
                                                }
                                            })
                                        }
                                        else if (item.friendId != null && item.friendId.fcmToken != null) {
                                            commonFunction.pushNotification(item.friendId.fcmToken, "Tag Friend", `${result.firstName} tagged you in the post`, (err, notificationResult) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                }
                                                else {
                                                    var obj = {
                                                        userId: item.friendId,
                                                        senderId: req.body.userId,
                                                        title: "Tag Friend",
                                                        body: `${result.firstName} tagged you in the discussion forum`,
                                                        senderIdMessage: `${result.firstName} tagged ${item.friendId.firstName} in the discussion forum`,
                                                        notificationType: "Tag friend"
                                                    };
                                                    new notificationModel(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                        }
                                                        else {
                                                            discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, status: "ACTIVE" },
                                                                { $push: { tagFriends: result2._id } },
                                                                { new: true },
                                                                (err1, result1) => {
                                                                    if (err1) {
                                                                        console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                                    }
                                                                    else {
                                                                        console.log({ responseCode: 200, responseMessage: "Friend tagged successfully", result1 })
                                                                    }
                                                                })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else {
                                            console.log({ responseCode: 404, responseMessage: "Data not found" });
                                        }
                                    })
                                    return res.send({ responseCode: 200, responseMessage: "Friend tagged successfully" })
                                }
                            })
                        }
                    })
            }
        } catch (error) {
            return res.send({ responseCode: 404, responseMessage: "Error in catch !" })
        }
    },
    //----------------------------------Discussion Forum post location------------------------------------------
    discussionForumLocation: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" },
                    (err, result) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        } else if (!result) {
                            return res.send({ responseCode: 404, responseMessage: "User not found" })
                        } else {
                            discussionFormModel.findOne({ _id: req.body.discussionId, status: "ACTIVE" },
                                (err1, result1) => {
                                    console.log("7022=>>>>", err1, result1);

                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        const lat = result1.latitude
                                        const long = result1.longitude
                                        commonFunction.getAddress({ lat, long }, (err2, result2) => {
                                            console.log("7032=>>>>>", err2, result2)
                                            if (err2) {

                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            } else {
                                                return res.send({ responseCode: 200, responseMessage: "Discussion post location found successfully", result2 })
                                            }
                                        })
                                    }
                                })
                        }
                    })
            }
        } catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },
    //---------------------------------------------------------join discussion forum-------------------------------------------------
    joinDiscussionForum: (req, res) => {
        try {
            if (!req.body.userId || !req.body.discussionId) {
                globalResponse.commonResponse(
                    res,
                    globalStatusCode.ErrorCode.PARAMETER_MISSING,
                    globalMessege.ErrorMessage.FIELD_REQUIRED
                );
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                            globalMessege.ErrorMessage.INTERNAL_ERROR
                        );
                    } else if (!result) {
                        globalResponse.commonResponse(
                            res,
                            globalStatusCode.ErrorCode.NOT_FOUND,
                            globalMessege.ErrorMessage.NOT_FOUND
                        );
                    } else {
                        discussionFormModel.findOne({ _id: req.body.discussionId, members: { $elemMatch: { memberId: result._id, status: "ACTIVE" } } }, (err2, result2) => {
                            if (err2) {
                                globalResponse.commonResponse(
                                    res,
                                    globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                    globalMessege.ErrorMessage.INTERNAL_ERROR
                                );
                            } else if (result2) {
                                res.send({ responseCode: 201, responseMessege: "Member already exist" })
                            } else {
                                var obj = {
                                    memberId: result._id
                                }
                                discussionFormModel.findOneAndUpdate({ _id: req.body.discussionId, status: "ACTIVE" },
                                    { $addToSet: { 'members': obj } },
                                    { new: true, lean: true },
                                    (err1, result1) => {
                                        if (err1) {
                                            log("hhhhhhhhhhhhhhhhhhhhhhhhhhhhh", err1)
                                            globalResponse.commonResponse(
                                                res,
                                                globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR,
                                                globalMessege.ErrorMessage.INTERNAL_ERROR
                                            );
                                        } else {
                                            var result = { success: result1 };
                                            globalResponse.sendResponseWithData(
                                                res,
                                                globalStatusCode.SuccessCode.SUCCESS,
                                                globalMessege.SuccessMessage.FRIEND_ADDED,
                                                result
                                            );
                                        }
                                    })
                            }
                        })
                    }
                })
            }
        } catch (error) {
            globalResponse.commonResponse(
                res,
                globalStatusCode.ErrorCode.BAD_REQUEST,
                globalMessege.ErrorMessage.ERROR_IN_CATCH
            );
        }
    },
    //-------------------------------------------------Non-profit section--------------------------------------------------------
    nonProfit: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.video) {
                            commonFunction.videoUploadCloudinary(req.body.video, (error, videoResult) => {
                                if (error) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                }
                                else {
                                    const event = new eventModel({
                                        userId: result._id,
                                        userName: result.firstName + " " + result.lastName,
                                        title: req.body.title,
                                        description: req.body.description,
                                        video: videoResult,
                                        date: new Date().toLocaleString(),
                                        location: req.body.location,
                                        eventType: "NONPROFIT",
                                    })
                                    event.save((err1, result1) => {
                                        if (err1) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err1 })
                                        } else {
                                            return res.send({ responseCode: 200, responseMessage: "Non profit group uploaded successfully", result: result1 })
                                        }
                                    })
                                }
                            })
                        } else if (req.body.image) {
                            commonFunction.uploadImg(req.body.image, (error, imageResult) => {
                                if (error) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                }
                                else {
                                    const event = new eventModel({
                                        userId: result._id,
                                        title: req.body.title,
                                        description: req.body.description,
                                        image: imageResult,
                                        date: new Date().toLocaleString(),
                                        eventType: "NONPROFIT",
                                        location: req.body.location,
                                    })
                                    event.save((err1, result2) => {
                                        if (err1) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err1 })
                                        } else {
                                            return res.send({ responseCode: 200, responseMessage: "Non profit group uploaded successfully", result: result2 })
                                        }
                                    })
                                }
                            })
                        }
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    shareNonProfit: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    eventModel.findOne({ _id: req.body.gameId, status: "ACTIVE", eventType: "NONPROFIT" }, (err, classData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                        } else if (!classData) {
                            return res.send({ responseCode: 404, responseMessage: "Game not found" })
                        } else {
                            var object = [{
                                memberId: req.body.memberId,
                                sharedTo: []
                            }]
                            var arr = req.body.sharedTo;
                            arr.forEach(a => {
                                object[0].sharedTo.push({ friendId: a })
                            })
                            listData.friendList.forEach((item, index) => {
                                if (item.friendId != null && item.friendId.fcmToken == null) {
                                    var obj = {
                                        userId: item.friendId,
                                        senderId: req.body.memberId,
                                        title: "Shared Game",
                                        body: `${listData.firstName} shared a game with you`,
                                        senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                        notificationType: "Game shared"
                                    };
                                    new webNotification(obj).save((saveErr, saveResult) => {
                                        if (saveErr) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                        }
                                        else {
                                            eventModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE", eventType: "NONPROFIT" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                }
                                                else if (!updateData) {
                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                }
                                                else {
                                                    console.log({ responseCode: 200, responseMessage: "The shared game is updated successfully", updateData })
                                                }
                                            })
                                        }
                                    })
                                }
                                else if (item.friendId != null && item.friendId.fcmToken != null) {
                                    commonFunction.pushNotification(item.friendId.fcmToken, "Shared Game", `${listData.firstName} shared a game with you`, (err, notificationResult) => {
                                        if (err) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                        }
                                        else {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Game",
                                                body: `${listData.firstName} shared a game with you`,
                                                senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                notificationType: "Game shared"
                                            };
                                            new notificationModel(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    eventModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE", eventType: "GAME" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "The shared game is updated successfully", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                    })
                                }
                                else {
                                    console.log({ responseCode: 404, responseMessage: "Data not found" });
                                }
                            })
                            return res.send({ responseCode: 200, responseMessage: "The shared game is updated successfully" })

                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewNonProfit: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.search) {
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                },
                                populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                            }
                            eventModel.paginate(
                                { status: "ACTIVE", eventType: "NONPROFIT", title: { $regex: req.body.search } },
                                options,
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (!result) {
                                        return res.send({ responseCode: 404, responseMessage: "Non-profit not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Non-profit found successfully", result: result1 })
                                    }
                                })
                        } else {

                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                },
                                populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                            }
                            eventModel.paginate(
                                { status: "ACTIVE", eventType: "NONPROFIT" },
                                options,
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (!result) {
                                        return res.send({ responseCode: 404, responseMessage: "Non-profit not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Non-profit found successfully", result: result1 })
                                    }
                                })
                        }
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    nonProfitLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" }).populate('userId').exec((err, profitResult) => {
                            if (err) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!profitResult) {
                                return res.send({ responseCode: 404, responseMessage: "Non-profit post not found" })
                            }
                            else {
                                if (req.body.like == "true") {
                                    eventModel.findOne({
                                        _id: req.body.postId,
                                        status: "ACTIVE",
                                        eventType: "NONPROFIT",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                        } else {
                                            var like = {
                                                likedId: result._id,
                                                userName: `${result.firstName} ${result.lastName}`,
                                                userPic: result.profilePic
                                            };
                                            if (profitResult.userId.fcmToken == null) {
                                                var obj = {
                                                    userId: profitResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Post Liked",
                                                    body: `${result.firstName} liked your post`,
                                                    senderIdMessage: `${result.firstName} liked on ${profitResult.userId.firstName}' Non-profit`,
                                                    notificationType: "Post liked in non-profit"
                                                };
                                                new webNotification(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                    }
                                                    else {
                                                        eventModel.findOneAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                                            { $push: { likes: like } },
                                                            { new: true },
                                                            (err1, result1) => {
                                                                if (err1) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else if (!result1) {
                                                                    return res.send({ responseCode: 400, responseMessage: "Unable to like and comment" })
                                                                }
                                                                else {
                                                                    const count = result1.likes;
                                                                    return res.send({ responseCode: 200, responseMessage: "Event liked successfully", likes: count })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                            else {
                                                commonFunction.pushNotification(profitResult.userId.fcmToken, "Post Liked", `${result.firstName} liked your post`, (err, notificationResult) => {
                                                    if (err) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        var obj = {
                                                            userId: profitResult.userId,
                                                            senderId: req.body.userId,
                                                            title: "Post Liked",
                                                            body: `${result.firstName} liked your post`,
                                                            senderIdMessage: `${result.firstName} liked on ${profitResult.userId.firstName}' Non-profit`,
                                                            notificationType: "Post liked in non-profit"
                                                        };
                                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                            }
                                                            else {
                                                                eventModel.findOneAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                                                    { $push: { likes: like } },
                                                                    { new: true },
                                                                    (err1, result1) => {
                                                                        if (err1) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                        } else if (!result1) {
                                                                            return res.send({ responseCode: 400, responseMessage: "Unable to like and comment" })
                                                                        }
                                                                        else {
                                                                            const count = result1.likes;
                                                                            return res.send({ responseCode: 200, responseMessage: "Event liked successfully", likes: count })
                                                                        }
                                                                    }
                                                                )
                                                            }
                                                        })
                                                    }
                                                })
                                            }
                                        }
                                    })

                                } else if (req.body.comments == "true") {
                                    var comment = {
                                        commentedUser: result._id,
                                        comment: req.body.comment,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        senderIdMessage: `${result.firstName} commented on ${profitResult.userId.firstName}' Non-profit`,
                                        userPic: result.profilePic,
                                        commentedTime: new Date()
                                    };
                                    if (profitResult.userId.fcmToken == null) {
                                        var obj = {
                                            userId: profitResult.userId,
                                            senderId: req.body.userId,
                                            title: "Post Commented",
                                            body: `${result.firstName} commented on your post`,
                                            notificationType: "Post commented in non-profit"
                                        };
                                        new webNotification(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Intrnal server error" });
                                            }
                                            else {
                                                eventModel.findOneAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                                    { $push: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                    else {
                                        commonFunction.pushNotification(profitResult.userId.fcmToken, "Post Commented", `${result.firstName} commented on your post`, (err, notificationResult) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Intrnal server error" });
                                            }
                                            else {
                                                var obj = {
                                                    userId: profitResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Post Commented",
                                                    body: `${result.firstName} commented on your post`,
                                                    senderIdMessage: `${result.firstName} commented on ${profitResult.userId.firstName}' Non-profit`,
                                                    notificationType: "Post commented in non-profit"
                                                };
                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                    }
                                                    else {
                                                        eventModel.findOneAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                                            { $push: { comments: comment } },
                                                            { new: true },
                                                            (err2, result2) => {
                                                                if (err2) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                        })
                                    }
                                } else if (req.body.like == "false") {
                                    eventModel.findOne({
                                        _id: req.body.postId,
                                        status: "ACTIVE",
                                        eventType: "NONPROFIT",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));
                                            eventModel.findByIdAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                                { $pull: { likes: dislike[0] } },
                                                { new: true },
                                                (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                    }

                                                })

                                        }
                                    })


                                } else if (req.body.comments == "false") {
                                    eventModel.findOne({
                                        _id: req.body.postId,
                                        status: "ACTIVE",
                                        eventType: "NONPROFIT",
                                        comments: { $elemMatch: { _id: req.body.commentId } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const deleteComment = _.filter(result3.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                            eventModel.findByIdAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                                { $pull: { comments: deleteComment[0] } },
                                                { new: true },
                                                (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Comment deleted successfully", result: result4 })
                                                    }
                                                })
                                        }
                                    })
                                }
                            }
                        })

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    nonProfitEditComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        eventModel.findOne({ _id: req.body.eventId, status: { $ne: "DELETE" } ,eventType: "NONPROFIT"  }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })

                            }
                            else {
                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                eventModel.findOneAndUpdate({ 'comments._id': req.body.commentId, status: "ACTIVE", eventType: "NONPROFIT" }, { $set: { "comments.$": newComment } }, { new: true }, (err2, result2) => {
                                    if (err2) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error", err2})

                                    }
                                    else if (!result2) {
                                        return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Comment successfully edited", result2 })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })

        }
    },
    viewNonProfitLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.eventId, status: { $ne: "DELETE" }, eventType: "NONPROFIT" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result) {
                                return res.send({ responseCode: 404, responseMessage: "Event not found" })
                            } else {
                                if (req.body.show == "comments") {
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                 else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;
                                  
                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    addImageIcon: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        const imageBase = await upload(req.body.image)
                        eventModel.findOneAndUpdate({ _id: req.body.postId, status: { $ne: "ACTIVE" }, eventType: "NONPROFIT" },
                            { $set: { PicVideo: imageBase } },
                            { new: true },
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Image updated successfully", result: result1 })
                                }
                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    myNonProfit: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.search) {
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                },
                                populate: { path: 'userId', select: 'profilePic' }
                            }
                            eventModel.paginate({ userId: req.body.userId, status: "ACTIVE", eventType: "NONPROFIT", title: { $regex: req.body.search } }, options
                                , (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (result1.length == 0) {

                                        return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                    }
                                })
                        } else {
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                },
                                populate: { path: 'userId', select: 'profilePic' }
                            }
                            eventModel.paginate({ userId: req.body.userId, status: "ACTIVE", eventType: "NONPROFIT" }, options
                                , (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (result1.length == 0) {

                                        return res.send({ responseCode: 404, responseMessage: "Event not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Event found successfully", result: result1 })
                                    }
                                })
                        }
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    nonProfitLocation: (req, res) => {
        try {
            eventModel.distinct("location", { eventType: "NONPROFIT" }, (err, result) => {
                if (err) {
                    globalResponse.commonResponse(res, globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR, globalMessege.ErrorMessage.INTERNAL_ERROR);
                } else if (result.length == 0) {
                    globalResponse.commonResponse(res, globalStatusCode.ErrorCode.NOT_FOUND, globalMessege.ErrorMessage.USER_FOUND);
                } else {
                    res.send({ responseCode: 200, responseMessege: "Industry type found successfully", result })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    hideAndDeleteNonProfit: (req, res) => {
        try {
            if (!req.body.userId && !req.body.postId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.type == "HIDE") {
                            eventModel.findOneAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                {
                                    $set: { status: "HIDE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Nonprofit hide successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "DELETE") {
                            eventModel.findOneAndUpdate({ _id: req.body.postId, status: "ACTIVE", eventType: "NONPROFIT" },
                                {
                                    $set: { status: "DELETE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Nonprofit delete successfully", result: result1 })
                                    }
                                })
                        }

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    replyCommentInNonProfit: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    eventModel.findOne({ _id: req.body.gameId, "comments._id": req.body.commentId, status: "ACTIVE", eventType: "NONPROFIT" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in non-profit"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        eventModel.findOneAndUpdate({ _id: req.body.gameId, "comments._id": req.body.commentId, status: "ACTIVE", eventType: "NONPROFIT" },
                                            { $push: { replyComments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)

                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment.`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in non-profit"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                eventModel.findOneAndUpdate({ _id: req.body.gameId, "comments._id": req.body.commentId, status: "ACTIVE", eventType: "NONPROFIT" },
                                                    { $push: { replyComments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }

                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //--------------------------------------------------Bio section-------------------------------------------------------
    addBio: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        userModel.findOneAndUpdate({ _id: req.body.userId, status: "ACTIVE" },
                            { $set: { bio: req.body.bio } },
                            { new: true },
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Bio saved successfully", result: result1 })
                                }

                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    editBio: (req, res) => {
        try {
            if (!req.body.userId && !req.body.bio) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        userModel.findOneAndUpdate({ _id: req.body.userId, status: "ACTIVE" },
                            { $set: { bio: req.body.bio } },
                            { new: true },
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Bio saved successfully", result: result1 })
                                }

                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    editUserDetail: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        userModel.findOneAndUpdate({ _id: req.body.userId, status: "ACTIVE" },
                            {
                                $set: {
                                    education: req.body.education,
                                    city: req.body.city,
                                    job: req.body.job
                                }
                            },
                            { new: true },
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Non-profit saved successfully", result: result1 })
                                }

                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //---------------------------------------gaming section------------------------------------------------------------------

    addGameVideo: (req, res) => {
        try {
            userModel.aggregate([
                { $match: { _id: mongoose.Types.ObjectId(req.body.userId), status: "ACTIVE" } },
                { $unwind: "$cardDetails" },
                { $match: { "cardDetails._id": mongoose.Types.ObjectId(req.body.cardId) } }], async (userError, userData) => {
                    if (userError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (userData.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: "Data not found" })
                    }
                    else {
                        var CryptoJS = node_cryptojs.CryptoJS;

                        var JsonFormatter = node_cryptojs.JsonFormatter;

                        var decrypted = CryptoJS.AES.decrypt(userData[0].cardDetails.cvvNumber, req.body.userId, { format: JsonFormatter })

                        var cvv = CryptoJS.enc.Utf8.stringify(decrypted);

                        if (userData[0].cardDetails.cardNumber != req.body.cardNumber) {
                            res.send({ responseCode: 404, responseMessage: "Invalid card number" })
                        } else if (cvv != req.body.cvvNumber) {
                            res.send({ responseCode: 404, responseMessage: "Invalid cvv number" })
                        }
                        else {
                            var date = new Date();
                            date.setDate(date.getDate() + 30);
                            var dateString = date.toISOString().split('T')[0];
                            const video1 = await video(req.body.gameVideo)
                            const game = new eventModel({
                                userId: userData[0]._id,
                                expiryDate: dateString,
                                cardDetails: userData[0].cardDetails,
                                video: video1,
                                title: req.body.title,
                                description: req.body.description,
                                eventType: "GAME",

                            })
                            game.save((err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game video uploaded successfully", userData: result1 })
                                }
                            })
                        }
                    }
                }
            )

        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    chargeForGameVideo: (req, res) => {
        try {
            if (!req.body.userId || !req.body.gameId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error1" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        paymentManagement.findOne((mngError, mngResult) => {
                            if (mngError) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error2" })
                            }
                            else if (!mngResult) {
                                return res.send({ responseCode: 404, responseMessage: "Payment not found" })

                            }
                            else {
                                userModel.findOne({ status: "ACTIVE", userType: "ADMIN" }, (adminError, admindata) => {
                                    if (adminError) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error2" })
                                    }
                                    else {
                                        eventModel.findOne({ _id: req.body.gameId, eventType: "GAME", status: "ACTIVE", expiryDate: { $gte: Date.now() }, clickBy: { $ne: req.body.userId } }).populate('userId').exec((addError, addResult) => {
                                            if (addError) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error2", addError })
                                            }
                                            else if (!addResult) {
                                                return res.send({ responseCode: 404, responseMessage: "The video game already clicked" })
                                            }
                                            else {
                                                var CryptoJS = node_cryptojs.CryptoJS;

                                                var JsonFormatter = node_cryptojs.JsonFormatter;
                                                var decrypted = CryptoJS.AES.decrypt(addResult.cardDetails[0].cvvNumber, "5de9de8867319903a70bd48f", { format: JsonFormatter })

                                                var cardInfo = {
                                                    "number": addResult.cardDetails[0].cardNumber,
                                                    "exp_month": Number(addResult.cardDetails[0].expiryDate.split("/")[1]),
                                                    "exp_year": Number(addResult.cardDetails[0].expiryDate.split("/")[2]),
                                                    "cvc": CryptoJS.enc.Utf8.stringify(decrypted),
                                                    "currency": 'usd'
                                                }

                                                stripe.tokens.create({

                                                    card: cardInfo
                                                }, (error, token) => {

                                                    if (error) {
                                                        res.send({
                                                            responseCode: 500,
                                                            responseMesssage: "Internal server error",
                                                            error
                                                        })
                                                    } else {

                                                        stripe.customers.create({
                                                            source: token.id,
                                                        }, (error1, customer) => {

                                                            if (error1) {
                                                                res.send({
                                                                    responseCode: 500,
                                                                    responseMessage: "Internal server error",
                                                                    error1
                                                                })
                                                            } else {
                                                                stripe.charges.create({
                                                                    amount: mngResult.paymentForVideo*100,
                                                                    currency: "usd",
                                                                    customer: customer.id,
                                                                }, function (error2, charge) {
                                                                    if (error2) {

                                                                        res.send({
                                                                            responseCode: 500,
                                                                            responseMessage: "Internal server error",
                                                                            error2
                                                                        })
                                                                    } else {
                                                                        var obj = {
                                                                            userId: admindata._id,
                                                                            title: "Amount credited",
                                                                            body: `Your account has been credited USD ${charge.amount} by ${addResult.userId.firstName}`,
                                                                            notificationType: "Credited for video game"
                                                                        };
                                                                        new webNotification(obj).save((saveErr, saveResult) => {
                                                                            if (saveErr) {
                                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                            }
                                                                            else {
                                                                                if (addResult.userId.fcmToken == null) {
                                                                                    var obj2 = {
                                                                                        userId: addResult.userId,
                                                                                        title: "Amount debited",
                                                                                        body: `Your account has been debited USD ${charge.amount} as your post has been clicked by ${userData.firstName}`,
                                                                                        notificationType: "Debited for video game"
                                                                                    };
                                                                                    new webNotification(obj2).save((saveErr, saveResult) => {
                                                                                        if (saveErr) {
                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                                        }
                                                                                        else {
                                                                                            eventModel.findOneAndUpdate({ _id: addResult._id, eventType: "GAME", clickBy: { $ne: req.body.userId } }, { $addToSet: { clickBy: req.body.userId } }, { new: true }, (advError, advResult) => {
                                                                                                console.log("8346====>", advError, advResult)
                                                                                                if (advError) {

                                                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error3" })
                                                                                                }
                                                                                                else if (!advResult) {
                                                                                                    return res.send({ responseCode: 404, responseMessage: "The video game already clicked" })
                                                                                                }
                                                                                                else {
                                                                                                    var obj = new gamePayment({
                                                                                                        transactionId: charge.balance_transaction,
                                                                                                        amount: charge.amount,
                                                                                                        customerId: charge.customer,
                                                                                                        url: charge.receipt_url,
                                                                                                        transactionStatus: charge.status,
                                                                                                        amount_refunded: charge.amount_refunded,
                                                                                                        orderStatus: charge.orderStatus,
                                                                                                        chargeId: charge.chargeId,
                                                                                                        userId: advResult.userId,
                                                                                                        gameId: advResult._id,
                                                                                                        cardDetails: advResult.cardDetails
                                                                                                    })
                                                                                                    obj.save((error4, result4) => {
                                                                                                        if (error4) {
                                                                                                            res.send({
                                                                                                                responseCode: 500,
                                                                                                                responseMessage: "Internal server error", error4
                                                                                                            })
                                                                                                        } else {
                                                                                                            res.send({
                                                                                                                responseCode: 200,
                                                                                                                responseMessage: "Transaction", result4
                                                                                                            })
                                                                                                        }
                                                                                                    })
                                                                                                }
                                                                                            });
                                                                                        }
                                                                                    })
                                                                                }
                                                                                else {
                                                                                    commonFunction.pushNotification(addResult.userId.fcmToken, "Amount debited", `Your account has been debited USD ${charge.amount} as your post has been clicked by ${userData.firstName}`, (err, notificationResult) => {
                                                                                        if (err) {
                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                                        }
                                                                                        else {
                                                                                            var obj2 = {
                                                                                                userId: addResult.userId,
                                                                                                title: "Amount debited",
                                                                                                body: `Your account has been debited USD ${charge.amount} as your post has been clicked by ${userData.firstName}`
                                                                                            };
                                                                                            new notificationModel(obj2).save((saveErr, saveResult) => {
                                                                                                if (saveErr) {
                                                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                                                }
                                                                                                else {
                                                                                                    eventModel.findOneAndUpdate({ _id: addResult._id, eventType: "GAME", clickBy: { $ne: req.body.userId } }, { $addToSet: { clickBy: req.body.userId } }, { new: true }, (advError, advResult) => {

                                                                                                        if (advError) {

                                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error3" })
                                                                                                        }
                                                                                                        else if (!advResult) {
                                                                                                            return res.send({ responseCode: 404, responseMessage: "The video game already clicked" })
                                                                                                        }
                                                                                                        else {
                                                                                                            var obj = new gamePayment({
                                                                                                                transactionId: charge.balance_transaction,
                                                                                                                amount: charge.amount,
                                                                                                                customerId: charge.customer,
                                                                                                                url: charge.receipt_url,
                                                                                                                transactionStatus: charge.status,
                                                                                                                amount_refunded: charge.amount_refunded,
                                                                                                                orderStatus: charge.orderStatus,
                                                                                                                chargeId: charge.chargeId,
                                                                                                                userId: advResult.userId,
                                                                                                                gameId: advResult._id,
                                                                                                                cardDetails: advResult.cardDetails
                                                                                                            })
                                                                                                            obj.save((error4, result4) => {
                                                                                                                if (error4) {
                                                                                                                    res.send({
                                                                                                                        responseCode: 500,
                                                                                                                        responseMessage: "Internal server error", error4
                                                                                                                    })
                                                                                                                } else {
                                                                                                                    res.send({
                                                                                                                        responseCode: 200,
                                                                                                                        responseMessage: "Transaction", result4
                                                                                                                    })
                                                                                                                }
                                                                                                            })
                                                                                                        }
                                                                                                    });
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    })
                                                                                }
                                                                            }
                                                                        })


                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                })

                                            }
                                        })

                                    }
                                })

                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },
    shareGame: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    eventModel.findOne({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" }, (err, classData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                        } else if (!classData) {
                            return res.send({ responseCode: 404, responseMessage: "Game not found" })
                        } else {
                            var object = [{
                                memberId: req.body.memberId,
                                sharedTo: []
                            }]
                            var arr = req.body.sharedTo;
                            arr.forEach(a => {
                                object[0].sharedTo.push({ friendId: a })
                            })
                            listData.friendList.forEach((item, index) => {
                                if (item.friendId != null && item.friendId.fcmToken == null) {
                                    var obj = {
                                        userId: item.friendId,
                                        senderId: req.body.memberId,
                                        title: "Shared Game",
                                        body: `${listData.firstName} shared a game with you`,
                                        senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                        notificationType: "Game shared"
                                    };
                                    new webNotification(obj).save((saveErr, saveResult) => {
                                        if (saveErr) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                        }
                                        else {
                                            eventModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE", eventType: "GAME" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                }
                                                else if (!updateData) {
                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                }
                                                else {
                                                    console.log({ responseCode: 200, responseMessage: "The shared game is updated successfully", updateData })
                                                }
                                            })
                                        }
                                    })
                                }
                                else if (item.friendId != null && item.friendId.fcmToken != null) {
                                    commonFunction.pushNotification(item.friendId.fcmToken, "Shared Game", `${listData.firstName} shared a game with you`, (err, notificationResult) => {
                                        if (err) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                        }
                                        else {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Game",
                                                body: `${listData.firstName} shared a game with you`,
                                                senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                notificationType: "Game shared"
                                            };
                                            new notificationModel(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    eventModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE", eventType: "GAME" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "The shared game is updated successfully", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                    })
                                }
                                else {
                                    console.log({ responseCode: 404, responseMessage: "Data not found" });
                                }
                            })
                            return res.send({ responseCode: 200, responseMessage: "The shared game is updated successfully" })

                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    updateGameVideo: (req, res) => {
        try {
            if (!req.body.userId && !req.body.gameVideo) {

                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        const video1 = await video(req.body.gameVideo)
                        eventModel.findOneAndUpdate({ _id: req.body.gameId, eventType: "GAME" },
                            {
                                $set: { video: video1 }
                            },
                            { new: true },
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game video updated successfully", result: result1 })
                                }
                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewGame: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                if (err) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                } else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    if (req.body.search) {
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                        }
                        eventModel.paginate({ status: "ACTIVE", eventType: "GAME", title: { $regex: req.body.search } },
                            options,
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Game video not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game video found successfully", result: result1 })
                                }
                            })
                    } else {

                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                        }
                        eventModel.paginate({ status: "ACTIVE", eventType: "GAME" },
                            options,
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Game video not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game video found successfully", result: result1 })
                                }
                            })
                    }
                }

            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    myGame: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                if (err) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                } else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    if (req.body.search) {
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                        }
                        eventModel.paginate({ $and: [{ userId: result._id }, { title: { $regex: req.body.search } }, { status: { $ne: "DELETE" } }, { eventType: "GAME" }] },
                            options,
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Game video not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game video found successfully", result: result1 })
                                }
                            })
                    } else {

                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                        }
                        eventModel.paginate({ userId: result._id, status: { $ne: "DELETE" }, eventType: "GAME" },
                            options,
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Game video not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game video found successfully", result: result1 })
                                }
                            })
                    }
                }

            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    gameLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessage: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" }).populate('userId').exec((err, gameResult) => {
                            if (err) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!gameResult) {
                                return res.send({ responseCode: 404, responseMessage: "Game not found" })
                            }
                            else {
                                if (req.body.like == "true") {
                                    eventModel.findOne({
                                        _id: req.body.gameId,
                                        status: "ACTIVE",
                                        eventType: "GAME",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                        } else {
                                            var like = {
                                                likedId: result._id,
                                                userName: `${result.firstName} ${result.lastName}`,
                                                userPic: result.profilePic
                                            };
                                            if (gameResult.userId.fcmToken == null) {
                                                var obj = {
                                                    userId: gameResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Game Liked",
                                                    body: `${result.firstName} liked your game`,
                                                    senderIdMessage: `${result.firstName} liked on ${gameResult.userId.firstName}'s Game`,
                                                    notificationType: "Game liked"
                                                };
                                                new webNotification(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        eventModel.findOneAndUpdate({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" },
                                                            { $push: { likes: like } },
                                                            { new: true },
                                                            (err1, result1) => {
                                                                if (err1) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    const count = result1.likes.length;
                                                                    return res.send({ responseCode: 200, responseMessage: "Event liked successfully", likes: count })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                            else {
                                                commonFunction.pushNotification(gameResult.userId.fcmToken, "Game Liked", `${result.firstName} liked your game`, (err, notificationResult) => {
                                                    if (err) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        var obj = {
                                                            userId: gameResult.userId,
                                                            senderId: req.body.userId,
                                                            title: "Game Liked",
                                                            body: `${result.firstName} liked your game`,
                                                            senderIdMessage: `${result.firstName} liked on ${gameResult.userId.firstName}'s Game`,
                                                            notificationType: "Game liked"
                                                        };
                                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                            }
                                                            else {
                                                                eventModel.findOneAndUpdate({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" },
                                                                    { $push: { likes: like } },
                                                                    { new: true },
                                                                    (err1, result1) => {
                                                                        if (err1) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                        } else {
                                                                            const count = result1.likes.length;
                                                                            return res.send({ responseCode: 200, responseMessage: "Event liked successfully", likes: count })
                                                                        }
                                                                    }
                                                                )
                                                            }
                                                        })
                                                    }
                                                })
                                            }
                                        }
                                    })

                                } else if (req.body.comments == "true") {
                                    var comment = {
                                        commentedUser: result._id,
                                        comment: req.body.comment,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        userPic: result.profilePic,
                                        commentedTime: new Date()
                                    };
                                    if (gameResult.userId.fcmToken == null) {
                                        var obj = {
                                            userId: gameResult.userId,
                                            senderId: req.body.userId,
                                            title: "Game Commented",
                                            body: `${result.firstName} commented on your game`,
                                            senderIdMessage: `${result.firstName} commented on ${gameResult.userId.firstName}' Game`,

                                            notificationType: "Game commented"
                                        };
                                        new webNotification(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                eventModel.findOneAndUpdate({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" },
                                                    { $push: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                    else {
                                        commonFunction.pushNotification(gameResult.userId.fcmToken, "Game Commented", `${result.firstName} commented on your game`, (err, notificationResult) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                var obj = {
                                                    userId: gameResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Game Commented",
                                                    body: `${result.firstName} commented on your game`,
                                                    senderIdMessage: `${result.firstName} commented on ${gameResult.userId.firstName}'s post`,
                                                    notificationType: "Game commented"
                                                };
                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        eventModel.findOneAndUpdate({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" },
                                                            { $push: { comments: comment } },
                                                            { new: true },
                                                            (err2, result2) => {
                                                                if (err2) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                        })
                                    }
                                } else if (req.body.like == "false") {
                                    eventModel.findOne({
                                        _id: req.body.gameId,
                                        status: "ACTIVE",
                                        eventType: "GAME",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));
                                            eventModel.findByIdAndUpdate({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" },
                                                { $pull: { likes: dislike[0] } },
                                                { new: true },
                                                (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                    }

                                                })

                                        }
                                    })
                                } else if (req.body.comments == "false") {
                                    eventModel.findOne({
                                        _id: req.body.gameId,
                                        status: "ACTIVE",
                                        eventType: "GAME",
                                        comments: { $elemMatch: { _id: req.body.commentId } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const deleteComment = _.filter(result3.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                            eventModel.findByIdAndUpdate({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" },
                                                { $pull: { comments: deleteComment[0] } },
                                                { new: true },
                                                (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Comment deleted successfully", result: result4 })
                                                    }
                                                })
                                        }
                                    })
                                }
                            }
                        })

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    editGameComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        eventModel.findOne({ _id: req.body.gameId, status:  "ACTIVE" ,eventType: "GAME"  }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Event not found" })
                            }
                            else {
                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                eventModel.findOneAndUpdate({ 'comments._id': req.body.commentId, status: "ACTIVE", eventType: "GAME"}, { $set: { "comments.$": newComment } }, { new: true }, (err2, result2) => {
                                    if (err2) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result2) {
                                        return res.send({ responseCode: 404, responseMessage: "Comment not found" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Comment edited successfully", result: result2 })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })

        }
    },

    viewGamesLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOne({ _id: req.body.gameId, status: "ACTIVE", eventType: "GAME" }, (err1, result1) => {
                            console.log("Result null=>", result1)
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result) {
                                return res.send({ responseCode: 404, responseMessage: "Event not found" })
                            } else {
                                console.log("Body8547", req.body)
                                if (req.body.show == "comments") {
                                    console.log("result1", result1)
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                  else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;
                                  
                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    hideAndDeleteGame: (req, res) => {
        try {
            if (!req.body.userId && !req.body.gameId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        eventModel.findOneAndUpdate({ _id: req.body.gameId, eventType: "GAME" },
                            {
                                $set: { status: req.body.status }
                            },
                            { new: true },
                            (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game video updated successfully", result: result1 })
                                }
                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    myGameVideo: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        console.log("LLLLLLLLLLLLLLLwwLLLL", err)
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                        }
                        eventModel.paginate({ userId: req.body.userId, status: "ACTIVE", eventType: "GAME" }, options
                            , (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {

                                    return res.send({ responseCode: 404, responseMessage: "Game not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Game found successfully", result: result1 })
                                }
                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

  replyCommentInGameVideo: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    eventModel.findOne({ _id: req.body.gameId, "comments._id": req.body.commentId, status: "ACTIVE", eventType: "GAME" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in game video"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        eventModel.findOneAndUpdate({ _id: req.body.gameId, "comments._id": req.body.commentId, status: "ACTIVE",eventType: "GAME"},
                                            { $push: { replyComments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)

                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment.`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in game video"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                eventModel.findOneAndUpdate({ _id: req.body.gameId, "comments._id": req.body.commentId, status: "ACTIVE",eventType: "GAME"},
                                                    { $push: { replyComments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }

                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    gameLocation: (req, res) => {
        try {
            eventModel.distinct("location", { eventType: "GAME" }, (err, result) => {
                if (err) {
                    globalResponse.commonResponse(res, globalStatusCode.ErrorCode.INTERNAL_SERVER_ERROR, globalMessege.ErrorMessage.INTERNAL_ERROR);
                } else if (result.length == 0) {
                    res.send({ responseCode: 404, responseMessege: "Location not found ", result })
                } else {
                    res.send({ responseCode: 200, responseMessege: "Location found successfully", result })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //----------------------------------------------------------help community------------------------------------------------------------------
    reportQuery: async(req, res) => {
        try {
               const userData=await userModel.findOne({_id:req.body.userId,status:"ACTIVE"})
               if (userData) {
                   var obj={
                       userId:req.body.userId,
                       query:req.body.query
                   }
                   new queryModel(obj).save((saveErr,saveResult)=>{
                       if (saveErr) {
                           return res.send({ responseCode: 500, responseMessage: "Internal server error"})
                       }
                       else{
                           return res.send({ responseCode: 200, responseMessage: "Report successfully added" })
                       }
                   })
               }    
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //---------------------------------------------------------------category Management-------------------------------------------------------------------


    //------------------------------------Buying and selling section-----------------------------
    addAdv: (req, res) => {
        console.log(">>>>>>>>>>>>>>>>>>>>>")
        paymentManagement.findOne((paymentError, paymentResult) => {
            if (paymentError) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error", paymentError })
            }
            else {
                userModel.aggregate([
                    { $match: { _id: mongoose.Types.ObjectId(req.body.userId), status: "ACTIVE" } },
                    { $unwind: "$cardDetails" },
                    { $match: { 'cardDetails._id': mongoose.Types.ObjectId(req.body.cardId) } }
                ], (userError, userData) => {
                    if (userError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (userData.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: "Data not found" })
                    } else {
                        console.log("8980====>", userData[0]._id, userData[0].cardDetails.cvvNumber)
                        var CryptoJS = node_cryptojs.CryptoJS;
                        console.log("8982====>", CryptoJS)
                        var JsonFormatter = node_cryptojs.JsonFormatter;
                        console.log("8984====>", JsonFormatter)
                        var decrypted = CryptoJS.AES.decrypt(userData[0].cardDetails.cvvNumber, req.body.userId, { format: JsonFormatter })
                        console.log("8986====>", decrypted)
                        var cvv = CryptoJS.enc.Utf8.stringify(decrypted);
                        console.log("8985====>", cvv, decrypted, userData[0].cardDetails.cardNumber);

                        if (userData[0].cardDetails.cardNumber != req.body.cardNumber) {
                            res.send({ responseCode: 404, responseMessage: "Invalid card number" })
                        } else if (cvv != req.body.cvvNumber) {
                            res.send({ responseCode: 404, responseMessage: "Invalid cvv number" })
                        } else {

                            if (req.body.video) {
                                commonFunction.multipleImageUploadCloudinary(req.body.video, (error, videoResult) => {
                                    if (error) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                    }
                                    else {
                                        var date = new Date();
                                        date.setDate(date.getDate() + 30);
                                        var dateString = date.toISOString().split('T')[0];
                                        console.log("Break....1")
                                        const adv = new advertisementModel({
                                            userId: req.body.userId,
                                            title: req.body.title,
                                            description: req.body.description,
                                            video: videoResult,
                                            date: new Date().toLocaleString(),
                                            expiryDate: dateString,
                                            userName: userData[0].firstName + " " + userData[0].lastName,
                                            cardDetails: userData[0].cardDetails

                                        })
                                        adv.save((err1, result1) => {
                                            if (error) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                            }
                                            else {
                                                return res.send({ responseCode: 200, responseMessage: "advertisement added sucsessfully" })

                                            }
                                        })
                                    }
                                })
                            }
                            else if (req.body.image) {

                                commonFunction.multipleImageUploadCloudinary(req.body.image, (error, imageData) => {
                                    if (error) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                                    }
                                    else {
                                        var date = new Date();
                                        date.setDate(date.getDate() + 30);
                                        var dateString = date.toISOString().split('T')[0];
                                        const adv = new advertisementModel({
                                            userId: req.body.userId,
                                            title: req.body.title,
                                            description: req.body.description,
                                            image: imageData,
                                            date: new Date().toLocaleString(),
                                            expiryDate: dateString,
                                            userName: userData[0].firstName + " " + userData[0].lastName,
                                            cardDetails: userData[0].cardDetails
                                        })
                                        adv.save((err1, result1) => {
                                            if (err1) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                return res.send({ responseCode: 200, responseMessage: "advertisement added sucsessfully", result1 })

                                            }
                                        })
                                    }
                                })
                            }
                        }
                    }
                })
            }
        })
    },
    activityLogForWeb: (req, res) => {
        if (!req.body.senderId) {
            res.send({ responseCode: 204, responseMessege: "Fields are required" });
        }
        else {
            var query = {};
            if (req.body.senderId) {
                query.senderId = req.body.senderId
            }

            let options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 10,
                sort: {
                    createdAt: -1
                }
            }
            webNotification.paginate(query, options, (error, result) => {
                if (error) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (result.docs.length == 0) {
                    return res.send({ responseCode: 404, responseMessage: "Activity not found" })

                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Activity found successfully", result: result.docs.filter(op => op.senderIdMessage != undefined), total: result.total, limit: result.limit, page: result.page, pages: result.pages })
                }
            })
        }
    },
    notificationForWeb: (req, res) => {
        if (!req.body.userId) {
            res.send({ responseCode: 204, responseMessege: "Fields are required" });
        }
        else {

            var query = {};
            if (req.body.userId) {
                query.userId = req.body.userId
            }

            let options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 10,
                sort: {
                    createdAt: -1
                }
            }
            webNotification.paginate(query, options, (error, result) => {
                if (error) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (result.docs.length == 0) {
                    return res.send({ responseCode: 404, responseMessage: "Notification not found" })

                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Notification found successfully", result })
                }
            })
        }
    },
    notificationForApp: (req, res) => {
        if (!req.body.userId) {
            res.send({ responseCode: 204, responseMessege: "Fields are required" });
        }
        else {
            var query = {};
            if (req.body.userId) {
                query.userId = req.body.userId
            }

            let options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 10,
                sort: {
                    createdAt: -1
                }
            }
            notificationModel.paginate(query, options, (error, result) => {
                if (error) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (result.docs.length == 0) {
                    return res.send({ responseCode: 404, responseMessage: "Notification not found" })

                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Notification found successfully", result })
                }
            })
        }
    },
    deleteNotification: (req, res) => {
        if (req.body.webId) {
            webNotification.deleteOne({ _id: req.body.webId, notificationStatus: "PENDING" }, (updateErr, updateResult) => {
                if (updateErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!updateResult) {
                    return res.send({ responseCode: 404, responseMessage: "Notification not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Notification deleted successfully" })
                }

            })
        }
        else {
            notificationModel.deleteOne({ _id: req.body.appId, notificationStatus: "PENDING" }, (updateErr, updateResult) => {
                if (updateErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!updateResult) {
                    return res.send({ responseCode: 404, responseMessage: "Notification not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Notification deleted successfully" })
                }

            })

        }
    },
    deleteActivity: (req, res) => {
        if (req.body.webId) {
            webNotification.remove({ _id: req.body.webId, activityStatus: "PENDING" }, (updateErr, updateResult) => {
                if (updateErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!updateResult) {
                    return res.send({ responseCode: 404, responseMessage: "Notification not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Notification deleted successfully" })
                }

            })
        }
        else {
            notificationModel.remove({ _id: req.body.appId, activityStatus: "PENDING" }, (updateErr, updateResult) => {
                if (updateErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!updateResult) {
                    return res.send({ responseCode: 404, responseMessage: "Notification not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Notification deleted successfully" })
                }
            })
        }
    },
    activityLogForApp: (req, res) => {
        var query = {};
        if (req.body.senderId) {
            query.senderId = req.body.senderId
        }
        let options = {
            page: req.body.pageNumber || 1,
            limit: req.body.limit || 10,
            sort: {
                createdAt: -1
            }
        }
        notificationModel.paginate(query, options, (error, result) => {
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
            }
            else if (result.docs.length == 0) {
                return res.send({ responseCode: 404, responseMessage: "Activity not found" })

            }
            else {
                return res.send({ responseCode: 200, responseMessage: "Activity found successfully", result: result.docs.filter(op => op.senderIdMessage != undefined), total: result.total, limit: result.limit, page: result.page, pages: result.pages })
            }
        })
    },
    getAllGif: (req, res) => {
        try {
            let query = { status: { $eq: "ACTIVE" } }
            let options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 10,
                sort: {
                    createdAt: -1
                }
            }
            gifModel.paginate(
                query,
                options, (err1, result1) => {
                    if (err1) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (result1.docs.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: " Gif not found" })
                    } else {
                        return res.send({ responseCode: 200, responseMessage: "Gif found successfully", result: result1 })
                    }
                })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    chargeForAdv: (req, res) => {
        try {
            if (!req.body.userId || !req.body.advId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {

                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error1" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        paymentManagement.findOne((mngError, mngResult) => {
                            if (mngError) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error2" })
                            }
                            else if (!mngResult) {
                                return res.send({ responseCode: 404, responseMessage: "Payment not found" })

                            }
                            else {
                                userModel.findOne({ status: "ACTIVE", userType: "ADMIN" }, (adminError, admindata) => {
                                    if (adminError) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error2" })
                                    }
                                    else {
                                        advertisementModel.findOne({ _id: req.body.advId, status: "ACTIVE", expiryDate: { $gte: Date.now() }, clickBy: { $ne: req.body.userId } }).populate('userId').exec((addError, addResult) => {
                                            if (addError) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error2" })
                                            }
                                            else if (!addResult) {
                                                return res.send({ responseCode: 404, responseMessage: "The advertisement already clicked." })
                                            }
                                            else {
                                                var CryptoJS = node_cryptojs.CryptoJS;
                                                var JsonFormatter = node_cryptojs.JsonFormatter;
                                                var decrypted = CryptoJS.AES.decrypt(addResult.cardDetails[0].cvvNumber, "5de9de8867319903a70bd48f", { format: JsonFormatter })

                                                var cardInfo = {
                                                    "number": addResult.cardDetails[0].cardNumber,
                                                    "exp_month": Number(addResult.cardDetails[0].expiryDate.split("/")[1]),
                                                    "exp_year": Number(addResult.cardDetails[0].expiryDate.split("/")[2]),
                                                    "cvc": CryptoJS.enc.Utf8.stringify(decrypted),
                                                    "currency": 'usd'
                                                }
                                                stripe.tokens.create({

                                                    card: cardInfo
                                                }, (error, token) => {
                                                    console.log("524==============>", token)
                                                    if (error) {
                                                        res.send({
                                                            responseCode: 500,
                                                            responseMesssage: "Internal server error",
                                                            error
                                                        })
                                                    } else {

                                                        stripe.customers.create({
                                                            source: token.id,
                                                        }, (error1, customer) => {
                                                            console.log("534==========>", customer)
                                                            if (error1) {
                                                                res.send({
                                                                    responseCode: 500,
                                                                    responseMessage: "Internal server error",
                                                                    error1
                                                                })
                                                            } else {
                                                                stripe.charges.create({
                                                                    amount: mngResult.paymentForAdvertisement*100,
                                                                    currency: "usd",
                                                                    customer: customer.id,
                                                                }, function (error2, charge) {
                                                                    if (error2) {
                                                                        res.send({
                                                                            responseCode: 500,
                                                                            responseMessage: "Internal server error",
                                                                            error2
                                                                        })
                                                                    } else {
                                                                        var obj = {
                                                                            userId: admindata._id,
                                                                            title: "Amount credited",
                                                                            body: `Your account has been credited USD ${charge.amount} by ${addResult.userId.firstName}`,
                                                                            notificationType: "Credited for advertisement"
                                                                        };
                                                                        new webNotification(obj).save((saveErr, saveResult) => {
                                                                            if (saveErr) {
                                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                            }
                                                                            else {
                                                                                if (addResult.userId.fcmToken == null) {
                                                                                    var obj2 = {
                                                                                        userId: addResult.userId,
                                                                                        title: "Amount debited",
                                                                                        body: `Your account has been debited USD ${charge.amount} as your advertisement have been viewed by someone`,
                                                                                        notificationType: "Debited for advertisement"
                                                                                    };
                                                                                    new webNotification(obj2).save((saveErr, saveResult) => {
                                                                                        if (saveErr) {
                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                                        }
                                                                                        else {
                                                                                            advertisementModel.findOneAndUpdate({ _id: addResult._id, clickBy: { $ne: req.body.userId } }, { $addToSet: { clickBy: req.body.userId } }, { new: true }, (advError, advResult) => {
                                                                                                if (advError) {

                                                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error3" })
                                                                                                }
                                                                                                else if (!advResult) {
                                                                                                    return res.send({ responseCode: 404, responseMessage: "The advertisement already clicked." })
                                                                                                }
                                                                                                else {
                                                                                                    var obj = new advPayment({
                                                                                                        transactionId: charge.balance_transaction,
                                                                                                        amount: charge.amount,
                                                                                                        customerId: charge.customer,
                                                                                                        url: charge.receipt_url,
                                                                                                        transactionStatus: charge.status,
                                                                                                        amount_refunded: charge.amount_refunded,
                                                                                                        orderStatus: charge.orderStatus,
                                                                                                        chargeId: charge.chargeId,
                                                                                                        userId: advResult.userId,
                                                                                                        advId: advResult._id,
                                                                                                        cardDetails: advResult.cardDetails
                                                                                                    })
                                                                                                    obj.save((error4, result4) => {
                                                                                                        if (error4) {
                                                                                                            res.send({
                                                                                                                responseCode: 500,
                                                                                                                responseMessage: "Internal server error", error4
                                                                                                            })
                                                                                                        } else {
                                                                                                            res.send({
                                                                                                                responseCode: 200,
                                                                                                                responseMessage: "Transaction", result4
                                                                                                            })
                                                                                                        }
                                                                                                    })
                                                                                                }
                                                                                            });
                                                                                        }
                                                                                    })
                                                                                }
                                                                                else {
                                                                                    commonFunction.pushNotification(addResult.userId.fcmToken, "Amount debited", `Your account has been debited USD ${charge.amount} as your post has been clicked by ${userData.firstName}`, (err, notificationResult) => {
                                                                                        if (err) {
                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                                        }
                                                                                        else {
                                                                                            var obj2 = {
                                                                                                userId: addResult.userId,
                                                                                                title: "Amount debited",
                                                                                                body: `Your account has been debited USD ${charge.amount} as your advertisement have been viewed by someone`,
                                                                                                notificationType: "Debited for advertisement"
                                                                                            };
                                                                                            new notificationModel(obj2).save((saveErr, saveResult) => {
                                                                                                if (saveErr) {
                                                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                                                }
                                                                                                else {
                                                                                                    advertisementModel.findOneAndUpdate({ _id: addResult._id, clickBy: { $ne: req.body.userId } }, { $addToSet: { clickBy: req.body.userId } }, { new: true }, (advError, advResult) => {
                                                                                                        if (advError) {

                                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error3" })
                                                                                                        }
                                                                                                        else if (!advResult) {
                                                                                                            return res.send({ responseCode: 404, responseMessage: "The advertisement already clicked." })
                                                                                                        }
                                                                                                        else {
                                                                                                            var obj = new advPayment({
                                                                                                                transactionId: charge.balance_transaction,
                                                                                                                amount: charge.amount,
                                                                                                                customerId: charge.customer,
                                                                                                                url: charge.receipt_url,
                                                                                                                transactionStatus: charge.status,
                                                                                                                amount_refunded: charge.amount_refunded,
                                                                                                                orderStatus: charge.orderStatus,
                                                                                                                chargeId: charge.chargeId,
                                                                                                                userId: advResult.userId,
                                                                                                                advId: advResult._id,
                                                                                                                cardDetails: advResult.cardDetails
                                                                                                            })
                                                                                                            obj.save((error4, result4) => {
                                                                                                                if (error4) {
                                                                                                                    res.send({
                                                                                                                        responseCode: 500,
                                                                                                                        responseMessage: "Internal server error", error4
                                                                                                                    })
                                                                                                                } else {
                                                                                                                    res.send({
                                                                                                                        responseCode: 200,
                                                                                                                        responseMessage: "Transaction", result4
                                                                                                                    })
                                                                                                                }
                                                                                                            })
                                                                                                        }
                                                                                                    });
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    })
                                                                                }
                                                                            }
                                                                        })


                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                })

                                            }
                                        })

                                    }
                                })

                            }
                        })
                    }
                })
            }


        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },
    shareAdvPost: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    advertisementModel.findOne({ _id: req.body.advId, status: "ACTIVE" }, (err, classData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                        } else if (!classData) {
                            return res.send({ responseCode: 404, responseMessage: "class not found" })
                        } else {
                            var object = [{
                                memberId: req.body.memberId,
                                sharedTo: []
                            }]
                            var arr = req.body.sharedTo;
                            arr.forEach(a => {
                                object[0].sharedTo.push({ friendId: a })
                            })
                            listData.friendList.forEach((item, index) => {
                                if (item.friendId != null && item.friendId.fcmToken == null) {
                                    var obj = {
                                        userId: item.friendId,
                                        senderId: req.body.memberId,
                                        title: "Shared Post",
                                        body: `${listData.firstName} shared a post with you`,
                                        senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                        notificationType: "Post shared of advertisement"
                                    };
                                    new webNotification(obj).save((saveErr, saveResult) => {
                                        if (saveErr) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                        }
                                        else {
                                            advertisementModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                }
                                                else if (!updateData) {
                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                }
                                                else {
                                                    console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                }
                                            })
                                        }
                                    })
                                }
                                else if (item.friendId != null && item.friendId.fcmToken != null) {
                                    commonFunction.pushNotification(item.friendId.fcmToken, "Shared Post", `${listData.firstName} shared a post with you`, (err, notificationResult) => {
                                        if (err) {
                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                        }
                                        else {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Post",
                                                body: `${listData.firstName} shared a post with you`,
                                                notificationType: "Post shared of advertisement"
                                            };
                                            new notificationModel(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    advertisementModel.findOneAndUpdate({ _id: classData._id, status: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                    })
                                }
                                else {
                                    console.log({ responseCode: 404, responseMessage: "Data not found" });
                                }
                            })
                            return res.send({ responseCode: 200, responseMessage: "Advertisement successfully shared" })
                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    hideAndDeleteAdv: (req, res) => {
        try {
            if (!req.body.userId && !req.body.advId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.type == "HIDE") {
                            advertisementModel.findOneAndUpdate({ _id: req.body.advId, userId: result._id, status: "ACTIVE" },
                                {
                                    $set: { status: "HIDE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Advertisement hide successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "DELETE") {
                            advertisementModel.findOneAndUpdate({ _id: req.body.advId, userId: result._id, status: "ACTIVE" },
                                {
                                    $set: { status: "DELETE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 404, responseMessage: "Advertisement not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Advertisement deleted successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "ARCHIVE") {
                            advertisementModel.findOneAndUpdate({ _id: req.body.advId, userId: result._id, status: "ACTIVE" },
                                {
                                    $set: { status: "ARCHIVE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 404, responseMessage: "Advertisement not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Advertisement archive successfully", result: result1 })
                                    }
                                })
                        }
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    viewMyPostAdv: (req, res) => {
        try {
            var query = { status: { $eq: "ACTIVE" } }
            if (req.body.userId) {
                query.userId = req.body.userId
            }
            var options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 10,
                sort: {
                    createdAt: -1
                },
            }
            if (req.body.search) {
                query.$and = [{ title: { $regex: "^" + req.body.search, $options: 'i' } }, { status: { $eq: "ACTIVE" } }]
            }
            advertisementModel.paginate(query, options, (error, advData) => {
                if (error) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (advData.docs.length == 0) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Data found", advData })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    advlikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessage: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        advertisementModel.findOne({ _id: req.body.advId, status: "ACTIVE" }).populate('userId').exec((err, advertiseResult) => {
                            if (err) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!advertiseResult) {
                                return res.send({ responseCode: 404, responseMessage: "Advertisement not found" })
                            }
                            else {
                                if (req.body.like == "true") {
                                    advertisementModel.findOne({
                                        _id: req.body.advId,
                                        status: "ACTIVE",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                        } else {
                                            var like = {
                                                likedId: result._id,
                                                userName: `${result.firstName} ${result.lastName}`,
                                                userPic: result.profilePic
                                            };
                                            if (advertiseResult.userId.fcmToken == null) {
                                                var obj = {
                                                    userId: advertiseResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Advertisement Liked",
                                                    body: `${result.firstName} liked your advertisement`,
                                                    senderIdMessage: `${result.firstName} liked on ${advertiseResult.userId.firstName}' Advertisement`,
                                                    notificationType: "Advertisement liked"
                                                };
                                                new webNotification(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        advertisementModel.findOneAndUpdate({ _id: req.body.advId, status: "ACTIVE" },
                                                            { $push: { likes: like } },
                                                            { new: true },
                                                            (err1, result1) => {
                                                                if (err1) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else if (!result1) {
                                                                    return res.send({ responseCode: 400, responseMessage: "Advertisement not found" })
                                                                }
                                                                else {
                                                                    const count = result1.likes;
                                                                    return res.send({ responseCode: 200, responseMessage: "Advertisement liked successfully", likes: count })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })

                                            }
                                            else {
                                                commonFunction.pushNotification(advertiseResult.userId.fcmToken, "Advertisement Liked", `${result.firstName} liked your advertisement`, (err, notificationResult) => {
                                                    if (err) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        var obj = {
                                                            userId: advertiseResult.userId,
                                                            senderId: req.body.userId,
                                                            title: "Advertisement Liked",
                                                            body: `${result.firstName} liked your advertisement`,
                                                            senderIdMessage: `${result.firstName} liked on ${advertiseResult.userId.firstName}' Advertisement`,
                                                            notificationType: "Advertisement liked"
                                                        };
                                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                            }
                                                            else {
                                                                advertisementModel.findOneAndUpdate({ _id: req.body.advId, status: "ACTIVE" },
                                                                    { $push: { likes: like } },
                                                                    { new: true },
                                                                    (err1, result1) => {
                                                                        if (err1) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                        } else if (!result1) {
                                                                            return res.send({ responseCode: 400, responseMessage: "Advertisement not found" })
                                                                        }
                                                                        else {
                                                                            const count = result1.likes;
                                                                            return res.send({ responseCode: 200, responseMessage: "Advertisement liked successfully", likes: count })
                                                                        }
                                                                    }
                                                                )
                                                            }
                                                        })
                                                    }
                                                })
                                            }
                                        }
                                    })

                                } else if (req.body.comments == "true") {
                                    var comment = {
                                        commentedUser: result._id,
                                        comment: req.body.comment,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        userPic: result.profilePic,
                                        commentedTime: new Date()
                                    };
                                    if (advertiseResult.userId.fcmToken == null) {
                                        var obj = {
                                            userId: advertiseResult.userId,
                                            senderId: req.body.userId,
                                            title: "Advertisement Commented",
                                            body: `${result.firstName} commented on your advertisement`,
                                            senderIdMessage: `${result.firstName} commented on ${advertiseResult.userId.firstName}' Advertisement`,

                                            notificationType: "Advertisement commented"
                                        };
                                        new webNotification(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                advertisementModel.findOneAndUpdate({ _id: req.body.advId, status: "ACTIVE" },
                                                    { $push: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                    else {
                                        commonFunction.pushNotification(advertiseResult.userId.fcmToken, "Advertisement Commented", `${result.firstName} commented on your advertisement`, (err, notificationResult) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                var obj = {
                                                    userId: advertiseResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Advertisement Commented",
                                                    body: `${result.firstName} commented on your advertisement`,
                                                    senderIdMessage: `${result.firstName} commented on ${advertiseResult.userId.firstName}' Advertisement`,
                                                    notificationType: "Advertisement commented"
                                                };
                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        advertisementModel.findOneAndUpdate({ _id: req.body.advId, status: "ACTIVE" },
                                                            { $push: { comments: comment } },
                                                            { new: true },
                                                            (err2, result2) => {
                                                                if (err2) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                        })
                                    }

                                } else if (req.body.like == "false") {
                                    advertisementModel.findOne({
                                        _id: req.body.advId,
                                        status: "ACTIVE",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error11", err3 })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));
                                            console.log("9167==>", dislike)

                                            advertisementModel.findByIdAndUpdate({ _id: req.body.advId, status: "ACTIVE" },
                                                { $pull: { likes: dislike[0] } },
                                                { new: true },
                                                (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error", err4 })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                    }
                                                })
                                        }
                                    })

                                } else if (req.body.comments == "false") {
                                    advertisementModel.findOne({
                                        _id: req.body.advId,
                                        status: "ACTIVE",

                                        comments: { $elemMatch: { _id: req.body.commentId } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                        } else {
                                            const deleteComment = _.filter(result3.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                            console.log("lllllllllllllll", deleteComment)
                                            advertisementModel.findByIdAndUpdate({ _id: req.body.advId, status: "ACTIVE" },
                                                { $pull: { comments: deleteComment[0] } },
                                                { new: true },
                                                (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Comment deleted successfully", result: result4 })
                                                    }
                                                })
                                        }
                                    })
                                }
                            }
                        })

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    editAdvComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        advertisementModel.findOne({ _id: req.body.advId, status: "ACTIVE"}, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Advertisement not found" })
                            }
                            else {
                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                advertisementModel.findOneAndUpdate({ 'comments._id': req.body.commentId, status: "ACTIVE" }, { $set: { "comments.$": newComment } }, { new: true }, (err2, result2) => {
                                    if (err2) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result2) {
                                        return res.send({ responseCode: 404, responseMessage: "Comment not found" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Comment edited successfully", result: result2 })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })

        }
    },

    replyCommentInAdv: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    advertisementModel.findOne({ _id: req.body.advId, "comments._id": req.body.commentId, status: "ACTIVE" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in advertisement"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        advertisementModel.findOneAndUpdate({ _id: req.body.advId, "comments._id": req.body.commentId, status: "ACTIVE" },
                                            { $push: { replyComments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)

                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment.`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in discussion forum"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                advertisementModel.findOneAndUpdate({ _id: req.body.advId, "comments._id": req.body.commentId, status: "ACTIVE" },
                                                    { $push: { replyComments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }

                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewAdvLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        advertisementModel.findOne({ _id: req.body.advId, status: "ACTIVE"}, (err1, result1) => {
                            console.log("Result null=>", result1)
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result) {
                                return res.send({ responseCode: 404, responseMessage: "Advertisement not found" })
                            } else {
                                console.log("Body8547", req.body)
                                if (req.body.show == "comments") {
                                    console.log("result1", result1)
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;

                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //---------------------------------------------------------------category Management-------------------------------------------------------------------

    addCountries: (req, res) => {
        try {
            var request = [];
            request = req.body.countries;

            request.forEach(a => {
                new countryModel(a).save((err, save) => {
                    console.log("The country.....", save)
                })
            })
            return res.send({ responseCode: 200, responseMessage: "Data added successfully" })

        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    getAllCountries: (req, res) => {
        countryModel.find({ status: "ACTIVE" }).sort({ "country": +1 }).select("country").exec((error, result) => {
            console.log("8921====>", error, result)
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
            }
            else if (result.length == 0) {
                return res.send({ responseCode: 500, responseMessage: "Country not found" })
            }
            else {

                return res.send({ responseCode: 200, responseMessage: "Country found successfully", result })
            }
        })
    },
    getStateCountriesWise: (req, res) => {
        countryModel.findOne({ "_id": req.body.countryId }).select("states").exec((error, result) => {
            console.log("8936=====>", error, result)
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
            }
            else if (!result) {
                return res.send({ responseCode: 500, responseMessage: "State not found" })
            }
            else {
                return res.send({ responseCode: 200, responseMessage: "State found successfully", result })
            }
        })
    },
    addProduct: (req, res) => {
        try {
            if (!req.body.userId || !req.body.categoryId || !req.body.subCategoryId) {
                return res.send({ responseCode: 400, responseMessage: "Parameter missing" })
            }
            else {
                userModel.aggregate([
                    { $match: { _id: mongoose.Types.ObjectId(req.body.userId), status: "ACTIVE" } },
                    { $unwind: "$cardDetails" },
                    { $match: { 'cardDetails._id': mongoose.Types.ObjectId(req.body.cardId) } }
                ], (error, userData) => {
                    console.log("8994=====>", error, userData)
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (userData.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: "Data not found" })
                    } else {
                        categoryModel.findOne({ _id: req.body.categoryId, status: "ACTIVE", categoryType: "CATEGORY" }, (error, categoryData) => {
                            if (error) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!categoryData) {
                                return res.send({ responseCode: 404, responseMessage: "Category not found" })
                            }
                            else {
                                categoryModel.findOne({ _id: req.body.subCategoryId, status: "ACTIVE", categoryType: "SUBCATEGORY" }, (error, subCatData) => {
                                    if (error) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (!subCatData) {
                                        return res.send({ responseCode: 404, responseMessage: "SubCategory not found" })
                                    }
                                    else {
                                        userModel.findOne({ userType: "ADMIN", status: "ACTIVE" }, (err, adminData) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else if (!adminData) {
                                                return res.send({ responseCode: 404, responseMessage: "Admin not found" })
                                            }
                                            else {
                                                commonFunction.multipleImageUploadCloudinary(req.body.productImages, (error, multiImageData) => {
                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else {
                                                        var imageArray = [];
                                                        multiImageData.forEach(a => imageArray.push({ image: a }));
                                                        let obj = new productModel({
                                                            "userId": userData[0]._id,
                                                            "categoryId": categoryData._id,
                                                            "subCategoryId": subCatData._id,
                                                            "productImages": imageArray,
                                                            "productName": req.body.productName,
                                                            "description": req.body.description,
                                                            "productCost": req.body.productCost,
                                                            "categoryName": categoryData.categoryName,
                                                            "subCategoryName": subCatData.subCategoryName,
                                                            "sellerName": userData[0].firstName,
                                                            "address": req.body.address,
                                                            "counrty": req.body.country,
                                                            "state": req.body.state,
                                                            "location": req.body.location,
                                                            "quantity": req.body.productSize ? req.body.quantity = req.body.productSize.reduce((total, item) => total + item.quantity, 0) : req.body.quantity,
                                                            "cardDetails": userData[0].cardDetails,
                                                            "productSize": req.body.productSize
                                                        })
                                                        var obj3 = {
                                                            userId: adminData._id,
                                                            title: "New Product posted",
                                                            body: `${userData[0].firstName} Posted new product ${req.body.productName}`,
                                                            notificationType: "Post Product"

                                                        };
                                                        new webNotification(obj3).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                                            }
                                                            else {
                                                                if (userData[0].fcmToken == null) {

                                                                    let body = `Dear ${userData[0].firstName}, Your have successfully posted to this product<br>
                                                                  See from this link:<a href=${global.gConfig.productURL}> click <a>`

                                                                    commonFunction.emailSender(userData[0].email, "Congratulation! you have successfully posted to this product", body, (emailError, emailData) => {
                                                                        if (emailError) {
                                                                            res.send({ responseCode: 500, responseMessage: "Internal server error", emailError })
                                                                        }
                                                                        else {
                                                                            var obj2 = {
                                                                                userId: userData[0]._id,
                                                                                title: "Product posted",
                                                                                body: `Dear ${userData[0].firstName} you have successfully posted this product`,
                                                                                notificationType: "Post Product"
                                                                            };
                                                                            new webNotification(obj2).save((saveErr, saveResult) => {
                                                                                if (saveErr) {
                                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                                                                }
                                                                                else {
                                                                                    obj.save((error, productData) => {
                                                                                        if (error) {
                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                                                                        }
                                                                                        else {
                                                                                            return res.send({ responseCode: 200, responseMessage: "Product posted successfully", productData })
                                                                                        }
                                                                                    })
                                                                                }
                                                                            })
                                                                        }
                                                                    })
                                                                }
                                                                else {
                                                                    commonFunction.pushNotification(userData[0].fcmToken, "Product posted", "Congratulation! you have successfully posted to this product", (err, notificationResult) => {
                                                                        if (err) {
                                                                            res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                                                        }
                                                                        else {
                                                                            var obj2 = {
                                                                                userId: userData[0]._id,
                                                                                title: "Product posted",
                                                                                body: "Congratulation! you have successfully posted to this product", notificationType: "Post Product"
                                                                            };
                                                                            new notificationModel(obj2).save((saveErr, saveResult) => {
                                                                                if (saveErr) {
                                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" });
                                                                                }
                                                                                else {
                                                                                    obj.save((error, productData) => {
                                                                                        if (error) {
                                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error111", error })
                                                                                        }
                                                                                        else {
                                                                                            return res.send({ responseCode: 200, responseMessage: "Product posted successfully", productData })
                                                                                        }
                                                                                    })
                                                                                }
                                                                            })
                                                                        }
                                                                    })
                                                                }
                                                            }
                                                        })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                })
                            }
                        })

                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },

    addAddress: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: "500", responseMessage: "Internal server error" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: "404", responseMessage: "User not found" })
                    }
                    else {
                        let obj = {
                            "name": req.body.name,
                            "contactNumber": req.body.contactNumber,
                            "addressDetail": req.body.addressDetail,
                            "city": req.body.city,
                            "pinCode": req.body.pinCode,
                            "landMark": req.body.landMark,
                            "alternatePhoneNumber": req.body.alternatePhoneNumber,
                            "userId": req.body.userId,
                            "addressType": req.body.addressType
                        }
                        userModel.findOneAndUpdate({ _id: req.body.userId, status: "ACTIVE" }, { $push: { personalDetail: obj } }, { new: true }, (error, addressData) => {
                            if (error) {
                                return res.send({ responseCode: "500", responseMessage: "Internal server error" })
                            }
                            else if (!addressData) {
                                return res.send({ responseCode: "404", responseMessage: "User not found" })
                            }
                            else {
                                let obj = {
                                    personalDetail: addressData.personalDetail
                                }
                                return res.send({ responseCode: "200", responseMessage: "Address added successfully", obj })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },
    editAddress: (req, res) => {
        if (!req.body.userId) {
            return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
        }
        else {
            try {
                let obj = {}
                if (req.body.name) {
                    obj['personalDetail.$.name'] = req.body.name
                }
                if (req.body.phoneNumber) {
                    obj['personalDetail.$.phoneNumber'] = req.body.phoneNumber
                }
                if (req.body.addressDetail) {
                    obj['personalDetail.$.address'] = req.body.addressDetail

                } if (req.body.pinCode) {
                    obj['personalDetail.$.pinCode'] = req.body.pinCode

                } if (req.body.city) {
                    obj['personalDetail.$.city'] = req.body.city

                } if (req.body.landMark) {
                    obj['personalDetail.$.landMark'] = req.body.landMark

                } if (req.body.alternatePhoneNumber) {
                    obj['personalDetail.$.alternatePhoneNumber'] = req.body.alternatePhoneNumber
                }
                if (req.body.addressType == true) {
                    obj['personalDetail.$.addressType'] = req.body.addressType
                }
                if (req.body.addressType == false) {
                    obj['personalDetail.$.addressType'] = req.body.addressType
                }

                userModel.findOneAndUpdate({ '_id': req.body.userId, 'personalDetail._id': req.body.personalId, status: "ACTIVE" }, { $set: obj }, { new: true }, (error, addressData) => {
                    if (error) {
                        res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                    } else if (!addressData) {
                        res.send({ respononseCode: 404, responseMessage: "Data not found" })
                    } else {
                        let obj = {
                            personalDetail: addressData.personalDetail
                        }
                        res.send({ responseCode: 200, responseMessage: "address changed successfully", obj })
                    }
                })
            }
            catch (error) {
                return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
            }
        }
    },
    getAddress: (req, res) => {
        userModel.findOne({ "_id": req.body.userId }, (error, result) => {
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
            }
            else if (!result) {
                return res.send({ responseCode: 404, responseMessage: "Address not found" })
            }
            else {
                var data = {
                    address: result.personalDetail
                };
                return res.send({ responseCode: 200, responseMessage: "Address found successfully", data })
            }
        })
    },

    addImages: (req, res) => {
        try {
            if (!req.body.userId || !req.body.productId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        commonFunction.multipleImageUploadCloudinary(req.body.images, (error, imageData) => {
                            console.log(">>>>>>>>>>>969", error, imageData)
                            if (error) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else {
                                productModel.findOneAndUpdate({ _id: req.body.productId, status: "ACTIVE" }, { $push: { productImages: imageData } }, { new: true }, (error, productData) => {
                                    if (error) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!productData) {
                                        return res.send({ responseCode: 404, responseMessage: "Product not found" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Images uploaded", productData })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },

    getBannerImage: (req, res) => {
        let query = { status: { $eq: "ACTIVE" } };
        let options = {
            page: req.body.pageNumber || 1,
            limit: req.body.limit || 5,
            sort: { createdAt: -1 }
        }

        bannerModel.paginate(query, options, (bannerError, bannerResult) => {
            if (bannerError) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
            } else if (bannerResult.docs.length == 0) {
                return res.send({ responseCode: 404, responseMessage: "Banner not found" })
            }
            else {
                return res.send({ responseCode: 200, responseMessage: "Banner image found successfully", bannerResult })
            }
        })
    },
    shopByCategory: (req, res) => {
        try {
            if (req.body.categoryId && req.body.searchByProduct) {
                let query = {};
                if (req.body.searchByProduct) {
                    query.productName = new RegExp('^' + req.body.searchByProduct, "i"),
                        query.categoryId = req.body.categoryId,
                        query.status = "ACTIVE"
                }
                let options = {
                    page: req.body.pageNumber || 1,
                    limit: req.body.limit || 10,
                    sort: { createdAt: -1 }
                }

                productModel.paginate(query, options, (videoError, videoData) => {
                    if (videoError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (videoData.docs.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: "Product not found" })
                    }
                    else {
                        return res.send({ responseCode: 200, responseMessage: "Product found successfully", videoData })
                    }
                })
            }

            else if (req.body.serachByCategory) {
                let query = {};
                if (req.body.serachByCategory) {
                    query.categoryName = new RegExp('^' + req.body.serachByCategory, "i"),
                        query.status = "ACTIVE",
                        query.categoryType = "CATEGORY"

                }
                let options = {
                    page: req.body.pageNumber || 1,
                    limit: req.body.limit || 10,
                    sort: { createdAt: -1 }
                }

                categoryModel.paginate(query, options, (categoryError, categoryData) => {
                    if (categoryError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", categoryError })
                    } else if (categoryData.docs.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: "Category not found" })
                    } else {
                        return res.send({ responseCode: 200, responseMessage: "Category found successfully", result: categoryData })
                    }
                })
            }
            else if (req.body.serachByProduct) {
                var query = { $and: [{ status: { $ne: "DELETE" } }, { productName: { $regex: req.body.serachByProduct, $options: 'i' } }] }
                let options = {
                    page: req.body.pageNumber || 1,
                    limit: req.body.limit || 7,
                    sort: { createdAt: -1 }
                }
                productModel.paginate(query, options, (categoryError, categoryData) => {
                    if (categoryError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", categoryError })
                    } else if (categoryData.docs.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: "product not found" })
                    } else {
                        return res.send({ responseCode: 200, responseMessage: "product found successfully", result: categoryData })
                    }
                })
            }
            else if (req.body.subCategoryId && req.body.searchByProduct) {
                let query = {};
                if (req.body.searchByProduct) {
                    query.productName = new RegExp('^' + req.body.searchByProduct, "i");
                    query.subCategoryId = req.body.subCategoryId,
                        query.status = "ACTIVE"
                }
                let options = {
                    page: req.body.pageNumber || 1,
                    limit: req.body.limit || 20,
                    sort: { createdAt: -1 }
                }
                productModel.paginate(query, options, (categoryError, categoryData) => {
                    if (categoryError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", categoryError })
                    } else if (categoryData.docs.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: " product not found" })
                    } else {
                        return res.send({ responseCode: 200, responseMessage: "product found successfully", result: categoryData })
                    }
                })
            }
            else if (req.body.categoryId && !req.body.subCategoryId) {
                let query = { categoryId: req.body.categoryId, status: "ACTIVE" };

                categoryModel.find(query, (categoryError, categoryData) => {
                    if (categoryError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", categoryError })
                    } else if (categoryData.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: " SubCategory not found" })
                    } else {
                        return res.send({ responseCode: 200, responseMessage: "SubCategory found successfully", result: categoryData })
                    }
                })
            }
            else if (req.body.categoryId && req.body.subCategoryId) {
                var query = {
                    $and: [
                        {
                            categoryId: req.body.categoryId,
                        },
                        {
                            subCategoryId: req.body.subCategoryId,
                        }]
                };

                productModel.find(query, (categoryError, categoryData) => {
                    if (categoryError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", categoryError })
                    } else if (categoryData.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: "Product not found" })
                    } else {
                        return res.send({ responseCode: 200, responseMessage: "Product found successfully", result: categoryData })
                    }
                })
            }
            else {
                let query = { categoryType: { $eq: "CATEGORY" } };
                query.categoryType = "CATEGORY"
                categoryModel.find(query, (categoryError, categoryData) => {
                    if (categoryError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", categoryError })
                    } else if (categoryData.length == 0) {
                        return res.send({ responseCode: 404, responseMessage: " Category not found" })
                    } else {
                        return res.send({ responseCode: 200, responseMessage: "Category found successfully", result: categoryData })
                    }
                })
            }
        } catch (error) {
            console.log("529=====>", error)
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    popularCategory: (req, res) => {
        let query = {
            $and: [{ status: { $eq: "ACTIVE" } }, { categoryType: "CATEGORY" }]
        }
        if (req.body.serach) {
            query.categoryName = new RegExp('^' + req.body.serach, "i"),
                query.status = "ACTIVE",
                query.categoryType = "CATEGORY"

        }
        let options = {
            page: req.body.pageNumber || 1,
            limit: req.body.limit || 5,
            sort: { createdAt: -1 }
        }

        categoryModel.paginate(query, options, (categoryError, categoryData) => {
            if (categoryError) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error", categoryError })
            } else if (categoryData.docs.length == 0) {
                return res.send({ responseCode: 404, responseMessage: "Category not found" })
            } else {
                return res.send({ responseCode: 200, responseMessage: "Category found successfully", result: categoryData })
            }
        })

    },
    popularProduct: (req, res) => {
        let query = { status: { $eq: "ACTIVE" } };
        if (req.body.serach) {
            query.productName = new RegExp('^' + req.body.serach, "i"),
                query.status = "ACTIVE"

        }
        let options = {
            page: req.body.pageNumber || 1,
            limit: req.body.limit || 6,
            sort: { createdAt: -1 }
        }
        productModel.paginate(query, options, (productError, productData) => {
            if (productError) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error", productError })
            } else if (productData.docs.length == 0) {
                return res.send({ responseCode: 404, responseMessage: "product not found" })
            } else {
                return res.send({ responseCode: 200, responseMessage: "product found successfully", result: productData })
            }
        })
    },
    shopByProduct: (req, res) => {
        if (!req.body.userId) {
            return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
        }
        else {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                if (error) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!userData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    if (req.body.productId) {

                        productModel.findOne({ _id: req.body.productId }, (productError, productData) => {

                            if (productError) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!productData) {
                                return res.send({ responseCode: 404, responseMessage: "Product not found" })
                            }
                            else {
                                return res.send({ responseCode: 200, responseMessage: "Product Data found successfully", productData })
                            }
                        })
                    }
                    else if (req.body.search) {
                        let query = { status: "ACTIVE" };
                        query.$or = [
                            { productName: new RegExp('^' + req.body.search, "i") },
                            { categoryName: new RegExp('^' + req.body.search, "i") },
                            { subCategoryName: new RegExp('^' + req.body.search, "i") }
                        ]
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: {
                                createdAt: -1
                            }
                        }
                        productModel.paginate(query, options, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (result1.docs.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: "Product not found" })
                            } else {
                                return res.send({ responseCode: 200, responseMessage: "Product found successfully", result: result1 })
                            }
                        })
                    }
                    else {
                        productModel.find({ status: "ACTIVE" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (result1.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: " Product not found" })
                            } else {
                                return res.send({ responseCode: 200, responseMessage: "Product found successfully", result: result1 })
                            }
                        })
                    }
                }
            })
        }
    },
    shopBySubCategory: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        if (req.body.search) {
                            let query = {
                                $and: [{ status: { $ne: "DELETE" } }, { categoryType: "SUBCATEGORY" }, { subCategoryName: { $regex: req.body.search, $options: 'i' } }]
                            }
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                }
                            }
                            categoryModel.paginate(query, options, (err1, subCategoryData) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (subCategoryData.docs.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "Subcategory not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "SubCategory found successfully", result: subCategoryData })
                                }
                            })
                        }
                        else {
                            let query = {
                                $and: [{ categoryType: "SUBCATEGORY" }, { status: "ACTIVE" }]
                            }
                            let options = {
                                page: req.body.pageNumber || 1,
                                limit: req.body.limit || 5,
                                sort: {
                                    createdAt: -1
                                },
                            }
                            categoryModel.paginate(query, options, (error, subCategoryData) => {
                                console.log(">>>>>>>>087", error, subCategoryData)
                                if (error) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                }
                                else if (subCategoryData.docs.length == 0) {
                                    return res.send({ responseCode: 404, responseMessage: "SubCategory not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "SubCategory found successfully", result: subCategoryData })
                                }
                            })
                        }
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })

        }
    },

    filterInProduct: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, userData) => {
                    if (userError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else {
                        let query = {};
                        if (req.body.maxPrice && req.body.minPrice) {
                            query.$and = [{
                                productCost: { $lte: req.body.maxPrice }
                            },
                            {
                                productCost: { $gte: req.body.minPrice }
                            }]
                        }
                        if (req.body.search) {
                            query.$or = [
                                { categoryName: new RegExp('^' + req.body.search, "i") },
                                { location: new RegExp('^' + req.body.search, "i") },

                            ]
                        }
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 10,
                            sort: { createdAt: -1 }
                        }
                        productModel.paginate(query, options, (productError, productData) => {
                            if (productError) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error", productError })
                            }
                            else if (productData.docs.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: "Product data not found" })
                            }
                            else {
                                return res.send({ responseCode: 200, responseMessage: "Product Data found successfully", productData })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Error in catch" })
        }
    },
    viewProductInformation: (req, res) => {
        try {
            if (!req.body.userId || !req.body.productId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        if (req.body.productName) {
                            productModel.findOne({ _id: req.body.productId, status: "ACTIVE" }).populate({ path: "_id", select: "productImages" }).exec((error, productData) => {
                                if (error) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                }
                                else if (!productData) {
                                    return res.send({ responseCode: 404, responseMessage: "Product not found" })
                                }
                                else {
                                    let obj = {
                                        productId: productData._id
                                    }
                                    return res.send({ responseCode: 200, responseMessage: "Images found", obj })
                                }
                            })
                        }
                        else {
                            productModel.findOne({ _id: req.body.productId, status: "ACTIVE" }).populate({ path: "_id", select: "productName image address productPrice description" }).exec((error, productData) => {
                                if (error) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                }
                                else if (!productData) {
                                    return res.send({ responseCode: 404, responseMessage: "Product not found" })
                                }
                                else {
                                    var obj = {
                                        "productId": productData._id
                                    }
                                    return res.send({ responseCode: 200, responseMessage: "Product information found", obj })
                                }
                            })
                        }
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })

        }
    },
    itemReport: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        productModel.findOne({ _id: req.body.productId, status: "ACTIVE" }, (error, productData) => {
                            if (error) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!productData) {
                                return res.send({ responseCode: 404, responseMessage: "Product not found" })
                            }
                            else {
                                let obj = new itemReportModel({
                                    "userId": userData._id,
                                    "productId": productData._id,
                                    "reportType": req.body.reportType,
                                    "reportDescription": req.body.reportDescription
                                })
                                obj.save((error, itemData) => {
                                    if (error) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Item report saved", itemData })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },
    addWishList: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error", userError })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    productModel.findOne({ _id: req.body.productId }, (productErr, productResult) => {
                        if (productErr) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                        }
                        else if (!productResult) {
                            return res.send({ responseCode: 404, responseMessage: "Data not found" })
                        }
                        else {
                            sellingWishlist.findOne({ userId: req.body.userId, status: "ACTIVE" }, (wishListErr, wishListResult) => {
                                if (wishListErr) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                }
                                else if (wishListResult) {
                                    sellingWishlist.findOneAndUpdate({ userId: req.body.userId }, { $addToSet: { wishList: productResult._id } }, { new: true }).populate("userId", "firstName").exec((updateErr, updateResult) => {
                                        if (updateErr) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        }
                                        else {
                                            return res.send({ responseCode: 200, responseMessage: "Product added in wishlist" })
                                        }
                                    })
                                }
                                else {
                                    var obj = {
                                        userId: req.body.userId,
                                        wishList: req.body.productId
                                    };
                                    new sellingWishlist(obj).save((saveErr, saveResult) => {
                                        if (saveErr) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        }
                                        else {
                                            return res.send({ responseCode: 200, responseMessage: "Product added in wishlist" })
                                        }
                                    })
                                }
                            })
                        }
                    })
                }
            })
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Error in catch" })
        }
    },
    removeWishListProduct: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId }, (err, result) => {
                if (err) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    productModel.findOne({ _id: req.body.productId }, (err2, result2) => {
                        if (err2) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!result2) {
                            return res.send({ responseCode: 404, responseMessage: "Data not found" })
                        }
                        else {
                            sellingWishlist.findOne({ userId: req.body.userId, wishList: req.body.productId }, (err3, result3) => {
                                if (err3) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err3 })
                                }
                                else if (!result3) {
                                    return res.send({ responseCode: 404, responseMessage: "Data not found1" })
                                }
                                else {
                                    sellingWishlist.findOneAndUpdate({ userId: req.body.userId }, { $pull: { wishList: result2._id } }, { new: true }, (updateErr, updateResult) => {
                                        if (updateErr) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", updateErr })
                                        }
                                        else {
                                            if (updateResult.wishList.length == 0) {
                                                sellingWishlist.deleteOne({ userId: req.body.userId }, (deleteErr, deleteResult) => {
                                                    if (deleteErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error", deleteErr })
                                                    }
                                                    else {
                                                        return res.send({ responseCode: 200, responseMessage: "Wishlist deleted successfully", deleteResult })
                                                    }
                                                })
                                            }
                                            else {
                                                return res.send({ responseCode: 200, responseMessage: "Wishlist deleted successfully" })

                                            }
                                        }
                                    })
                                }
                            })
                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 404, responseMessage: "Error in catch", error })
        }
    },

    getWishlistProduct: (req, res) => {
        try {
            sellingWishlist.findOne({ userId: req.body.userId }).populate("sellingWishlist").exec((listErr, listResult) => {
                if (listErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!listResult) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Wishlist found", listResult })
                }
            })
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Error in catch" })
        }
    },
    addCart: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error", userError })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    productModel.findOne({ _id: req.body.productId, status: "ACTIVE" }, (productErr, productResult) => {
                        if (productErr) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                        }
                        else if (!productResult) {
                            return res.send({ responseCode: 404, responseMessage: "Data not found" })
                        }
                        else {
                            if (productResult.productSize.length == 0) {
                                addCart.findOne({ userId: req.body.userId, status: "ACTIVE" }, (wishListErr, wishListResult) => {
                                    if (wishListErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                    }
                                    else if (wishListResult) {
                                        var object = [{
                                            productId: req.body.productId
                                        }]
                                        addCart.findOne({ userId: req.body.userId, status: "ACTIVE", 'addToCart.productId': req.body.productId }, (updateErr, updateResult1) => {
                                            if (updateErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else if (!updateResult1) {
                                                addCart.findOneAndUpdate({ userId: req.body.userId, status: "ACTIVE" }, { $push: { addToCart: object } }, { new: true }, (updateErr, updateResult) => {
                                                    if (updateErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else if (!updateResult) {
                                                        return res.send({ responseCode: 404, responseMessage: "Product already added" })
                                                    }
                                                    else {
                                                        return res.send({ responseCode: 200, responseMessage: "Product added in cart" })
                                                    }
                                                })
                                            }
                                            else {
                                                return res.send({ responseCode: 404, responseMessage: "Product already added" })
                                            }
                                        })
                                    }
                                    else {
                                        var obj = {
                                            userId: req.body.userId,
                                            addToCart: [{
                                                productId: req.body.productId,
                                            }]

                                        };
                                        new addCart(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                return res.send({ responseCode: 200, responseMessage: "Product added in cart" })
                                            }
                                        })
                                    }
                                })
                            } else {
                                addCart.findOne({ userId: req.body.userId, status: "ACTIVE" }, (wishListErr, wishListResult) => {
                                    if (wishListErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                    }
                                    else if (wishListResult) {
                                        var object = [{
                                            productId: req.body.productId,
                                            size: req.body.size
                                        }]
                                        addCart.findOne({ userId: req.body.userId, status: "ACTIVE", 'addToCart.productId': req.body.productId, 'addToCart.size': req.body.size }, (updateErr, updateResult) => {
                                            if (updateErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else if (!updateResult) {
                                                addCart.findOneAndUpdate({ userId: req.body.userId, status: "ACTIVE" }, { $push: { addToCart: object } }, { new: true }, (updateErr, updateResult) => {
                                                    if (updateErr) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    }
                                                    else if (!updateResult) {
                                                        return res.send({ responseCode: 404, responseMessage: "Product already added" })
                                                    }
                                                    else {
                                                        return res.send({ responseCode: 200, responseMessage: "Product added in cart" })
                                                    }
                                                })
                                            }
                                            else {
                                                return res.send({ responseCode: 200, responseMessage: "Product already added" })
                                            }
                                        })
                                    }
                                    else {
                                        var obj = {
                                            userId: req.body.userId,
                                            addToCart: [{
                                                productId: req.body.productId,
                                                size: req.body.size
                                            }]

                                        };
                                        new addCart(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                return res.send({ responseCode: 200, responseMessage: "Product added in cart" })
                                            }
                                        })
                                    }
                                })
                            }
                        }
                    })
                }
            })
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Error in catch" })
        }
    },
    viewAddToCart: (req, res) => {
        try {
            addCart.findOne({ userId: req.body.userId }).populate("addToCart.productId").exec((listErr, listResult) => {
                if (listErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!listResult) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                   
                    return res.send({ responseCode: 200, responseMessage: "Cart found successfully", listResult })
                }
            })
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Error in catch" })
        }
    },
    removeCart: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId }, (userError, userData) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!userData) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    addCart.findOne({ userId: req.body.userId }, (cartError, cartData) => {
                        if (cartError) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error", cartError })
                        }
                        else if (!cartData) {
                            return res.send({ responseCode: 404, responseMessage: "Data not found1" })
                        }
                        else {
                            addCart.findOneAndUpdate({ userId: req.body.userId }, { $pull: { addToCart: { _id: req.body.cartId } } }, { new: true, multi: true }, (updateErr, updateResult) => {
                                if (updateErr) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", updateErr })
                                }
                                else {
                                    if (updateResult.addToCart.length == 0) {
                                        addCart.deleteOne({ "userId": req.body.userId }, (deleteErr, deleteResult) => {
                                            if (deleteErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error", deleteErr })
                                            }
                                            else {
                                                return res.send({ responseCode: 200, responseMessage: "Cart deleted successfully1", deleteResult })
                                            }
                                        })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Cart deleted successfully2" })
                                    }
                                }
                            })
                        }
                    })

                }
            })
        }
        catch (error) {
            res.send({ responseCode: 404, responseMessage: "Error in catch", error })
        }
    },

    getUser: async (req, res) => {
        userModel.findOne({ _id: req.body.userId }).then(result => {
            res.send({ responseCode: 2000, responseMessage: "Data found successfully" })
        }).catch(error => {
            return res.send({ responseCode: 2000, responseMessage: "Data not found" })
        })
    },
    buyProduct: (req, res) => {
        userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, userResult) => {
            if (userError) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
            }
            else if (!userResult) {
                return res.send({ responseCode: 404, responseMessage: "User not found" })
            }
            else {
                productModel.findOne({ _id: req.body.productId, status: "ACTIVE" }, (error, productData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!productData) {
                        return res.send({ responseCode: 404, responseMessage: "Product not found" })
                    }
                    else {
                        var obj = {
                            userId: userResult._id,
                            productId: productData._id,
                            quantity: req.body.quantity,
                            size: req.body.size,
                            productCost: productData.productCost,
                            totalCost: req.body.totalCost,
                            productName: productData.productName,
                            userName: userResult.firstName + " " + userResult.lastName,
                        }
                        var obj1 = new prodcutBuying(obj)
                        obj1.save((saveError, saveResult) => {
                            if (saveError) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else {
                                return res.send({ responseCode: 404, responseMessage: "Product saved successfully", saveResult })
                            }
                        })
                    }
                })
            }
        })
    },
    //**________________________________________________________ refund the customer ______________________________________________________________________ */

    createOrder1: (req, res) => {
        stripe.tokens.create({
            card: {
                "number": '4000000000000077',
                "exp_month": 12,
                "exp_year": 2020,
                "cvc": '123',
                "currency": "usd"
            }

        }, (error, token) => {
            console.log("524==============>", token)
            if (error) {
                res.send({
                    responseCode: 500,
                    responseMesssage: "Internal server error",
                    error
                })
            } else {

                // stripe.customers.create({
                //     source: token.id,
                // }, (error1, customer) => {
                //     console.log("534==========>", customer)
                //     if (error1) {
                //         res.send({
                //             responseCode: 500,
                //             responseMessage: "Internal server error",
                //             error1
                //         })
                //     } else {
                //         stripe.charges.create({
                //             amount:50000*100,
                //             currency: "usd",
                //             customer: customer.id

                //         }, function (error2, charge) {
                //             console.log("10980======>", charge)
                //             if (error2) {
                //                 console.log("lllllllllllllllllllllllllllll")
                //                 res.send({
                //                     responseCode: 500,
                //                     responseMessage: "Internal server error",
                //                     error2
                //                 })
                //             } else {
                //                 return res.send({ responseCode: 200, responseMessage: "Transfer successfully", charge })
                //             }
                //         });
                //     }
                // });
            }
        })
    },

    productDelivered: () => {

        productPayment.find({ orderStatus: "Pending" }).populate("userId").exec((payErr, payResult) => {
            if (payResult.length == 0) {
                console.log({ responseCode: 500, responseMessage: "Internal server error", payErr })
            }
            else {
                // console.log("The delivery date of the record are.....",new Date(payResult[0].deliveryDate).toDateString())
                productPayment.updateMany({ _id: { $in: payResult.map(a => a._id) }, deliveryDate: { $lte: new Date() } }, {
                    $set: { orderStatus: "Delivered", "productDescription.$[].status": "Delivered" }
                }, { multi: true }
                ).then((updateData, err) => {
                    if (updateData) {
                        payResult.forEach(a => {
                            let body = `Dear ${a.userName},<i> Your order has been delivered</i> <br> for order id: ${a._id}`
                            commonFunction.adminEmail(a.userId.email, "order delivered", body, (emailErr, emailResult) => {
                                if (emailResult) {
                                    console.log("email send successfully")
                                }
                            })
                        })

                        console.log({ responseCode: 200, responseMessage: "All documents updated..." })
                    }
                })

            }
        })
    },
    createOrder: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error1" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {

                        stripe.customers.create({
                            source: req.body.id,
                        }, (error1, customer) => {
                            console.log("534==========>", customer)
                            if (error1) {
                                res.send({
                                    responseCode: 500,
                                    responseMessage: "Internal server error4",
                                    error1
                                })
                            } else {
                                stripe.charges.create({
                                    amount: req.body.totalCost * 100,
                                    currency: "usd",
                                    customer: customer.id,
                                }, function (error2, charge) {
                                    console.log("10581===============>", charge)
                                    if (error2) {
                                        console.log("lllllllllllllllllllllllllllll")
                                        res.send({
                                            responseCode: 500,
                                            responseMessage: "Internal server error5",
                                            error2
                                        })
                                    } else {
                                        productManagement(req.body.product).then((result, err) => {
                                            console.log("The product management result.......", result, err)
                                            if (result) {
                                                var date = new Date();
                                                date.setDate(date.getDate() + 15);
                                                var dateString = date.toISOString().split('T')[0];
                                                var obj = {
                                                    transactionId: charge.balance_transaction,
                                                    amount: charge.amount,
                                                    chargeId: charge.id,
                                                    customerId: charge.customer,
                                                    url: charge.receipt_url,
                                                    transactionStatus: charge.status,
                                                    userId: req.body.userId,
                                                    amount_refunded: charge.amount_refunded,
                                                    orderStatus: charge.orderStatus,
                                                    // productName: productData.productName,
                                                    userName: userData.firstName + " " + userData.lastName,
                                                    deliveryDate: dateString,
                                                    size: req.body.size,
                                                    quantity: req.body.quantity
                                                }
                                                obj.productDescription = result
                                                var obj1 = new productPayment(obj)
                                                obj1.save(async (error4, result4) => {
                                                    if (error4) {
                                                        res.send({
                                                            responseCode: 500,
                                                            responseMessage: "Internal server error7", error4
                                                        })
                                                    } else {
                                                        let orderData = await productPayment.findOne({ userId: req.body.userId, _id: result4._id });
                                                        console.log("The customer is....", orderData)
                                                        if (orderData) {
                                                            let message = await notifyOrder(orderData)
                                                            console.log({ responseCode: 200, responseMessage: message });

                                                            productUpdate(req.body.product).then((result, err) => {
                                                                console.log(result);
                                                                var data = {
                                                                    paymentId: result4._id,
                                                                    transactionId: result4.transactionId,
                                                                    amount: result4.amount,
                                                                    createdAt: result4.createdAt,
                                                                    orderId: result4.orderId
                                                                }
                                                                res.send({
                                                                    responseCode: 200,
                                                                    responseMessage: "Transaction sucessfully",
                                                                    data
                                                                })
                                                            })
                                                        }

                                                        //**____________________________________________________ */
                                                        async function notifyOrder(orderData) {
                                                            let admin = await userModel.findOne({ userType: "ADMIN", status: "ACTIVE" });
                                                            let adminNote = `Your acount has been credited USD ${req.body.totalCost} by the ${orderData.userName}`;
                                                            let sellerNote = `Your product has been purchased by the ${orderData.userName}`;
                                                            let customerNote = `Your account has been debited USD ${req.body.totalCost} for an orderId ${orderData._id}`;
                                                            let adminNotish = {
                                                                userId: admin._id,
                                                                senderId: req.body.userId,
                                                                title: "Amount Credited",
                                                                body: adminNote,
                                                                notificationType: "Credited for Buying Product"
                                                            }
                                                            let customerNotish = {
                                                                userId: orderData.userId,
                                                                senderId: req.body.userId,
                                                                title: "Amount Debited",
                                                                body: customerNote,
                                                                notificationType: "Debited for Buying Product"
                                                            }
                                                            orderData.productDescription.forEach(async elm => {
                                                                let user = await userModel.findOne({ _id: elm.sellerId, status: "ACTIVE" });
                                                                console.log("17348=====>", user)
                                                                if (user.fcmToken != null) {
                                                                    commonFunction.pushNotification(user.fcmToken, "Product Sold", `Your ${elm.productQuantity} product ${elm.productName} of productId <${elm.productId}> has been purchased by the ${orderData.userName.split(" ")[0]}`, (err, rest) => {
                                                                        if (rest) {
                                                                            new notificationModel({
                                                                                userId: elm.sellerId,
                                                                                senderId: req.body.userId,
                                                                                title: "Product Sold",
                                                                                body: `Your ${elm.productQuantity} product ${elm.productName} of productId <${elm.productId}> has been purchased by the ${orderData.userName.split(" ")[0]}`,
                                                                                notificationType: "Product Sold"
                                                                            }).save();
                                                                        }
                                                                    })


                                                                } if (user.fcmToken === null) {
                                                                    new webNotification({
                                                                        userId: elm.sellerId,
                                                                        senderId: req.body.userId,
                                                                        title: "Product Sold",
                                                                        body: `Your ${elm.productQuantity} product ${elm.productName} of productId <${elm.productId}> has been purchased by the ${orderData.userName.split(" ")[0]}`,
                                                                        notificationType: "Product Sold"
                                                                    }).save();
                                                                }

                                                            });
                                                            let consumer = await userModel.findOne({ _id: req.body.userId, status: "ACTIVE" });
                                                            console.log("17362=======>", consumer)
                                                            if (await consumer.fcmToken != null) {
                                                                commonFunction.pushNotification(consumer.fcmToken, "Product Sold", `Your account has been debited ${req.body.totalCost} for an orderId ${orderData._id}`, (err, rest) => {
                                                                    if (rest) {
                                                                        new notificationModel({
                                                                            userId: elm.sellerId,
                                                                            senderId: req.body.userId,
                                                                            title: "Product Sold",
                                                                            body: `Your account has been debited USD ${req.body.totalCost} for an orderId ${orderData._id}`,
                                                                            notificationType: "Product Sold"
                                                                        }).save();
                                                                    }
                                                                })

                                                            } if (await consumer.fcmToken === null) {
                                                                await webNotification.create(adminNotish, customerNotish)
                                                            }
                                                            //  await  notificationModel.create(adminNotish , customerNotish)
                                                            return "All Notification sent fuccessfully"
                                                        }

                                                    }
                                                })
                                            }
                                        })

                                    }
                                });
                            }
                        });

                    }

                })
            }

            function productManagement(product) {
                return new Promise((resolve, reject) => {
                    const productDescription = [];
                    product.forEach(item => {
                        productModel.findOne({ _id: item.productId }, (err, result) => {
                            console.log("11188=====>", err, result)
                            var obj = {};
                            if (result) {
                                if (item.size) {
                                    obj = {
                                        productId: result._id,
                                        productName: result.productName,
                                        productQuantity: item.quantity,
                                        totalCost: item.quantity * result.productCost,
                                        sellerName: result.sellerName,
                                        sellerAccountId: result.cardDetails[0].stripAccountId,
                                        sellerId: result.userId,
                                        productImages: result.productImages

                                    }
                                } else {
                                    obj = {
                                        productId: result._id,
                                        productName: result.productName,
                                        productQuantity: item.productQuantity,
                                        totalCost: item.productQuantity * result.productCost,
                                        sellerName: result.sellerName,
                                        sellerAccountId: result.cardDetails[0].stripAccountId,
                                        sellerId: result.userId,
                                        productImages: result.productImages

                                    }
                                }
                                productDescription.push(obj);
                            }
                            if (productDescription.length == product.length) {
                                resolve(productDescription)
                            }
                            console.log("The response to be returned is..12345....", productDescription)
                        })
                        console.log("FEWTRETGRGRTHTHTHTGH.........", productDescription)
                    })

                })
            }
            //**__________________________________________________ product update function ___________________________________________ */
            function productUpdate(array) {
                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.>>.10622", array)
                return new Promise((resolve, reject) => {
                    array.forEach(a => {
                        if (a.size != undefined) {
                            productModel.findOne({ _id: a.productId, status: "ACTIVE" }, (err, data) => {

                                console.log("111", data)
                                var productArray = [];
                                data.productSize.forEach(b => { a.size == b.size ? b.quantity >= a.quantity ? productArray.push({ size: b.size, _id: b._id, quantity: b.quantity - a.quantity }) : 0 : 0 });
                                console.log("The productArray before save is:....", productArray);
                                if (productArray.length != 0 && data.quantity > a.quantity) {
                                    productModel.findOneAndUpdate({ 'productSize._id': productArray[0]._id }, { $set: { 'productSize.$.quantity': productArray[0].quantity, quantity: data.quantity - a.quantity } }, { new: true }, (err, updateData) => {
                                        if (err) {
                                            console.log("Internal server error", err)
                                        }
                                        else {
                                            addCart.findOneAndUpdate({ userId: req.body.userId, addToCart: { $elemMatch: { productId: a.productId, size: a.size } } }, { $pull: { addToCart: { productId: a.productId, size: a.size } } }, { new: true, multi: true }, (updateErr, updateResult) => {
                                                if (updateErr) {
                                                    console.log("Internal server error", updateErr)
                                                }
                                                else if (!updateResult) {
                                                    console.log("Data not found", updateResult)
                                                }
                                                else {
                                                    console.log("The  cart is updated 781>>>>>>>>>>>>>>>>>>>>>>>", updateResult);

                                                }
                                            })

                                        }
                                        console.log("The quantity is updated <<<<<<<>>>>>>>>>>", updateData)

                                    })
                                } else if (productArray.length != 0 && data.quantity == a.quantity) {
                                    productModel.findOneAndUpdate({ 'productSize._id': productArray[0]._id }, { $set: { 'productSize.$.quantity': productArray[0].quantity, quantity: data.quantity - a.quantity, sellStatus: "SOLD" } }, { new: true }).populate("userId", "email phoneNumber").exec((err, updateData) => {
                                        console.log("11631=========>", err, updateData)
                                        if (err) {
                                            console.log("Internal server error", err)
                                        }
                                        commonFunction.emailSenderUser(updateData.userId.email, "Product out of stock", updateData.sellerName, updateData._id, (emailError, emailResult) => {
                                            if (emailError) {
                                                console.log("Internal server error", err)
                                            }
                                            else {
                                                addCart.findOneAndUpdate({ userId: req.body.userId, addToCart: { $elemMatch: { productId: a.productId, size: a.size } } }, { $pull: { addToCart: { productId: a.productId, size: a.size } } }, { new: true, multi: true }, (updateErr, updateResult) => {
                                                    if (updateErr) {
                                                        console.log("Internal server error", updateErr)
                                                    }
                                                    else if (!updateResult) {
                                                        console.log("Data not found", updateResult)
                                                    }
                                                    else {
                                                        console.log("The  cart is updated 781>>>>>>>>>>>>>>>>>>>>>>>", updateResult);

                                                    }
                                                })
                                            }
                                        })
                                        console.log("The quantity is updated <<<<<<<>>>>>>>>>>", updateData)
                                    })
                                }
                                else {
                                    console.log("The stock quantity underFlow", productArray)
                                }
                            })
                        } else {
                            productModel.findOne({ _id: a.productId, status: "ACTIVE" }, (err, data) => {
                                // console.log("11245====>", err, data, data.quantity, a.ProductQuantity)
                                if (data.quantity > a.productQuantity) {
                                    productModel.findOneAndUpdate({ _id: a.productId }, { $set: { quantity: data.quantity - a.productQuantity } }, { new: true, multi: true }, (err, updateData) => {
                                        if (err) {
                                            console.log("Internal server error", err)
                                        }

                                        else {
                                            addCart.findOneAndUpdate({ userId: req.body.userId, addToCart: { $elemMatch: { productId: a.productId } } }, { $pull: { addToCart: { productId: a.productId } } }, { new: true, multi: true }, (updateErr, updateResult) => {
                                                console.log("10343", updateErr, updateResult)
                                                if (updateErr) {
                                                    console.log("Internal server error", updateErr)
                                                }
                                                else {
                                                    console.log("The  cart is updated 781>>>>>>>>>>>>>>>>>>>>>>>>>", updateResult)

                                                }
                                            })
                                        }
                                        console.log("The quantity is updated 781>>>>>>>>>>>>>>>>>>>>>>>>>", updateData)


                                    })
                                }
                                else if (data.quantity == a.productQuantity) {
                                    productModel.findOneAndUpdate({ _id: a.productId }, { $set: { quantity: data.quantity - a.productQuantity, sellStatus: "SOLD" } }, { new: true, multi: true }).populate("userId", "email").exec((err, updateData) => {
                                        if (err) {
                                            console.log("Internal server error", err)
                                        }
                                        commonFunction.emailSenderUser(updateData.userId.email, "Product out of stock", updateData.sellerName, updateData._id, (emailError, emailResult) => {
                                            if (emailError) {
                                                console.log("Internal server error", err)
                                            }

                                            else {
                                                addCart.findOneAndUpdate({ userId: req.body.userId, addToCart: { $elemMatch: { productId: a.productId } } }, { $pull: { addToCart: { productId: a.productId } } }, { new: true, multi: true }, (updateErr, updateResult) => {
                                                    console.log("10343", updateErr, updateResult)
                                                    if (updateErr) {
                                                        console.log("Internal server error", updateErr)
                                                    }
                                                    else {
                                                        console.log("The  cart is updated 781>>>>>>>>>>>>>>>>>>>>>>>>>", updateResult)

                                                    }
                                                })
                                            }
                                        })
                                        console.log("The quantity is updated 781>>>>>>>>>>>>>>>>>>>>>>>>>", updateData)


                                    })
                                }
                                else {
                                    console.log("The stock quantity underFlow")
                                }
                            })


                        }
                    })
                    resolve("The product quantity is updated...");
                })
            }
            //**______________________________________________________________________________________________________________________ */

        } catch (error) {
            res.send({ responseCode: 404, responseMessage: "Internal server error", error })
        }
    },


    productOrderHistory: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, userData) => {
                    if (userError) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "Data not found" })
                    }
                    else {
                        let query = {
                            userId: req.body.userId
                        };
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 10,
                            sort: { createdAt: -1 },
                            populate: { path: 'productId', select: 'image', match: { status: "ACTIVE" } }
                        }
                        productPayment.paginate(query, options, (error, paymentData) => {
                            if (error) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                            }
                            else if (paymentData.docs.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: "Data not found" })
                            }
                            else {
                                return res.send({ responseCode: 200, responseMessage: "Order found successfully", paymentData })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 404, responseMessage: "Error in catch", error })
        }
    },

    changeOrderStatusBySeller: (req, res) => {
        productModel.findOne({ 'userId': req.body.userId, status: "ACTIVE" }, (error, sellerData) => {
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
            }
            else if (!sellerData) {
                return res.send({ responseCode: 404, responseMessage: "Data not found" })
            }
            else {
                var set = {};
                if (req.body.orderStatus) {
                    set['orderStatus'] = req.body.orderStatus
                }
                productPayment.findOneAndUpdate({ "_id": req.body.orderId }, { $set: set }, { new: true }, (error, orderData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!orderData) {
                        return res.send({ responseCode: 404, responseMessage: "Order data not found" })
                    }
                    else {
                        res.send({ responseCode: 200, responseMessage: "Order updated successfully" })
                    }
                })
            }
        })
    },

    feedbackOfProduct: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error", userError })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    productPayment.findOne({ _id: req.body.orderId,orderStatus:"Delivered"}, (productErr, productResult) => {
                        if (productErr) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                        }
                        else if (!productResult) {
                            return res.send({ responseCode: 404, responseMessage: "Order not found" })
                        }
                        else {
                            productFeedback.findOne({ userId: req.body.userId, status: "ACTIVE" }, (wishListErr, wishListResult) => {
                                if (wishListErr) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
                                }
                                else if (wishListResult) {
                                    var set = {};
                                    if (req.body.comment) {
                                        set["comment"] = req.body.comment
                                    }
                                    if (req.body.rating) {
                                        set["rating"] = req.body.rating
                                    }
                                    productFeedback.findOneAndUpdate({ userId: req.body.userId }, { $set: { orderId: req.body.orderId }, set }, { new: true }).populate("userId", "firstName").exec((updateErr, updateResult) => {
                                        if (updateErr) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        }
                                        else {
                                            return res.send({ responseCode: 200, responseMessage: "Your Feedback successfully aaded" })
                                        }
                                    })
                                }
                                else {
                                    var obj = {
                                        userId: req.body.userId,
                                        orderId: req.body.orderId,
                                        comment: req.body.comment,
                                        rating: req.body.rating
                                    };
                                    new productFeedback(obj).save((saveErr, saveResult) => {
                                        console.log("14012=======>",saveErr,saveResult)
                                        if (saveErr) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        }
                                        else {
                                            return res.send({ responseCode: 200, responseMessage: "Feedback added successfully" })
                                        }
                                    })
                                }
                            })
                        }
                    })
                }
            })
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Error in catch" })
        }
    },

    viewfeedback: (req, res) => {
        try {
            productFeedback.findOne({ userId: req.body.userId, orderId: req.body.orderId }).populate({ path: 'orderId', populate: { path: 'productId' } }).exec((listErr, listResult) => {
                if (listErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!listResult) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Feedback successfully found", listResult })
                }
            })
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Error in catch" })
        }
    },
    sellingHistory: (req, res) => {
        try {
            if (!req.body.sellerId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.sellerId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        let query = {};
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            sort: { createdAt: -1 }
                        }
                        productModel.paginate(query, options, (error, paginateData) => {
                            if (error) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (paginateData.docs.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: "Data not found" })
                            }
                            else {
                                return res.send({ responseCode: 200, responseMessage: "Data found successfully", paginateData })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },
    sellingHistoryEdit: (req, res) => {
        userModel.findOne({ _id: req.body.sellerId, status: "ACTIVE" }, (userError, userResult) => {
            if (userError) {
                return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
            } else if (!userResult) {
                return res.send({ responseCode: 404, responseMessage: "User not found" })
            }
            else {
                productModel.findOneAndUpdate({ _id: req.body.productId, status: "ACTIVE" }, { $set: req.body }, { new: true }, (productError, productResult) => {
                    if (productError) {
                        return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                    } else if (!productResult) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        return res.send({ responseCode: 200, responseMessage: "Product updated successfully" })
                    }
                })
            }
        })
    },
    returnProduct: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 404, responseMessage: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
                    if (error) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!userData) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        productModel.findOne({ _id: req.body.productId, status: "ACTIVE" }, (error, productData) => {
                            if (error) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!productData) {
                                return res.send({ responseCode: 404, responseMessage: "Product not found" })
                            }
                            else {
                                let obj = new returnProduct({
                                    "userId": userData._id,
                                    "productId": productData._id,
                                    "returnType": req.body.returnType,
                                    "returnDescription": req.body.returnDescription
                                })
                                obj.save((error, itemData) => {
                                    if (error) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "report saved", itemData })
                                    }
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Something went wrong" })
        }
    },

    //-------------------------------------------------------------CLASS Post section-------------------------------------------------------------

    shareClassPost: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    classPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err, postData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                        } else if (!postData) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        } else {
                            classRoom.findOne({ _id: postData.classId, status: "ACTIVE", members: { $elemMatch: { memberId: req.body.memberId, status: "ACTIVE" } } }, (err, classData) => {
                                if (err) {
                                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                                } else if (!classData) {
                                    return res.send({ responseCode: 404, responseMessage: "class not found" })
                                } else {
                                    var object = [{
                                        memberId: req.body.memberId,
                                        sharedTo: []
                                    }]
                                    var arr = req.body.sharedTo;
                                    arr.forEach(a => {
                                        object[0].sharedTo.push({ friendId: a })
                                    })
                                    console.log("My object to be saved is.....", object);
                                    listData.friendList.forEach((item, index) => {
                                        if (item.friendId != null && item.friendId.fcmToken == null) {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Post",
                                                body: `${listData.firstName} shared a post with you`,
                                                senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                notificationType: "Post shared in class"
                                            };
                                            new webNotification(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else if (item.friendId != null && item.friendId.fcmToken != null) {
                                            commonFunction.pushNotification(item.friendId.fcmToken, "Shared Post", `${listData.firstName} shared a post with you`, (err, notificationResult) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                }
                                                else {
                                                    var obj = {
                                                        userId: item.friendId,
                                                        senderId: req.body.memberId,
                                                        title: "Shared Post",
                                                        body: `${listData.firstName} shared a post with you`,
                                                        notificationType: "Post shared in class"
                                                    };
                                                    new notificationModel(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                        }
                                                        else {
                                                            classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                                if (err) {
                                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                                }
                                                                else if (!updateData) {
                                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                                }
                                                                else {
                                                                    console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else {
                                            console.log({ responseCode: 404, responseMessage: "Data not found" });
                                        }
                                    })
                                    return res.send({ responseCode: 200, responseMessage: "Post successfully shared" })
                                }
                            })
                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    createClassPost: (req, res) => {
        try {
            if (
                !req.body.userId ||
                !req.body.classId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            } else {
                user.findOne({ _id: req.body.userId, status: "ACTIVE" },
                    async (err, result) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Intrnal server error1" })
                        } else if (!result) {
                            return res.send({ responseCode: 404, responseMessage: "User not found" })
                        } else {
                            classRoom.findOne({ _id: req.body.classId, status: "ACTIVE" }, async (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                                } else if (!result1) {
                                    return res.send({ responseCode: 404, responseMessage: "class not found" })
                                }
                                else {
                                    if (req.body.image) {
                                        commonFunction.multipleImageUploadCloudinary(req.body.image, (err, success) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error ", err })
                                            }
                                            else {
                                                req.body.image = success
                                                var post = {
                                                    userId: result._id,
                                                    classId: result1._id,
                                                    image: success,
                                                    text: req.body.text,
                                                    tagFriends: req.body.friendsId
                                                }
                                                if (req.body.privacy == "FRIENDS") {
                                                    post.privacy = "FRIENDS",
                                                        post.timeLine = []
                                                    result.friendList.forEach(x => {
                                                        post.timeLine.push(x.friendId)
                                                    })
                                                }
                                                // if (req.body.privacy == "FRIENDSEXCEPT") {
                                                //     post.privacy = "FRIENDSEXCEPT"
                                                //     post.timeLine = req.body.friendId;
                                                // }
                                                if (req.body.privacy == "SPECIFICFRIENDS") {
                                                    post.privacy = "SPECIFICFRIENDS"
                                                    post.timeLine = req.body.friendId

                                                }
                                                if (req.body.privacy == "ONLYME") {
                                                    post.privacy = "ONLYME"
                                                }
                                                classPostModel.create(post, (error, success1) => {
                                                    console.log("111", error, success1)
                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error1 " })
                                                    } else if (!success1) {
                                                        return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                                    } else {
                                                        console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                        return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                    else if (req.body.video) {
                                        commonFunction.multipleImageUploadCloudinary(req.body.video, (err, success) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error " })
                                            }
                                            else {
                                                req.body.video = success
                                                var post = {
                                                    userId: result._id,
                                                    classId: result1._id,
                                                    video: success,
                                                    text: req.body.text,
                                                    tagFriends: req.body.friendsId
                                                }
                                                if (req.body.privacy == "FRIENDS") {
                                                    post.privacy = "FRIENDS",
                                                        post.timeLine = []
                                                    result.friendList.forEach(x => {
                                                        post.timeLine.push(x.friendId)
                                                    })
                                                }
                                                if (req.body.privacy == "FRIENDSEXCEPT") {
                                                    post.privacy = "FRIENDSEXCEPT"
                                                    post.timeLine = req.body.friendId;
                                                }
                                                if (req.body.privacy == "SPECIFICFRIENDS") {
                                                    post.privacy = "SPECIFICFRIENDS"
                                                    post.timeLine = req.body.friendId

                                                }
                                                if (req.body.privacy == "ONLYME") {
                                                    post.privacy = "ONLYME"
                                                }
                                                classPostModel.create(post, (error, success1) => {
                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error1" })
                                                    } else if (!success1) {
                                                        return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                                    } else {
                                                        console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                        return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                    else if (req.body.document) {
                                        commonFunction.multipleImageUploadCloudinary(req.body.document, (err, success) => {
                                            if (err) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error " })
                                            }
                                            else {
                                                req.body.document = success
                                                var post = {
                                                    userId: result._id,
                                                    classId: result1._id,
                                                    document: success,
                                                    text: req.body.text,
                                                    tagFriends: req.body.friendsId
                                                }
                                                if (req.body.privacy == "FRIENDS") {
                                                    post.privacy = "FRIENDS",
                                                        post.timeLine = []
                                                    result.friendList.forEach(x => {
                                                        post.timeLine.push(x.friendId)
                                                    })
                                                }
                                                if (req.body.privacy == "FRIENDSEXCEPT") {
                                                    post.privacy = "FRIENDSEXCEPT"
                                                    post.timeLine = req.body.friendId;
                                                }
                                                if (req.body.privacy == "SPECIFICFRIENDS") {
                                                    post.privacy = "SPECIFICFRIENDS"
                                                    post.timeLine = req.body.friendId

                                                }
                                                if (req.body.privacy == "ONLYME") {
                                                    post.privacy = "ONLYME"
                                                }
                                                classPostModel.create(post, (error, success1) => {
                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error1" })
                                                    } else if (!success1) {
                                                        return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                                    } else {
                                                        console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                        return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                    else if (req.body.GIF) {
                                        var post = {
                                            userId: result._id,
                                            classId: result1.id,
                                            GIF: req.body.GIF,
                                            text: req.body.text,
                                            tagFriends: req.body.friendsId
                                        }
                                        if (req.body.privacy == "FRIENDS") {
                                            post.privacy = "FRIENDS",
                                                post.timeLine = []
                                            result.friendList.forEach(x => {
                                                post.timeLine.push(x.friendId)
                                            })
                                        }
                                        if (req.body.privacy == "FRIENDSEXCEPT") {
                                            post.privacy = "FRIENDSEXCEPT"
                                            post.timeLine = req.body.friendId;
                                        }
                                        if (req.body.privacy == "SPECIFICFRIENDS") {
                                            post.privacy = "SPECIFICFRIENDS"
                                            post.timeLine = req.body.friendId

                                        }
                                        if (req.body.privacy == "ONLYME") {
                                            post.privacy = "ONLYME"
                                        }
                                        new classPostModel(post).save((error, success1) => {
                                            if (error) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            } else if (!success1) {
                                                return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                            } else {
                                                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                            }
                                        })
                                    }
                                    else if (req.body.text) {
                                        var post = {
                                            userId: result._id,
                                            classId: result1._id,
                                            // feeling: req.body.feeling,
                                            text: req.body.text,
                                            tagFriends: req.body.friendsId
                                        }
                                        if (req.body.privacy == "FRIENDS") {
                                            post.privacy = "FRIENDS",
                                                post.timeLine = []
                                            result.friendList.forEach(x => {
                                                post.timeLine.push(x.friendId)
                                            })
                                        }
                                        if (req.body.privacy == "FRIENDSEXCEPT") {
                                            post.privacy = "FRIENDSEXCEPT"
                                            post.timeLine = req.body.friendId;
                                        }
                                        if (req.body.privacy == "SPECIFICFRIENDS") {
                                            post.privacy = "SPECIFICFRIENDS"
                                            post.timeLine = req.body.friendId

                                        }
                                        if (req.body.privacy == "ONLYME") {
                                            post.privacy = "ONLYME"
                                        }
                                        classPostModel.create(post, (error, success1) => {
                                            if (error) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            } else if (!success1) {
                                                return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                            } else {
                                                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                return res.send({ responseCode: 200, responseMessage: "post created", success1 })
                                            }
                                        })
                                    }
                                    else if (req.body.location) {
                                        commonFunction.getLatLong(req.body.location, (error, location) => {
                                            if (error) {
                                                console.log(" 121 Internal server error")
                                            } else if (!location) {
                                                console.log("Unable to find", location)
                                            } else {
                                                var result1 = { latitude: location[0].latitude, longitude: location[0].longitude }
                                                console.log("pppppppppppppppppp", result1)
                                                var post = {
                                                    userId: result._id,
                                                    classId: result1._id,
                                                    // cordinate: [
                                                    //   result.latitude,
                                                    //   result.longitude
                                                    // ],
                                                    location: req.body.location,
                                                    latitude: location[0].latitude,
                                                    longitude: location[0].longitude,
                                                    text: req.body.text,
                                                    tagFriends: req.body.tagFriends
                                                }
                                                if (req.body.privacy == "FRIENDS") {
                                                    post.privacy = "FRIENDS",
                                                        post.timeLine = []
                                                    result.friendList.forEach(x => {
                                                        post.timeLine.push(x.friendId)
                                                    })
                                                }
                                                if (req.body.privacy == "FRIENDSEXCEPT") {
                                                    post.privacy = "FRIENDSEXCEPT"
                                                    post.timeLine = req.body.friendId;
                                                }
                                                if (req.body.privacy == "SPECIFICFRIENDS") {
                                                    post.privacy = "SPECIFICFRIENDS"
                                                    post.timeLine = req.body.friendId

                                                }
                                                if (req.body.privacy == "ONLYME") {
                                                    post.privacy = "ONLYME"
                                                }
                                                classPostModel.create(post, (error, success1) => {
                                                    if (error) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!success1) {
                                                        return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                                    } else {
                                                        console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                        return res.send({ responseCode: 200, responseMessage: "post created", success1 })
                                                    }
                                                })
                                            }
                                        })
                                    }
                                    else {
                                        console.log("llllllllllllllllllllllllllll")
                                        var post = {
                                            userId: result._id,
                                            classsId: result1._id,
                                            sticker: req.body.sticker,
                                            text: req.body.text,
                                            tagFriends: req.body.friendsId
                                        }
                                        if (req.body.privacy == "FRIENDS") {
                                            post.privacy = "FRIENDS",
                                                post.timeLine = []
                                            result.friendList.forEach(x => {
                                                post.timeLine.push(x.friendId)
                                            })
                                        }
                                        if (req.body.privacy == "FRIENDSEXCEPT") {
                                            post.privacy = "FRIENDSEXCEPT"
                                            post.timeLine = req.body.friendId;
                                        }
                                        if (req.body.privacy == "SPECIFICFRIENDS") {
                                            post.privacy = "SPECIFICFRIENDS"
                                            post.timeLine = req.body.friendId

                                        }
                                        if (req.body.privacy == "ONLYME") {
                                            post.privacy = "ONLYME"
                                        }
                                        classPostModel.create(post, (error, success1) => {
                                            if (error) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            } else if (!success1) {
                                                return res.send({ responseCode: 404, responseMessage: " Unable to post" })
                                            } else {
                                                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", success1)
                                                return res.send({ responseCode: 200, responseMessage: "post created ", success1 })
                                            }
                                        })
                                    }

                                }
                            })
                        }
                    })

            }
        }
        catch (error) {
            return res.send({ responseCode: 404, responseMessage: "Error in catch !" })
        }
    },

    tagFriendsInClassPost: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            } else {
                user.findOne({ _id: req.body.userId, status: "ACTIVE" },
                    (err, result) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Intrnal server error111111" })
                        } else if (!result) {
                            return res.send({ responseCode: 404, responseMessage: "User not found" })
                        } else {
                            classRoom.findOne({ _id: req.body.classId, status: "ACTIVE" },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error222222222" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 500, responseMessage: "Class not found" })
                                    }
                                    else {
                                        classRoom.findOne({ members: { $elemMatch: { memberId: req.body.memberId, status: "ACTIVE" } } }).populate({ path: 'members.memberId', match: { _id: { $in: req.body.memberId } }, select: 'fcmToken firstName' }).exec((err2, result2) => {
                                            if (err2) {
                                                return res.send({ responseCode: 500, responseMessage: "Intrnal server error3333" })
                                            } else if (!result2) {
                                                return res.send({ responseCode: 404, responseMessage: "Friend not found", result2 })
                                            } else {
                                                result2.members.forEach((item, index) => {
                                                    if (item.memberId != null && item.memberId.fcmToken == null) {
                                                        var obj = {
                                                            userId: item.memberId,
                                                            senderId: req.body.userId,
                                                            title: "Tag Friend",
                                                            body: `${result.firstName} tagged you in the post`,
                                                            senderIdMessage: `${result.firstName} tagged ${item.memberId.firstName}`,
                                                            notificationType: "Tag friend"
                                                        };
                                                        new webNotification(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                console.log("Internal server error");
                                                            }
                                                            else {
                                                                classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                                    { $addToSet: { tagFriends: req.body.memberId } },
                                                                    { new: true },
                                                                    (err3, result3) => {
                                                                        if (err3) {
                                                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                                        } else {
                                                                            console.log({ responseCode: 200, responseMessage: "Friend tagged successfully", result3 })
                                                                        }
                                                                    })
                                                            }
                                                        })
                                                    }
                                                    else if (item.memberId != null && item.memberId.fcmToken != null) {
                                                        commonFunction.pushNotification(item.memberId.fcmToken, "Tag Friend", `${result.firstName} tagged you in the post`, (err, notificationResult) => {
                                                            if (err) {
                                                                console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                            }
                                                            else {
                                                                var obj = {
                                                                    userId: item.memberId,
                                                                    senderId: req.body.userId,
                                                                    title: "Tag Friend",
                                                                    body: `${result.firstName} tagged you in the post`,
                                                                    senderIdMessage: `${result.firstName} tagged ${item.memberId.firstName}`,
                                                                    notificationType: "Tag friend"
                                                                };
                                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                                    if (saveErr) {
                                                                        console.log("Internal server error");
                                                                    }
                                                                    else {
                                                                        classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                                            { $addToSet: { tagFriends: req.body.memberId } },
                                                                            { new: true },
                                                                            (err3, result3) => {
                                                                                if (err3) {
                                                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                                                } else {
                                                                                    console.log({ responseCode: 200, responseMessage: "Friend tagged successfully", result3 })
                                                                                }
                                                                            })
                                                                    }
                                                                })
                                                            }
                                                        })
                                                    }
                                                    else {
                                                        console.log({ responseCode: 404, responseMessage: "Data not found" });
                                                    }
                                                })
                                                return res.send({ responseCode: 200, responseMessage: "Friend tagged successfully" })

                                            }
                                        })
                                    }
                                })
                        }
                    })
            }
        }
        catch (error) {
            return res.send({ responseCode: 404, responseMessage: "Error in catch !" })
        }
    },

    replyCommentInClass: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    classPostModel.findOne({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        console.log(">>>>>>>13650", err, postResult);
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            console.log(">>>>>13658", deviceToken)
                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in class"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    console.log("15545=======>", saveErr, saveResult)
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        classPostModel.findOneAndUpdate({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" },
                                            { $push: { replyComments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)

                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in class"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                classPostModel.findOneAndUpdate({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" },
                                                    { $push: { replyComments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }
                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    postLikeAndCommentInClass: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessage: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        classPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }).populate('userId').exec((err, postResult) => {
                            if (err) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!postResult) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })
                            }
                            else {
                                if (req.body.like == "true") {
                                    classPostModel.findOne({
                                        _id: req.body.postId,
                                        postStatus: "ACTIVE",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                        } else {
                                            var like = {
                                                likedId: result._id,
                                                userName: `${result.firstName} ${result.lastName}`,
                                                userPic: result.profilePic
                                            };
                                            if (postResult.userId.fcmToken == null) {
                                                var obj = {
                                                    userId: postResult.userId,
                                                    senderId: req.body.userId,
                                                    title: "Post Liked",
                                                    senderIdMessage: `${result.firstName} liked on ${postResult.userId.firstName}' post`,
                                                    body: `${result.firstName} liked your post`,
                                                    notificationType: "Post liked in class"
                                                };
                                                new webNotification(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ respononseCode: 500, responseMessage: "Internal server error" });
                                                    }
                                                    else {
                                                        classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                            { $push: { likes: like } },
                                                            { new: true },
                                                            (err1, result1) => {

                                                                if (err1) {
                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else if (!result1) {
                                                                    return res.send({ responseCode: 400, responseMessage: "Unable to like" })
                                                                }
                                                                else {
                                                                    const count = result1.likes;
                                                                    return res.send({ responseCode: 200, responseMessage: "Post liked successfully", likes: count })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                            else {
                                                commonFunction.pushNotification(postResult.userId.fcmToken, "Post Liked", `${result.firstName} liked your post`, (err, notificationResult) => {
                                                    if (err) {
                                                        return res.send({ response: 500, responseMessage: "Internal server error" });
                                                    }
                                                    else {
                                                        var obj = {
                                                            userId: postResult.userId,
                                                            senderId: req.body.userId,
                                                            title: "Post Liked",
                                                            body: `${result.firstName} liked your post`,
                                                            senderIdMessage: `${result.firstName} liked on ${postResult.userId.firstName}' post`,
                                                            notificationType: "Post liked in class"
                                                        };
                                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                                            if (saveErr) {
                                                                return res.send({ respononseCode: 500, responseMessage: "Internal server error" });
                                                            }
                                                            else {
                                                                classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                                    { $push: { likes: like } },
                                                                    { new: true },
                                                                    (err1, result1) => {

                                                                        if (err1) {
                                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                        } else if (!result1) {
                                                                            return res.send({ responseCode: 400, responseMessage: "Unable to like" })
                                                                        }
                                                                        else {
                                                                            const count = result1.likes;
                                                                            return res.send({ responseCode: 200, responseMessage: "Post liked successfully", likes: count })
                                                                        }
                                                                    }
                                                                )
                                                            }
                                                        })

                                                    }
                                                })
                                            }

                                        }
                                    })

                                }
                                else if (req.body.comments == "true") {
                                    var comment = {
                                        commentedUser: result._id,
                                        comment: req.body.comment,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        userPic: result.profilePic,
                                        commentedTime: new Date()
                                    };
                                    if (postResult.userId.fcmToken == null) {
                                        var obj = {
                                            userId: postResult.userId,
                                            senderId: req.body.userId,
                                            title: "Post Commented",
                                            senderIdMessage: `${result.firstName} commented ${postResult.userId.firstName}'s post`,
                                            body: `${result.firstName} commented on your post`,
                                            notificationType: "Post commented in class"
                                        };
                                        new webNotification(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ respononseCode: 500, responseMessage: "Internal server error" });
                                            }
                                            else {
                                                classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                    { $addToSet: { comments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                    else {
                                        commonFunction.pushNotification(postResult.userId.fcmToken, "Post Commented", `${result.firstName} commented on your post`, (err, notificationResult) => {
                                            if (err) {
                                                return res.send({ response: 500, responseMessage: "Internal server error" });
                                            }
                                            else {
                                                var obj = {
                                                    userId: postResult.userId,
                                                    senderId: req.body.userId,
                                                    senderIdMessage: `${result.firstName} commented ${postResult.userId.firstName}'s post`,
                                                    title: "Post Commented",
                                                    body: `${result.firstName} commented on your post`,
                                                    notificationType: "Post commented in class"
                                                };
                                                new notificationModel(obj).save((saveErr, saveResult) => {
                                                    if (saveErr) {
                                                        return res.send({ respononseCode: 500, responseMessage: "Internal server error" });
                                                    }
                                                    else {
                                                        classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                                            { $addToSet: { comments: comment } },
                                                            { new: true },
                                                            (err2, result2) => {
                                                                if (err2) {

                                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                } else {
                                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                                }
                                                            }
                                                        )
                                                    }
                                                })
                                            }
                                        })
                                    }
                                } else if (req.body.like == "false") {
                                    classPostModel.findOne({
                                        _id: req.body.postId,
                                        postStatus: "ACTIVE",
                                        likes: { $elemMatch: { likedId: result._id } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User haven't liked yet" })
                                        } else {
                                            const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));
                                            classPostModel.findByIdAndUpdate({ _id: req.body.postId }, { $pull: { likes: dislike[0] } },
                                                { new: true }, (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                    }
                                                })
                                        }
                                    })


                                } else if (req.body.comments == "false") {
                                    classPostModel.findOne({
                                        _id: req.body.postId,
                                        postStatus: "ACTIVE",
                                        comments: { $elemMatch: { _id: req.body.commentId } }
                                    }, (err3, result3) => {
                                        if (err3) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else if (!result3) {
                                            return res.send({ responseCode: 404, responseMessage: "User haven't commented yet" })
                                        } else {
                                            const deleteComment = _.filter(result3.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                            console.log("lllllllllllllll", deleteComment)
                                            classPostModel.findByIdAndUpdate({ _id: req.body.postId }, { $pull: { comments: deleteComment[0] } },
                                                { new: true }, (err4, result4) => {
                                                    if (err4) {
                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                    } else if (!result4) {
                                                        return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                    } else {
                                                        return res.send({ responseCode: 200, responseMessage: "Comment deleted successfully", result: result4 })
                                                    }

                                                })

                                        }
                                    })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    sharePostInClass: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    classPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err, postData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                        } else if (!postData) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        } else {
                            classRoom.findOne({ _id: postData.classId, status: "ACTIVE", members: { $elemMatch: { memberId: req.body.memberId, status: "ACTIVE" } } }, (err, classData) => {
                                if (err) {
                                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                                } else if (!classData) {
                                    return res.send({ responseCode: 404, responseMessage: "class not found" })
                                } else {
                                    var object = [{
                                        memberId: req.body.memberId,
                                        sharedTo: []
                                    }]
                                    var arr = req.body.sharedTo;
                                    arr.forEach(a => {
                                        object[0].sharedTo.push({ friendId: a })
                                    })
                                    console.log("My object to be saved is.....", object);
                                    listData.friendList.forEach((item, index) => {
                                        if (item.friendId != null && item.friendId.fcmToken == null) {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Post",
                                                senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                body: `${listData.firstName} shared a post with you`,
                                                notificationType: "Post shared in class"
                                            };
                                            new webNotification(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                        }
                                                    })
                                                }
                                            })

                                        }
                                        else if (item.friendId != null && item.friendId.fcmToken != null) {
                                            commonFunction.pushNotification(item.friendId.fcmToken, "Shared Post", `${listData.firstName} shared a post with you`, (err, notificationResult) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                }
                                                else {
                                                    var obj = {
                                                        userId: item.friendId,
                                                        senderId: req.body.memberId,
                                                        title: "Shared Post",
                                                        body: `${listData.firstName} shared a post with you`,
                                                        senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                        notificationType: "Post shared in class"
                                                    };
                                                    new notificationModel(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                        }
                                                        else {
                                                            classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                                if (err) {
                                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                                }
                                                                else if (!updateData) {
                                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                                }
                                                                else {
                                                                    console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else {
                                            console.log({ responseCode: 404, responseMessage: "Data not found" });
                                        }
                                    })
                                    return res.send({ responseCode: 200, responseMessage: "Post successfully shared" })
                                }
                            })
                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    classPostLocation: (req, res) => {
        try {
            if (!req.body.userId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            } else {
                user.findOne({ _id: req.body.userId, status: "ACTIVE" },
                    (err, result) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                        } else if (!result) {
                            return res.send({ responseCode: 404, responseMessage: "User not found" })
                        } else {
                            classPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                                    } else {
                                        const lat = result1.latitude
                                        const long = result1.longitude
                                        commonFunction.getAddress({ lat, long }, (err2, result2) => {
                                            if (err2) {
                                                return res.send({ responseCode: 500, responseMessage: "Intrnal server error" })
                                            } else {
                                                return res.send({ responseCode: 200, responseMessage: "Post location found successfully", result2 })
                                            }
                                        })
                                    }
                                })
                        }
                    })
            }
        } catch (error) {
            return res.send({ responseCode: 404, responseMessage: "Error in catch !" })
        }
    },

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    viewPostLikesAndCommentInClass: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        classPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })
                            } else {
                                if (req.body.show == "comments") {
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;

                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    ////////////////////////////////////////////////////////////////


    viewClassPost: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            // select: "title description picVideo likes comments",
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic firstName lastName', match: { status: "ACTIVE" } }
                        }
                        classPostModel.paginate({ postStatus: "ACTIVE", privacy: "PUBLIC" }, options
                            , (err1, result1) => {
                                if (err1) {

                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {

                                    return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Post found successfully", result: result1 })
                                }
                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    myClassPost: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        console.log("LLLLLLLLLLLLLLLwwLLLL", err)
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        let options = {
                            page: req.body.pageNumber || 1,
                            limit: req.body.limit || 5,
                            // select: "title description picVideo likes comments",
                            sort: {
                                createdAt: -1
                            },
                            populate: { path: 'userId', select: 'profilePic', match: { status: "ACTIVE" } }
                        }
                        classPostModel.paginate({ userId: req.body.userId, postStatus: "ACTIVE" }, options
                            , (err1, result1) => {
                                if (err1) {
                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                } else if (result1.length == 0) {

                                    return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                } else {
                                    return res.send({ responseCode: 200, responseMessage: "Post found successfully", result: result1 })
                                }
                            })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //------------------------------------------------------------------------------------------------------------------------------------------------------//

    hideAndDeleteClassPost: (req, res) => {
        try {
            if (!req.body.userId && !req.body.postId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        if (req.body.type == "HIDE") {
                            classPostModel.findOneAndUpdate({ _id: req.body.postId, userId: result._id, postStatus: "ACTIVE" },
                                {
                                    $set: { postStatus: "HIDE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Post hide successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "DELETE") {
                            classPostModel.findOneAndUpdate({ _id: req.body.postId, userId: result._id, postStatus: "ACTIVE" },
                                {
                                    $set: { postStatus: "DELETE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Post deleted successfully", result: result1 })
                                    }
                                })
                        }
                        if (req.body.type == "ARCHIVE") {
                            classPostModel.findOneAndUpdate({ _id: req.body.postId, userId: result._id, postStatus: "ACTIVE" },
                                {
                                    $set: { postStatus: "ARCHIVE" }
                                },
                                { new: true },
                                (err1, result1) => {
                                    if (err1) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result1) {
                                        return res.send({ responseCode: 404, responseMessage: "Post not found" })
                                    } else {
                                        return res.send({ responseCode: 200, responseMessage: "Post archive successfully", result: result1 })
                                    }
                                })
                        }

                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },



    //------------------------------------------------------------------------------------------------------------------------------------------------------//
    editClassPostLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        classPostModel.findOne({ _id: req.body.postId, postStatus: { $ne: "DELETE" } }, (err1, result1) => {
                            if (err1) {

                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })

                            }
                            else {

                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                classPostModel.findOneAndUpdate({ 'comments._id': req.body.commentId, postStatus: "ACTIVE" }, { $set: { "comments.$": newComment } },
                                    { new: true }, (err2, result2) => {
                                        if (err2) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                                        }
                                        else if (!result2) {

                                            return res.send({ responseCode: 404, responseMessage: "Post not found" })

                                        }
                                        else {
                                            return res.send({ responseCode: 200, responseMessage: "Comment edited successfully", result2 })
                                        }
                                    })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    //--------------------------------------------------------------------------------------------------------------------------------------------//
    ClassPostViewers: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        classPostModel.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err2, result2) => {
                            if (err2) {
                                log("jjjjjjj", err2)
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result2) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })
                            } else {
                                // var count =result2.viewers;
                                // count=count+1
                                classPostModel.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" },
                                    {
                                        $addToSet: { viewers: result._id }
                                    },
                                    { new: true },
                                    (err1, result1) => {
                                        if (err1) {
                                            log("jjjjjjj", err1)
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        } else {
                                            let viewers = result1.viewers.length;
                                            return res.send({ responseCode: 200, responseMessage: "Post view successfully", result: viewers })
                                        }
                                    })

                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //-----------------------------------------------------------------------------------------------------------------------------

    classDescription: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        classPostModel.find({ classId: req.body.classId, postStatus: "ACTIVE" }).populate("classId userId", "profilePic description members coverPic classRoomName category firstName lastName text").exec((err2, result2) => {
                            if (err2) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (result2.length == 0) {
                                return res.send({ responseCode: 404, responseMessage: "Class post not found" })
                            }
                            else {
                                return res.send({
                                    responseCode: 200,
                                    responseMessage: "Class description found successfully", result: result2
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewClass: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        classRoom.findOne({ _id: req.body.classId, status: "ACTIVE" }, (err2, result2) => {
                            if (err2) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result2) {
                                return res.send({ responseCode: 404, responseMessage: "Class not found" })
                            }
                            else {
                                return res.send({
                                    responseCode: 200,
                                    responseMessage: "Class found successfully", result: result2
                                })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //**__________________________________________________________________________________________________________________________ */
    viewAdv: (req, res) => {
        advertisementModel.aggregate([
            { $match: { status: "ACTIVE" } },
            {
                $project: {
                    _id: 1,
                    "clickBy": 1,
                    "viewers": 1,
                    "status": 1,
                    "userId": 1,
                    "title": 1,
                    "description": 1,
                    "image": 1,
                    "date": 1,
                    "expiryDate": 1,
                    "userName": 1,
                    "cardDetails": 1,
                    "sharedBy": 1,
                    "likes": 1,
                    "comments": 1,
                    "createdAt": 1,
                    "updatedAt": 1,

                    isLiked: {
                        $cond: { if: { $in: [mongoose.Types.ObjectId(req.headers.id), "$likes.likedId"] }, then: true, else: false }
                    },
                    isCommented: {
                        $cond: { if: { $in: [mongoose.Types.ObjectId(req.headers.id), "$comments.commentedUser"] }, then: true, else: false }
                    }
                }
            },
            {
                $match: {
                    $or: [{
                        isLiked: true
                    }, {
                        isCommented: true
                    }]
                }
            }
        ], (err, advData) => {
            if (err) {
                res.send({ responseCode: 404, responseMessage: "Internal server error", err })
            }
            if (advData) {
                res.send({ responseCode: 200, responseMessage: "Get data", advData })
            }
        })
    },


    followUnfollowPage: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, result) => {
                if (error) {
                    res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else {
                    if (req.body.follow == true) {
                        pageModel.findOne({ _id: req.body.pageId, status: "ACTIVE", followers: { $elemMatch: { followerId: result._id } } }, (error2, result2) => {
                            console.log("14211=====>", error2, result2)
                            if (error2) {
                                res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (result2) {
                                res.send({ responseCode: 404, responseMessage: "Already followed" })
                            } else {
                                var followers = {
                                    followerId: result._id,
                                    followTime: new Date(),
                                    userName: `${result.firstName} ${result.lastName}`,
                                };
                                pageModel.findOneAndUpdate({ _id: req.body.pageId }, { $addToSet: { followers: followers } }, { new: true, multi: true }, (error3, result3) => {
                                    if (error3) {
                                        res.send({ responseCode: 500, responseMessage: "Internal server error", error3 })
                                    }
                                    else if (!result3) {
                                        res.send({ responseCode: 404, responseMessage: "Data not found" })
                                    }
                                    else {
                                        res.send({ responseCode: 200, responseMessage: "Page followed successfully" })
                                    }
                                })
                            }
                        })
                    }
                    else if (req.body.follow == false) {
                        pageModel.findOne({ _id: req.body.pageId, status: "ACTIVE" }, (pageError, page) => {
                            if (pageError) {
                                res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else if (!page) {
                                res.send({ responseCode: 404, responseMessage: "Page not found" })
                            }
                            else {
                                const unfollowed = _.filter(page.followers, _.matches({ followerId: result._id }));
                                console.log("I am unfollowing you", unfollowed)
                                pageModel.findOneAndUpdate({ _id: page._id }, { $pull: { followers: unfollowed[0] } }, { new: true }, (error1, result1) => {
                                    if (error1) {
                                        res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else if (!result1) {
                                        res.send({ responseCode: 404, responseMessage: "Data not found", result1 })
                                    }
                                    else {
                                        res.send({ responseCode: 200, responseMessage: "Page unfollowed successfully" })
                                    }
                                })
                            }
                        })
                    }
                }
            })

        }
        catch{
            console.log("I am Error")
            res.send({ responseCode: 500, responseMessage: "Internal server error" })
        }
    },

    pagePostLikeAndComment: (req, res) => {
        console.log("I am here", req.body)
        userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, result) => {
            if (error) {
                res.send({ responseCode: 500, responseMessage: "Internal server error" })
            }
            else if (!result) {
                res.send({ responseCode: 404, responseMessage: "Data not found" })
            }
            else {
                pageModel.findOne({ _id: req.body.pageId, status: "ACTIVE", followers: { $elemMatch: { followerId: result._id } } }, (error2, result2) => {
                    if (error2) {
                        res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (result2) {
                        if (req.body.like == true) {
                            console.log("Req.body")
                            pagePost.findOne({ _id: req.body.postId, likes: { $elemMatch: { likedId: result._id } } }, (invalidPost, post) => {
                                console.log("I amsadmasdbnsdasd", invalidPost, post)
                                if (invalidPost) {
                                    res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                }
                                else if (post) {
                                    res.send({ responseCode: 404, responseMessage: "Already liked" })
                                }
                                else {
                                    var like = {
                                        likedId: result._id,
                                        userPic: result.profilePic,
                                        userName: `${result.firstName} ${result.lastName}`,
                                    };
                                    console.log("aaaaaaaaaaaaaaaaaa", like)
                                    pagePost.findByIdAndUpdate(req.body.postId, { $addToSet: { likes: like } }, { new: true, multi: true }, (postError, postResult) => {
                                        if (postError) {
                                            res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        }
                                        else {
                                            res.send({ responseCode: 200, responseMessage: "Post liked successfully" })
                                        }
                                    })
                                }
                            })
                        }
                        else if (req.body.like == false) {
                            pagePost.findOne({ _id: req.body.postId }, (pageError, page) => {
                                if (pageError) {
                                    res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                }
                                else if (!page) {
                                    res.send({ responseCode: 404, responseMessage: "Page not found" })
                                }
                                else {
                                    const unliked = _.filter(page.likes, _.matches({ likedId: result._id }));
                                    console.log("I am unfollowing you", unliked)
                                    pagePost.findOneAndUpdate({ _id: req.body.postId, }, { $pull: { likes: unliked[0] } }, { new: true }, (error1, result1) => {
                                        if (error1) {
                                            res.send({ responseCode: 500, responseMessage: "Internal server error", error1 })
                                        }
                                        else if (!result1) {
                                            res.send({ responseCode: 404, responseMessage: "Data not found", result1 })
                                        }
                                        else {
                                            res.send({ responseCode: 200, responseMessage: "Page unliked successfully" })
                                        }
                                    })
                                }
                            })
                        }
                        else if (req.body.comments == true) {
                            pagePost.findOne({ _id: req.body.postId, status: "ACTIVE" }, (CommentError, comment) => {
                                console.log("I amsadmasdbnsdasd", CommentError, comment)
                                if (CommentError) {
                                    res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                }
                                else {
                                    var comment = {
                                        commentedUser: result._id,
                                        userPic: result.profilePic,
                                        userName: `${result.firstName} ${result.lastName}`,
                                        comment: req.body.comment,
                                        commentedTime: new Date()
                                    };
                                    pagePost.findByIdAndUpdate(req.body.postId, { $addToSet: { comments: comment } }, { new: true, multi: true }, (postError, postResult) => {
                                        if (postError) {
                                            res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                        }
                                        else {
                                            res.send({ responseCode: 200, responseMessage: "Commented successfully", postResult })
                                        }
                                    })
                                }
                            })
                        }
                        else if (req.body.comments == false) {
                            pagePost.findOne({ _id: req.body.postId }, (pageError, page) => {
                                if (pageError) {
                                    res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                }
                                else if (!page) {
                                    res.send({ responseCode: 404, responseMessage: "Page not found" })
                                }
                                else {
                                    const comment = _.filter(page.comments._id, _.matches({ commentedUser: result._id }));
                                    pagePost.findOneAndUpdate({ _id: req.body.postId, }, { $pull: { comments: comment[0] } }, { new: true }, (error1, result1) => {
                                        if (error1) {
                                            res.send({ responseCode: 500, responseMessage: "Internal server error", error1 })
                                        }
                                        else if (!result1) {
                                            res.send({ responseCode: 404, responseMessage: "Data not found", result1 })
                                        }
                                        else {
                                            res.send({ responseCode: 200, responseMessage: "Comment deleted successfully" })
                                        }
                                    })
                                }
                            })

                        }
                    } else {
                        res.send({ responseCode: 404, responseMessage: "You have not followed the page" })
                    }
                })
            }
        })
    },

    createPage: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessage: "Internal server error" })

                } else if (!result) {
                    res.send({ responseCode: 404, responseMessege: "User not found" })
                } else {
                    if (req.body.pageImage) {
                        var pic = await convertImage()
                    }
                    if (req.body.coverPic) {
                        var coverPicture = await convertCoverPic()
                    }
                    var data = {
                        pageName: req.body.pageName,
                        description: req.body.description,
                        websiteUrl: req.body.websiteUrl,
                        pageImage: pic,
                        coverPic: coverPicture ? coverPicture : " ",
                        adminName: result.firstName + " " + result.lastName,
                        pageAdminId: result._id
                    }
                    var obj = new pageModel(data)

                    obj.save((err1, success) => {
                        if (err1) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                        } else {
                            return res.send({ responseCode: 200, responseMessage: "Page created sucessfully", success })
                        }
                    })
                    function convertImage() {
                        return new Promise((resolve, reject) => {
                            commonFunction.imageUploadCloudinary(req.body.pageImage, (imgError, imgResult) => {
                                if (imgError) {
                                    console.log("Error uploading image")
                                }
                                else {
                                    resolve(imgResult)
                                }
                            }
                            )
                        })

                    }
                    function convertCoverPic() {
                        return new Promise((resolve, reject) => {
                            commonFunction.imageUploadCloudinary(req.body.coverPic, (coverErr, coverResult) => {
                                if (coverErr) {
                                    console.log("Error uploading image")
                                }
                                else {
                                    resolve(coverResult)
                                }
                            }
                            )
                        })
                    }
                }


            })

        } catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Internal server error" })

        }
    },
   pageLikeAndComment:(req,res)=>{
    try {
        if (!req.body.userId) {
            res.send({ responseCode: 401, responseMessage: "Parameter missing" })
        } else {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                if (err) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                } else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    pageModel.findOne({ _id: req.body.pageId, status: "ACTIVE" }).populate('pageAdminId').exec((err, advertiseResult) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!advertiseResult) {
                            return res.send({ responseCode: 404, responseMessage: "Page not found" })
                        }
                        else {
                            if (req.body.like == "true") {
                                pageModel.findOne({
                                    _id: req.body.pageId,
                                    status: "ACTIVE",
                                    likes: { $elemMatch: { likedId: result._id } }
                                }, (err3, result3) => {
                                    if (err3) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    } else if (result3) {
                                        return res.send({ responseCode: 404, responseMessage: "User already liked" })
                                    } else {
                                        var like = {
                                            likedId: result._id,
                                            userName: `${result.firstName} ${result.lastName}`,
                                            userPic: result.profilePic
                                        };
                                        if (advertiseResult.pageAdminId.fcmToken == null) {
                                            var obj = {
                                                userId: advertiseResult.pageAdminId,
                                                senderId: req.body.userId,
                                                title: "Page Liked",
                                                body: `${result.firstName} liked your page`,
                                                senderIdMessage: `${result.firstName} liked on ${advertiseResult.pageAdminId.firstName}' Page`,
                                                notificationType: "Page liked"
                                            };
                                            new webNotification(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                }
                                                else {
                                                    pageModel.findOneAndUpdate({ _id: req.body.pageId, status: "ACTIVE" },
                                                        { $push: { likes: like } },
                                                        { new: true },
                                                        (err1, result1) => {
                                                            if (err1) {
                                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                            } else if (!result1) {
                                                                return res.send({ responseCode: 400, responseMessage: "Page not found" })
                                                            }
                                                            else {
                                                                const count = result1.likes;
                                                                return res.send({ responseCode: 200, responseMessage: "Page liked successfully", likes: count })
                                                            }
                                                        }
                                                    )
                                                }
                                            })

                                        }
                                        else {
                                            commonFunction.pushNotification(advertiseResult.pageAdminId.fcmToken, "Page Liked", `${result.firstName} liked your Page`, (err, notificationResult) => {
                                                if (err) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                }
                                                else {
                                                    var obj = {
                                                        userId: advertiseResult.pageAdminId,
                                                        senderId: req.body.userId,
                                                        title: "Page Liked",
                                                        body: `${result.firstName} liked your Page`,
                                                        senderIdMessage: `${result.firstName} liked on ${advertiseResult.pageAdminId.firstName}' Page`,
                                                        notificationType: "Page liked"
                                                    };
                                                    new notificationModel(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                        }
                                                        else {
                                                            pageModel.findOneAndUpdate({ _id: req.body.pageId, status: "ACTIVE" },
                                                                { $push: { likes: like } },
                                                                { new: true },
                                                                (err1, result1) => {
                                                                    if (err1) {
                                                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                                                    } else if (!result1) {
                                                                        return res.send({ responseCode: 400, responseMessage: "Page not found" })
                                                                    }
                                                                    else {
                                                                        const count = result1.likes;
                                                                        return res.send({ responseCode: 200, responseMessage: "Page liked successfully", likes: count })
                                                                    }
                                                                }
                                                            )
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                    }
                                })

                            } else if (req.body.like == "false") {
                                pageModel.findOne({
                                    _id: req.body.pageId,
                                    status: "ACTIVE",
                                    likes: { $elemMatch: { likedId: result._id } }
                                }, (err3, result3) => {
                                    if (err3) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error11", err3 })
                                    } else if (!result3) {
                                        return res.send({ responseCode: 404, responseMessage: "User havent liked yet" })
                                    } else {
                                        const dislike = _.filter(result3.likes, _.matches({ likedId: result._id }));
                                        console.log("9167==>", dislike)

                                        pageModel.findByIdAndUpdate({ _id: req.body.pageId, status: "ACTIVE" },
                                            { $pull: { likes: dislike[0] } },
                                            { new: true },
                                            (err4, result4) => {
                                                if (err4) {
                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err4 })
                                                } else if (!result4) {
                                                    return res.send({ responseCode: 404, responseMessage: "Unable to update" })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Disliked sucessfully", result: result4 })
                                                }
                                            })
                                    }
                                })

                            } 
                        }
                    })

                }
            })
        }
    } catch (error) {
        res.send({ responseCode: 500, responseMessege: "Something went wrong" })
    }
   },
  
    pagePostList: (req, res) => {
        try {
            var query = { postStatus: { $eq: "ACTIVE" } }
            if (req.body.pageId) {
                query.pageId = req.body.pageId
            }
            var options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 10,
                sort: {
                    createdAt: -1
                },
            }

            pagePost.paginate(query, options, (error, advData) => {
                if (error) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (advData.docs.length == 0) {
                    return res.send({ responseCode: 404, responseMessage: "Post not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Post found successfully", advData })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }

    },
    getMyPage: (req, res) => {
        try {
            var query = { status: { $eq: "ACTIVE" } }
            if (req.body.userId) {
                query.pageAdminId = req.body.userId
            }
            var options = {
                page: req.body.pageNumber || 1,
                limit: req.body.limit || 10,
                sort: {
                    createdAt: -1
                },
            }

            pageModel.paginate(query, options, (error, advData) => {
                console.log(">>>>>>>", error)
                if (error) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (advData.docs.length == 0) {
                    return res.send({ responseCode: 404, responseMessage: "Page not found" })
                }
                else {
                    return res.send({ responseCode: 200, responseMessage: "Page found successfully", advData })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    createPagePost: (req, res) => {
        try {
            if (
                !req.body.userId || !req.body.pageId) {
                return res.send({ responseCode: 501, responseMessage: "Parameter missing" })
            }
            else {
                user.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    console.log("i am in user", result)
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Intrnal server error1" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        pageModel.findById({ _id: req.body.pageId, status: "ACTIVE" }, async (pageErr, pageResult) => {
                            if (pageErr) {
                                return res.send({ responseCode: 500, responseMessage: "Intrnal server error1" })
                            }
                            else if (!pageResult) {
                                return res.send({ responseCode: 404, responseMessage: "User not found" })
                            }
                            else {

                                if (req.body.image) {
                                    var pic = await convertImage()
                                }
                                if (req.body.video) {
                                    var vid = await convertVideo()
                                }

                                if (req.body.document) {
                                    var doc = await convertDoc()
                                }
                                if (req.body.location) {
                                    var loc = await getLocation()
                                }

                                var post = {
                                    text: req.body.text,
                                    userId: result._id,
                                    pageId: pageResult._id,
                                    image: pic ? pic : "",
                                    video: vid ? vid : "",
                                    GIF: req.body.GIF,
                                    document: doc ? doc : "",
                                    location: loc ? loc : "",
                                    sticker: req.body.sticker ? req.body.sticker : " ",
                                    text: req.body.text
                                }
                                if (req.body.privacy == "ONLYME") {
                                    post.privacy = "ONLYME"
                                }
                                var obj = new pagePost(post);
                                obj.save((postErr, postData) => {
                                    if (postErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        return res.send({ responseCode: 200, responseMessage: "Posted successfully", postData })
                                    }
                                })

                                function convertImage() {
                                    return new Promise((resolve, reject) => {
                                        commonFunction.multipleImageUploadCloudinary(req.body.image, (imgError, imgResult) => {
                                            if (imgError) {
                                                console.log("Error uploading image")
                                            }
                                            else {
                                                resolve(imgResult)
                                            }
                                        }
                                        )

                                    })
                                }
                                function convertVideo() {
                                    return new Promise((resolve, reject) => {
                                        commonFunction.multipleImageUploadCloudinary(req.body.video, (videoError, videoResult) => {
                                            if (videoError) {
                                                console.log("Error uploading image")
                                            }
                                            else {
                                                resolve(videoResult)
                                            }
                                        }
                                        )
                                    })
                                }
                                function convertDoc() {
                                    return new Promise((resolve, reject) => {
                                        commonFunction.multipleImageUploadCloudinary(req.body.document, (docError, docResult) => {
                                            if (docError) {
                                                console.log("Error uploading image")
                                            }
                                            else {
                                                resolve(docResult)
                                            }
                                        }
                                        )

                                    })
                                }
                                function getLocation() {
                                    return new Promise((resolve, reject) => {
                                        commonFunction.getLatLong(req.body.location, (locationError, locationResult) => {
                                            if (locationError) {
                                                console.log("Error uploading image")
                                            }
                                            else {
                                                resolve(locationResult)
                                            }
                                        }
                                        )

                                    })
                                }
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
        }
    },


    editPagePostLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            }
            else {
                userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    }
                    else {
                        pagePost.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err1, result1) => {
                            if (err1) {

                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                            }
                            else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })

                            }
                            else {

                                const editComments = _.filter(result1.comments, _.matches({ _id: mongoose.Types.ObjectId(req.body.commentId) }));
                                const newComment = {
                                    _id: editComments[0]._id,
                                    commentedUser: editComments[0].commentedUser,
                                    comment: req.body.comment,
                                    userName: editComments[0].userName,
                                    userPic: editComments[0].userPic,
                                    commentedTime: new Date()
                                }
                                pagePost.findOneAndUpdate({ 'comments._id': req.body.commentId, postStatus: "ACTIVE" }, { $set: { "comments.$": newComment } },
                                    { new: true }, (err2, result2) => {
                                        if (err2) {
                                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })

                                        }
                                        else if (!result2) {

                                            return res.send({ responseCode: 404, responseMessage: "Post not found" })

                                        }
                                        else {
                                            return res.send({ responseCode: 200, responseMessage: "Comment edited successfully", result2 })
                                        }
                                    })
                            }
                        })
                    }
                })
            }
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    replyCommentInPagePost: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (userError, result) => {
                if (userError) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!result) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                }
                else {
                    pagePost.findOne({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" }).populate('comments.commentedUser', 'fcmToken firstName').select({ 'comments.$._id': 1 }).exec((err, postResult) => {
                        if (err) {
                            return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                        }
                        else if (!postResult) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        }
                        else {
                            var deviceToken = postResult.comments[0].commentedUser.fcmToken;
                            var comment = {
                                commentId: req.body.commentId,
                                commentedUser: result._id,
                                comment: req.body.comment,
                                userName: `${result.firstName} ${result.lastName}`,
                                userPic: result.profilePic,
                                commentedTime: new Date()
                            };
                            if (deviceToken == null) {
                                var obj = {
                                    userId: postResult.comments[0].commentedUser._id,
                                    senderId: req.body.userId,
                                    title: "Reply on comment",
                                    body: `${result.firstName} replied on your comment.`,
                                    senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                    notificationType: "Comment replied in page post"
                                };
                                new webNotification(obj).save((saveErr, saveResult) => {
                                    if (saveErr) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        pagePost.findOneAndUpdate({ _id: req.body.postId, "comments._id": req.body.commentId, postStatus: "ACTIVE" },
                                            { $push: { replyComments: comment } },
                                            { new: true },
                                            (err2, result2) => {
                                                if (err2) {
                                                    console.log("13107======>", err2, result2)

                                                    return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                } else {
                                                    return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                }
                                            }
                                        )
                                    }
                                })
                            }
                            else {
                                commonFunction.pushNotification(deviceToken, "Reply on comment", `${result.firstName} replied on your comment.`, (err, notificationResult) => {
                                    if (err) {
                                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                    }
                                    else {
                                        var obj = {
                                            userId: postResult.comments[0].commentedUser._id,
                                            senderId: req.body.userId,
                                            title: "Reply on comment",
                                            body: `${result.firstName} replied on your comment.`,
                                            senderIdMessage: `${result.firstName} replied on ${postResult.comments[0].commentedUser.firstName} comment`,
                                            notificationType: "Comment replied in page post"
                                        };
                                        new notificationModel(obj).save((saveErr, saveResult) => {
                                            if (saveErr) {
                                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                                            }
                                            else {
                                                pagePost.findOneAndUpdate({ _id: req.body.advId, "comments._id": req.body.commentId, postStatus: "ACTIVE" },
                                                    { $push: { replyComments: comment } },
                                                    { new: true },
                                                    (err2, result2) => {
                                                        if (err2) {
                                                            console.log("13107======>", err2, result2)

                                                            return res.send({ responseCode: 500, responseMessage: "Internal server error", err2 })
                                                        } else {
                                                            return res.send({ responseCode: 200, responseMessage: "Comment added successfully", comments: result2 })
                                                        }
                                                    }
                                                )
                                            }
                                        })
                                    }
                                })
                            }

                        }
                    })
                }
            })
        }
        catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    viewPagePostLikesAndComment: (req, res) => {
        try {
            if (!req.body.userId) {
                res.send({ responseCode: 401, responseMessege: "Parameter missing" })
            } else {
                user.findOne({ _id: req.body.userId, status: "ACTIVE" }, async (err, result) => {
                    if (err) {
                        return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    } else if (!result) {
                        return res.send({ responseCode: 404, responseMessage: "User not found" })
                    } else {
                        pagePost.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err1, result1) => {
                            if (err1) {
                                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            } else if (!result1) {
                                return res.send({ responseCode: 404, responseMessage: "Post not found" })
                            } else {
                                if (req.body.show == "comments") {
                                    const comments = result1.comments;
                                    return res.send({ responseCode: 200, responseMessage: "Comments found successfully", comments: comments })
                                } else if (req.body.show == "likes") {
                                    const likes = result1.likes;
                                    return res.send({ responseCode: 200, responseMessage: "Likes found successfully", likes: likes })
                                }
                                else if (req.body.show == "replyComments") {
                                    const replyComments = result1.replyComments;

                                    return res.send({ responseCode: 200, responseMessage: "Reply comments found successfully", replyComments: replyComments })
                                }
                            }
                        })
                    }
                })
            }
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },
    sharePagePost: (req, res) => {
        try {
            userModel.findOne({ _id: req.body.memberId, status: "ACTIVE", friendList: { $elemMatch: { friendId: req.body.sharedTo, status: "ACTIVE" } } }).populate({ path: 'friendList.friendId', match: { _id: { $in: req.body.sharedTo } }, select: 'fcmToken firstName' }).exec((err, listData) => {
                if (err) {
                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                } else if (!listData) {
                    return res.send({ responseCode: 404, responseMessage: "User not found" })
                } else {
                    pagePost.findOne({ _id: req.body.postId, postStatus: "ACTIVE" }, (err, postData) => {
                        if (err) {
                            res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                        } else if (!postData) {
                            return res.send({ responseCode: 404, responseMessage: "Post not found" })
                        } else {
                            pageModel.findOne({ _id: postData.pageId, status: "ACTIVE" }, (err, classData) => {
                                console.log("16029=====>",err,classData)
                                if (err) {
                                    res.send({ responseCode: 500, responseMessage: "Something went wrong" })
                                } else if (!classData) {
                                    return res.send({ responseCode: 404, responseMessage: "Page not found" })
                                } else {
                                    var object = [{
                                        memberId: req.body.memberId,
                                        sharedTo: []
                                    }]
                                    var arr = req.body.sharedTo;
                                    arr.forEach(a => {
                                        object[0].sharedTo.push({ friendId: a })
                                    })
                                    console.log("My object to be saved is.....", object);
                                    listData.friendList.forEach((item, index) => {
                                        if (item.friendId != null && item.friendId.fcmToken == null) {
                                            var obj = {
                                                userId: item.friendId,
                                                senderId: req.body.memberId,
                                                title: "Shared Post",
                                                body: `${listData.firstName} shared a post with you`,
                                                senderIdMessage: `${listData.firstName} shared post with ${item.friendId.firstName}`,
                                                notificationType: "Post shared in Page"
                                            };
                                            new webNotification(obj).save((saveErr, saveResult) => {
                                                if (saveErr) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                }
                                                else {
                                                    pagePost.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                        if (err) {
                                                            console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                        }
                                                        else if (!updateData) {
                                                            console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                        }
                                                        else {
                                                            console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else if (item.friendId != null && item.friendId.fcmToken != null) {
                                            commonFunction.pushNotification(item.friendId.fcmToken, "Shared Post", `${listData.firstName} shared a post with you`, (err, notificationResult) => {
                                                if (err) {
                                                    console.log({ responseCode: 500, responseMessage: "Intrnal server error" })
                                                }
                                                else {
                                                    var obj = {
                                                        userId: item.friendId,
                                                        senderId: req.body.memberId,
                                                        title: "Shared Post",
                                                        body: `${listData.firstName} shared a post with you`,
                                                        notificationType: "Post shared in Page"
                                                    };
                                                    new notificationModel(obj).save((saveErr, saveResult) => {
                                                        if (saveErr) {
                                                            console.log({ responseCode: 500, responseMessage: "Intrnal server error" });
                                                        }
                                                        else {
                                                            pagePost.findOneAndUpdate({ _id: req.body.postId, postStatus: "ACTIVE" }, { $push: { sharedBy: object } }, { new: true }, (err, updateData) => {
                                                                if (err) {
                                                                    console.log({ responseCode: 500, responseMessege: "Something went wrong" })
                                                                }
                                                                else if (!updateData) {
                                                                    console.log({ responseCode: 404, responseMessage: "Failed to update the post shared post" })
                                                                }
                                                                else {
                                                                    console.log({ responseCode: 200, responseMessage: "Post successfully shared", updateData })
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                        else {
                                            console.log({ responseCode: 404, responseMessage: "Data not found" });
                                        }
                                    })
                                    return res.send({ responseCode: 200, responseMessage: "Post successfully shared" })
                                }
                            })
                        }
                    })
                }
            })
        } catch (error) {
            res.send({ responseCode: 500, responseMessege: "Something went wrong" })
        }
    },

    //**__________________________________________________________________________________________________________________________ */

    viewPage: (req, res) => {
        pagePost.aggregate([
            { $match: { postStatus: "ACTIVE" } },
            {
                $match: {
                    pageId: mongoose.Types.ObjectId(req.body.pageId)
                }
            },
            {
                $project: {
                    _id: 1,
                    "tagFriends": 1,
                    "document": 1,
                    "image": 1,
                    "video": 1,
                    "viewers": 1,
                    "poll": 1,
                    "sticker": 1,
                    "GIF": 1,
                    "privacy": 1,
                    "timeLine": 1,
                    "postStatus": 1,
                    "userId": 1,
                    "pageId": 1,
                    "location": 1,
                    "likes": 1,
                    "sharedBy": 1,
                    "comments": 1,
                    "createdAt": 1,
                    "updatedAt": 1,
                    isLiked: {
                        $cond: { if: { $in: [mongoose.Types.ObjectId(req.body.userId), "$likes.likedId"] }, then: true, else: false }
                    }
                }
            }
        ], (err, advData) => {
            console.log("14704=====>", err, advData)
            if (err) {
                res.send({ responseCode: 404, responseMessage: "Internal server error", err })
            }
            if (advData) {
                res.send({ responseCode: 200, responseMessage: "Get data", advData })
            }
        })
    },
    getPageForFollow: (req, res) => {
        pageModel.aggregate([
            { $match: { status: "ACTIVE" } },

            {
                $project: {
                    _id: 1,
                    "tagFriends": 1,
                    "privacy": 1,
                    "status": 1,
                    "pageName": 1,
                    "description": 1,
                    "websiteUrl": 1,
                    "pageImage": 1,
                    "coverPic": 1,
                    "adminName": 1,
                    "pageAdminId": 1,
                    "createdAt": 1,
                    "updatedAt": 1,
                    "followers": 1,
                    isFollow: {
                        $cond: { if: { $in: [mongoose.Types.ObjectId(req.headers.id), "$followers.followerId"] }, then: true, else: false }
                    }
                }
            }
        ], (err, advData) => {
            console.log("14704=====>", err, advData)
            if (err) {
                res.send({ responseCode: 404, responseMessage: "Internal server error", err })
            }
            if (advData) {
                res.send({ responseCode: 200, responseMessage: "Get data", advData })
            }
        })
    },
    //**__________________________________________________ */
    getFriendList: async (req, res) => {
        try {
            let imUser = await userModel.findOne({ _id: req.headers._id });
            let myFriends = imUser.friendList.filter(a => a.status == "ACTIVE").map(b => b.friendId.toString());
            console.log("16506=====>",myFriends)
            let mutual = await userModel.find({ _id: { $in: myFriends }, status: "ACTIVE" });
            let allFriends = mutual.map(itm => { return { mutual: itm.friendList.filter(km => myFriends.includes(km.friendId.toString())).length, profilePic: itm.profilePic, firstName: itm.firstName,_id:itm._id, email:itm.email } });
            res.send({ responseCode: 200, responseMessage: "Friend List found successfully",allFriends });
        } catch (error) {
            
            res.send({ responseCode: 500, responseMessage: "Internal Server Error...", error });
        }
    },
   
    changeProductStatusByBuyer: async (req, res) => {
        var set = {};
        if (req.body.orderStatus) {
            set['orderStatus'] = req.body.orderStatus
        }
       if (req.body.orderId && req.body.productId) {
           productPayment.update({ _id: req.body.orderId, status: "ACTIVE" }, {
               $set: { "productDescription.$[ids].status": "Cancel" }
           }, { arrayFilters: [{ "ids._id": { $in: req.body.productId } }], multi: true }
           ).then(async (updatedPAy, err) => {
               console.log("14902========>", updatedPAy, err)
               if (updatedPAy.nModified != 0) {
                   let payPro = await productPayment.findOne({ _id: req.body.orderId });
                   let productName = payPro.productDescription.filter(lm => lm._id.toString() == req.body.productId[0])[0].productName
                   console.log(productName)
                   let note = await notifyOrder(req.body.orderId, productName)
                   res.send({ responseCode: 200, responseMessage: "Order updated successfully", note })
               } else {
                   res.send({ responseCode: 404, responseMessage: "Order cant update" })
               }
           })
           async function notifyOrder(orderId, productName) {
               let admin = await userModel.findOne({ userType: "ADMIN", status: "ACTIVE" });
               let userData = await productPayment.findOne({ status: "ACTIVE", _id: req.body.orderId }).populate("userId");
               console.log("14975====>", userData)

               let adminNote = `cancelled:${productName} in the order with order ID ${orderId} has been requested for cancel by the user ${userData.userName}`;
               let customerNote = `cancelled:${productName} in your order with order ID ${orderId} has been  cancelled `;
               let adminNotish = {
                   userId: admin._id,
                   title: "Product Cancelled",
                   body: adminNote,
                   notificationType: "Product cancelled in buying/selling section"
               }
               let customerNotish = {
                   userId: userData.userId,
                   title: "Product Cancelled",
                   body: customerNote,
                   notificationType: "Product Cancelled in buying/selling section"
               }

               //  let consumer = await userModel.findOne({_id:req.body.userId,status:"ACTIVE"});
               if (userData.userId.fcmToken != null) {
                   commonFunction.pushNotification(userData.userId.fcmToken, "Product Cancelled", `Cancelled:${productName} in your order with order ID ${orderId} has been  cancelled`, async (err, rest) => {
                       if (rest) {
                           new notificationModel({
                               userId: userData.userId,
                               title: "Product cancelled",
                               body: `cancelled:${productName} in your order with order ID ${orderId} has been  cancelled `,
                               notificationType: "Product cancelled in buying/selling section"
                           }).save();
                           await webNotification.create(adminNotish)
                       }
                   })
               } if (userData.userId.fcmToken === null) {
                   await webNotification.create(adminNotish, customerNotish)
               }
               //  await  notificationModel.create(adminNotish , customerNotish)
               return "All Notification sent fuccessfully"
           }
       }
       else if (req.body.orderId && !req.body.productId) {
           productPayment.update({ _id: req.body.orderId, status: "ACTIVE" }, {
               $set: { "productDescription.$[ids].status": "Cancel",orderStatus:"Cancel"}
           }, { arrayFilters: [{ "ids.status":"Cancel"}], multi: true,new:true }
           ).then(async (updatedPAy, err) => {
               console.log("14902========>", updatedPAy, err)
               if (updatedPAy.nModified != 0) {
                   let payPro = await productPayment.findOne({ _id: req.body.orderId });
                //    let productName = payPro.productDescription.filter(lm => lm._id.toString() == req.body.productId[0])[0].productName
                //    console.log(productName)
                   let note = await notifyOrder(req.body.orderId)
                   res.send({ responseCode: 200, responseMessage: "Order updated successfully", note })
               } else {
                   res.send({ responseCode: 404, responseMessage: "Order cant update" })
               }
           })
           async function notifyOrder(orderId) {
               let admin = await userModel.findOne({ userType: "ADMIN", status: "ACTIVE" });
               let userData = await productPayment.findOne({ status: "ACTIVE", _id: req.body.orderId }).populate("userId");
               console.log("14975====>", userData)

               let adminNote = `cancelled product in the order with order ID ${orderId} has been requested for cancel by the user ${userData.userName}`;
               let customerNote = `cancelled product in your order with order ID ${orderId} has been  cancelled `;
               let adminNotish = {
                   userId: admin._id,
                   title: "Product Cancelled",
                   body: adminNote,
                   notificationType: "Product cancelled in buying/selling section"
               }
               let customerNotish = {
                   userId: userData.userId,
                   title: "Product Cancelled",
                   body: customerNote,
                   notificationType: "Product Cancelled in buying/selling section"
               }

               //  let consumer = await userModel.findOne({_id:req.body.userId,status:"ACTIVE"});
               if (userData.userId.fcmToken != null) {
                   commonFunction.pushNotification(userData.userId.fcmToken, "Product Cancelled", `Cancelled product in your order with order ID ${orderId} has been  cancelled`, async (err, rest) => {
                       if (rest) {
                           new notificationModel({
                               userId: userData.userId,
                               title: "Product cancelled",
                               body: `cancelled product in your order with order ID ${orderId} has been  cancelled `,
                               notificationType: "Product cancelled in buying/selling section"
                           }).save();
                           await webNotification.create(adminNotish)
                       }
                   })
               } if (userData.userId.fcmToken === null) {
                   await webNotification.create(adminNotish, customerNotish)
               }
               //  await  notificationModel.create(adminNotish , customerNotish)
               return "All Notification sent fuccessfully"
           }
       }
       
    },
    changeOrderStatusByBuyer: (req, res) => {
        userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, userData) => {
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error", error })
            }
            else if (!userData) {
                return res.send({ responseCode: 404, responseMessage: "Data not found" })
            }
            else {
                var set = {};
                if (req.body.orderStatus) {
                    set['orderStatus'] = req.body.orderStatus
                }
                if (req.body.orderId && req.body.productId) {
                    productPayment.update({ _id: req.body.orderId, status: "ACTIVE" }, {
                        $set: { "productDescription.$[ids].status": "Return" }
                    }, { arrayFilters: [{ "ids._id": { $in: req.body.productId } }], multi: true }
                    ).then(async (updatedPAy, err) => {
                        console.log("14902========>", updatedPAy, err)
                        if (updatedPAy.nModified != 0) {
                            let payPro = await productPayment.findOne({ _id: req.body.orderId });
                            let productName = payPro.productDescription.filter(lm => lm._id.toString() == req.body.productId[0])[0].productName
                            console.log(productName)
                            let note = await notifyOrder(req.body.orderId, userData, productName)
                            res.send({ responseCode: 200, responseMessage: "Order updated successfully", note })
                        } else {
                            res.send({ responseCode: 404, responseMessage: "Order cant update" })

                        }
                    })
                    async function notifyOrder(orderId, userData, productName) {
                        console.log("14919===>", orderId, userData, productName)
                        let admin = await userModel.findOne({ userType: "ADMIN", status: "ACTIVE" });
                        let adminNote = `Returned:${productName} in the order with order ID ${orderId} has been requested for return by the user ${userData.firstName}`;
                        let customerNote = `Returned:${productName} in your order with order ID ${orderId} has been  returned `;
                        let adminNotish = {
                            userId: admin._id,
                            senderId: userData._id,
                            title: "Product Returned",
                            body: adminNote,
                            notificationType: "Product returned in buying/selling section"
                        }
                        let customerNotish = {
                            userId: userData._id,
                            title: "Product Returned",
                            body: customerNote,
                            notificationType: "Product returned in buying/selling section"
                        }

                        //  let consumer = await userModel.findOne({_id:req.body.userId,status:"ACTIVE"});
                        if (userData.fcmToken != null) {
                            commonFunction.pushNotification(userData.fcmToken, "Product Returned", `Returned:${productName} in your order with order ID ${orderId} has been  returned`, (err, rest) => {
                                if (rest) {
                                    new notificationModel({
                                        userId: userData._id,
                                        title: "Product Returned",
                                        body: `Returned:${productName} in your order with order ID ${orderId} has been  returned `,
                                        notificationType: "Product returned in buying/selling section"
                                    }).save();
                                }
                            })
                        } if (userData.fcmToken === null) {
                            await webNotification.create(adminNotish, customerNotish)
                        }
                        //  await  notificationModel.create(adminNotish , customerNotish)
                        return "All Notification sent fuccessfully"
                    }
                }
                else if (req.body.orderId && !req.body.productId) {
                    productPayment.update({ _id: req.body.orderId, status: "ACTIVE" }, {
                        $set: { "productDescription.$[ids].status": "Return","orderStatus":"Return"}
                    }, { arrayFilters: [{ "ids.status":"Return"}], multi: true,new:true }
                    ).then(async (updatedPAy, err) => {
                        console.log("14902========>", updatedPAy, err)
                        if (updatedPAy.nModified != 0) {
                            let payPro = await productPayment.findOne({ _id: req.body.orderId });
                            // let productName = payPro.productDescription.filter(lm => lm._id.toString() == req.body.productId[0])[0].productName
                            // console.log(productName)
                            let note = await notifyOrder(req.body.orderId, userData)
                            res.send({ responseCode: 200, responseMessage: "Order updated successfully", note })
                        } else {
                            res.send({ responseCode: 404, responseMessage: "Order cant update" })

                        }
                    })
                    async function notifyOrder(orderId, userData) {
                        // console.log("14919===>", orderId, userData, productName)
                        let admin = await userModel.findOne({ userType: "ADMIN", status: "ACTIVE" });
                        let adminNote = `Returned Product in the order with order ID ${orderId} has been requested for return by the user ${userData.firstName}`;
                        let customerNote = `Returned Product in your order with order ID ${orderId} has been  returned `;
                        let adminNotish = {
                            userId: admin._id,
                            senderId: userData._id,
                            title: "Product Returned",
                            body: adminNote,
                            notificationType: "Product returned in buying/selling section"
                        }
                        let customerNotish = {
                            userId: userData._id,
                            title: "Product Returned",
                            body: customerNote,
                            notificationType: "Product returned in buying/selling section"
                        }

                        //  let consumer = await userModel.findOne({_id:req.body.userId,status:"ACTIVE"});
                        if (userData.fcmToken != null) {
                            commonFunction.pushNotification(userData.fcmToken, "Product Returned", `Returned product in your order with order ID ${orderId} has been  returned`, (err, rest) => {
                                if (rest) {
                                    new notificationModel({
                                        userId: userData._id,
                                        title: "Product Returned",
                                        body: `Returned product in your order with order ID ${orderId} has been returned `,
                                        notificationType: "Product returned in buying/selling section"
                                    }).save();
                                }
                            })
                        } if (userData.fcmToken === null) {
                            await webNotification.create(adminNotish, customerNotish)
                        }
                        //  await  notificationModel.create(adminNotish , customerNotish)
                        return "All Notification sent fuccessfully"
                    }
                }
            }
        })
    },
//**_____________________________________________________________ */
    editPage: (req, res) => {
        userModel.findOne({ _id: req.body.userId, status: "ACTIVE" }, (error, result) => {
            if (error) {
                res.send({ responseCode: 500, responseMessage: "Internal server error" })
            }
            else if (!result) {
                res.send({ responseCode: 404, responseMessage: "Data not found" })
            }
            else {
                pageModel.findOne({ _id: req.body.pageId, pageAdminId: result._id, status: "ACTIVE" }, async (pageErr, pageResult) => {
                    if (pageErr) {
                        res.send({ responseCode: 500, responseMessage: "Internal server error" })
                    }
                    else if (!pageResult) {
                        res.send({ responseCode: 404, responseMessage: "Data not found" })
                    }
                    else {
                        var set = {}
                        if (req.body.pageName) {
                            set["pageName"] = req.body.pageName
                        }
                        if (req.body.description) {
                            set["description"] = req.body.description
                        }
                        if (req.body.websiteUrl) {
                            set["websiteUrl"] = req.body.websiteUrl
                        }
                        if (req.body.category) {
                            set["category"] = req.body.category
                        }
                        if (req.body.pageImage) {
                            set["pageImage"] = await convertImage()
                        }
                        if (req.body.coverPic) {
                            set["coverPic"] = await convertCoverPic()
                        }

                        pageModel.findOneAndUpdate({ _id: pageResult._id, status: "ACTIVE" }, { $set: set }, { new: true }, async (updateErr, updateResult) => {
                            if (updateErr) {
                                res.send({ responseCode: 500, responseMessage: "Internal server error" })
                            }
                            else {
                                res.send({ responseCode: 200, responseMessage: "Data updated successfully", updateResult })
                            }
                        })
                        //*********************Function for profile pic upload *************************************/
                        function convertImage() {
                            return new Promise((resolve, reject) => {
                                commonFunction.imageUploadCloudinary(req.body.pageImage, (error, upload) => {
                                    if (error) {
                                        console.log("Error uploading image")
                                    }
                                    else {
                                        resolve(upload)
                                    }
                                })
                            })
                        }
                        //*************************function for video upload*****************************/
                        function convertCoverPic() {
                            return new Promise((resolve, reject) => {
                                console.log("i am in cover")
                                commonFunction.imageUploadCloudinary(req.body.coverPic, (error, upload) => {
                                    if (error) {
                                        console.log("Error uploading image")
                                    }
                                    else {
                                        console.log("i am in cover", upload)
                                        resolve(upload)
                                    }
                                })
                            })
                        }
                    }
                })
            }
        })
    },
      viewUserDetails: (req, res) => {
        userModel.findOne({ _id: req.body.userId }).select('-permission').exec((error, result) => {
            if (error) {
                return res.send({ responseCode: 500, responseMessage: "Internal server error" })
            }
            else if (!result) {
                return res.send({ responseCode: 404, responseMessage: "Data not found" })
            }
            else {

                return res.send({ responseCode: 200, responseMessage: "Data found successfully", result })
            }
        })
    },
    activeAndBlockUser: async (req, res) => {
        try {
            userModel.findOneAndUpdate({ _id: req.body.userId, status: { $in: ["ACTIVE", "BLOCK"] } }, { $set: { status: req.body.status } }, { new: true }, (userErr, userResult) => {
                if (userErr) {
                    return res.send({ responseCode: 500, responseMessage: "Internal server error" })
                }
                else if (!userResult) {
                    return res.send({ responseCode: 404, responseMessage: "Data not found" })
                }
                else{
                    return res.send({ responseCode: 200, responseMessage: "Data updated successfully", userResult })

                }
            })
        }
        catch (error) {
            response(res, ErrorCode.SOMETHING_WRONG, [], ErrorMessage.SOMETHING_WRONG)
        }
    }
}
   