{"version":3,"sources":["webpack://OTPAuth/ [synthetic:base] ","webpack://OTPAuth/ [synthetic:es6/util/arrayiterator] ","webpack://OTPAuth/ [synthetic:util/defines] ","webpack://OTPAuth/ [synthetic:util/defineproperty] ","webpack://OTPAuth/ [synthetic:util/global] ","webpack://OTPAuth/ [synthetic:es6/symbol] ","webpack://OTPAuth/webpack/universalModuleDefinition","webpack://OTPAuth/otpauth.min.js","webpack://OTPAuth/webpack/bootstrap","webpack://OTPAuth/./src/utils.js","webpack://OTPAuth//tmp/tmp-12390uO6oobIkjxS6.tmp","webpack://OTPAuth/./src/crypto.js","webpack://OTPAuth/(webpack)/buildin/global.js","webpack://OTPAuth/./src/secret.js","webpack://OTPAuth/./src/uri.js","webpack://OTPAuth/./src/otp.js","webpack://OTPAuth/./src/main.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","__webpack_require__.d","name","getter","o","Object","defineProperty","enumerable","get","r","__webpack_require__.r","Symbol","toStringTag","value","t","__webpack_require__.t","mode","__esModule","ns","create","key","bind","n","__webpack_require__.n","getDefault","getModuleExports","__webpack_require__.o","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","global","Utils","InternalUtils","uint","decode","Utils.uint.decode","buf","arr","Uint8Array","num","length","encode","Utils.uint.encode","ArrayBuffer","acc","raw","Utils.raw.decode","str","String","fromCharCode","Utils.raw.encode","charCodeAt","b32","alphabet","Utils.b32.decode","bits","Utils.b32.encode","strUpp","toUpperCase","index","idx","indexOf","TypeError","hex","Utils.hex.decode","hexByte","toString","Utils.hex.encode","parseInt","substr","isNode","require","InternalUtils.require","eval","sjcl","cipher","hash","keyexchange","misc","codec","exception","corrupt","message","this.toString","invalid","bug","notReady","bitSlice","a","bstart","bend","bitArray","_shiftRight","slice","undefined","clamp","extract","blength","sh","Math","floor","x","concat","a1","a2","last","shift","getPartial","bitLength","len","ceil","partial","_end","round","equal","b","carry","out","push","shift2","last2","pop","_xor4","y","byteswapM","v","globals","globals.ArrayBuffer","DataView","globals.DataView","arrayBuffer","fromBits","padding","padding_count","ol","tmp","setUint32","byteLength","buffer","smallest","setUint8","getUint8","toBits","inView","getUint32","hexDumpBuffer","stringBufferView","string","getUint16","width","Array","join","console","log","sha1","sjcl.hash.sha1","_h","_buffer","_length","reset","sjcl.hash.sha1.hash","data","update","finalize","blockSize","_init","utf8String","nl","Uint32Array","j","_block","subarray","splice","h","_key","_f","_S","words","w","e","sha256","sjcl.hash.sha256","_precompute","sjcl.hash.sha256.hash","frac","prime","factor","isPrime","pow","k","h0","h1","h2","h3","h4","h5","h6","h7","sha512","sjcl.hash.sha512","sjcl.hash.sha512.hash","_initr","_keyr","frac2","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","wrh","wrl","gamma0xh","gamma0xl","gamma0h","gamma0l","gamma1xh","gamma1xl","gamma1h","gamma1l","wr7h","wr16h","wr16l","wr7l","chh","chl","majh","majl","sigma0h","sigma0l","krh","krl","t1l","t1h","t2l","t2h","hmac","sjcl.misc.hmac","Hash","_hash","exKey","bs","_baseHash","_resultHash","encrypt","mac","sjcl.misc.hmac.prototype.mac","_updated","digest","sjcl.misc.hmac.prototype.reset","sjcl.misc.hmac.prototype.update","sjcl.misc.hmac.prototype.digest","result","Crypto","sjcl__WEBPACK_IMPORTED_MODULE_0__","NodeCrypto","_utils_js__WEBPACK_IMPORTED_MODULE_1__","bufferFrom","Buffer","from","arrbuf","nodeBuf","bufferTo","randomBytes","Crypto.randomBytes","size","hmacDigest","Crypto.hmacDigest","algorithm","createHmac","crypto","getRandomValues","msCrypto","warn","random","toLowerCase","g","Function","window","utils","src_crypto","secret_Secret","constructor","fromRaw","fromB32","fromHex","configurable","writable","OTPURI_REGEX","SECRET_REGEX","ALGORITHM_REGEX","INTEGER_REGEX","POSITIVE_INTEGER_REGEX","uri_URI","parse","uri","uriGroups","decodeURIComponent","match","error","isArray","URIError","uriType","uriLabel","split","uriParams","reduce","cur","pairArr","pairKey","pairVal","config","OTP","otp_HOTP","counter","test","otp_TOTP","period","label","issuer","secret","digits","stringify","otp","legacyIssuer","isTOTP","encodeURI","generate","pad","offset","validate","token","searchToken","generatedToken","timestamp","Date","now","version"],"mappings":"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","file":"otpauth.min.js","sourcesContent":["","","","","","","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OTPAuth\"] = factory();\n\telse\n\t\troot[\"OTPAuth\"] = factory();\n})(this, function() {\nreturn ","/*! otpauth v3.2.3 | (c) Héctor Molinero Fernández <hector@molinero.dev> | https://github.com/hectorm/otpauth | MIT */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OTPAuth\"] = factory();\n\telse\n\t\troot[\"OTPAuth\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Utils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return InternalUtils; });\n/**\n * An object containing some utilities.\n * @type {Object}\n */\nconst Utils = {};\n\n/**\n * UInt conversion.\n * @type {Object}\n */\nUtils.uint = {};\n\n/**\n * Converts an ArrayBuffer to an integer.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {number} Integer.\n */\nUtils.uint.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet num = 0;\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnum *= 256;\n\t\tnum += arr[i];\n\t}\n\n\treturn num;\n};\n\n/**\n * Converts an integer to an ArrayBuffer.\n * @param {number} num Integer.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.uint.encode = function (num) {\n\tconst buf = new ArrayBuffer(8);\n\tconst arr = new Uint8Array(buf);\n\tlet acc = num;\n\n\tfor (let i = 7; i >= 0; i--) {\n\t\tif (acc === 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tarr[i] = acc & 255;\n\t\tacc -= arr[i];\n\t\tacc /= 256;\n\t}\n\n\treturn buf;\n};\n\n/**\n * Raw string conversion.\n * @type {Object}\n */\nUtils.raw = {};\n\n/**\n * Converts an ArrayBuffer to a string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} String.\n */\nUtils.raw.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a string to an ArrayBuffer.\n * @param {string} str String.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.raw.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tarr[i] = str.charCodeAt(i);\n\t}\n\n\treturn buf;\n};\n\n/**\n * Base32 string conversion.\n * @type {Object}\n */\nUtils.b32 = {};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */\nUtils.b32.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n/**\n * Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @see https://github.com/LinusU/base32-decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Base32 string.\n */\nUtils.b32.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tvalue = (value << 8) | arr[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\tstr += Utils.b32.alphabet[(value >>> bits - 5) & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\tstr += Utils.b32.alphabet[(value << 5 - bits) & 31];\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a base32 string to an ArrayBuffer (RFC 4648).\n * @see https://github.com/LinusU/base32-encode\n * @param {string} str Base32 string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.b32.encode = function (str) {\n\tconst strUpp = str.toUpperCase();\n\tconst buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet index = 0;\n\n\tfor (let i = 0; i < strUpp.length; i++) {\n\t\tlet idx = Utils.b32.alphabet.indexOf(strUpp[i]);\n\n\t\tif (idx === -1) {\n\t\t\tthrow new TypeError('Invalid character found: ' + strUpp[i]);\n\t\t}\n\n\t\tvalue = (value << 5) | idx;\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\tarr[index++] = (value >>> bits - 8) & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn buf;\n};\n\n/**\n * Hexadecimal string conversion.\n * @type {Object}\n */\nUtils.hex = {};\n\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Hexadecimal string.\n */\nUtils.hex.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst hexByte = arr[i].toString(16);\n\n\t\tstr += hexByte.length === 1\n\t\t\t? '0' + hexByte\n\t\t\t: hexByte;\n\t}\n\n\treturn str.toUpperCase();\n};\n\n/**\n * Converts a hexadecimal string to an ArrayBuffer.\n * @param {string} str Hexadecimal string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.hex.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length / 2);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = parseInt(str.substr(i * 2, 2), 16);\n\t}\n\n\treturn buf;\n};\n\n/**\n * An object containing some utilities (for internal use only).\n * @private\n * @type {Object}\n */\nconst InternalUtils = {};\n\n/**\n * Detect if running in \"Node.js\".\n * @type {boolean}\n */\n// eslint-disable-next-line dot-notation\nInternalUtils.isNode = Object.prototype.toString.call(global['process']) === '[object process]';\n\n/**\n * Dynamically import \"Node.js\" modules.\n * @param {string} name Name.\n * @returns {Object} Module.\n */\nInternalUtils.require = function (name) {\n\t// eslint-disable-next-line no-eval\n\treturn InternalUtils.isNode ? eval('require')(name) : null;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(undefined));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n  /** Convert from an ArrayBuffer to a bitArray. */\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements). \n        // The problem is that if we use Uint32Array instead of Array, \n        // the length of Uint32Array cannot be changed. Thus, we replace words with a \n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n  return (new sjcl.hash.sha512()).update(data).finalize();\n};\n\nsjcl.hash.sha512.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 1024,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n        var c = new Uint32Array(b);\n        var j = 0;\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(c.subarray(32 * j, 32 * (j+1)));\n            j += 1;\n        }\n        b.splice(0, 32 * j);\n    } else {\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(b.splice(0,32));\n        }\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 16 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 32 words, less the 4 length words.\n    for (i = b.length + 4; i & 31; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(0);\n    b.push(0);\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,32));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-512 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n\n  /**\n   * Least significant 24 bits of SHA512 initialization values.\n   *\n   * Javascript only has 53 bits of precision, so we compute the 40 most\n   * significant bits and add the remaining 24 bits as constants.\n   *\n   * @private\n   */\n  _initr: [ 0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179 ],\n\n  /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n\n  /**\n   * The SHA-512 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n\n  /**\n   * Least significant 24 bits of SHA512 key values.\n   * @private\n   */\n  _keyr:\n  [0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118,\n   0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235, 0x692694,\n   0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5,\n   0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725, 0x03826f, 0x0e6e70,\n   0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b,\n   0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218, 0x65a910, 0x71202a, 0xbbd1b8,\n   0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3,\n   0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec, 0x631e28, 0x82bde9, 0xc67915, 0x72532b,\n   0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b,\n   0x047d84, 0xc72493, 0xc9bebc, 0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817],\n\n  /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    // XXX: This code is for precomputing the SHA256 constants, change for\n    //      SHA512 and re-enable.\n    var i = 0, prime = 2, factor , isPrime;\n\n    function frac(x)  { return (x-Math.floor(x)) * 0x100000000 | 0; }\n    function frac2(x) { return (x-Math.floor(x)) * 0x10000000000 & 0xff; }\n\n    for (; i<80; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i*2] = frac(Math.pow(prime, 1/2));\n          this._init[i*2+1] = (frac2(Math.pow(prime, 1/2)) << 24) | this._initr[i];\n        }\n        this._key[i*2] = frac(Math.pow(prime, 1/3));\n        this._key[i*2+1] = (frac2(Math.pow(prime, 1/3)) << 24) | this._keyr[i];\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-512.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var i, wrh, wrl,\n        h = this._h,\n        k = this._key,\n        h0h = h[ 0], h0l = h[ 1], h1h = h[ 2], h1l = h[ 3],\n        h2h = h[ 4], h2l = h[ 5], h3h = h[ 6], h3l = h[ 7],\n        h4h = h[ 8], h4l = h[ 9], h5h = h[10], h5l = h[11],\n        h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n\t// When words is passed to _block, it has 32 elements. SHA512 _block\n\t// function extends words with new elements (at the end there are 160 elements). \n\t// The problem is that if we use Uint32Array instead of Array, \n\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t// normal Array here.\n        w = Array(160); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<32; j++){\n    \t    w[j] = words[j]; \n        }\n    } else {\n\tw = words;\n    } \n\n    // Working variables\n    var ah = h0h, al = h0l, bh = h1h, bl = h1l,\n        ch = h2h, cl = h2l, dh = h3h, dl = h3l,\n        eh = h4h, el = h4l, fh = h5h, fl = h5l,\n        gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n\n    for (i=0; i<80; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        wrh = w[i * 2];\n        wrl = w[i * 2 + 1];\n      } else {\n        // Gamma0\n        var gamma0xh = w[(i-15) * 2];\n        var gamma0xl = w[(i-15) * 2 + 1];\n        var gamma0h =\n          ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\n          ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\n           (gamma0xh >>> 7);\n        var gamma0l =\n          ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\n          ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\n          ((gamma0xh << 25) | (gamma0xl >>> 7));\n\n        // Gamma1\n        var gamma1xh = w[(i-2) * 2];\n        var gamma1xl = w[(i-2) * 2 + 1];\n        var gamma1h =\n          ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\n          ((gamma1xh << 3)  | (gamma1xl >>> 29)) ^\n           (gamma1xh >>> 6);\n        var gamma1l =\n          ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\n          ((gamma1xl << 3)  | (gamma1xh >>> 29)) ^\n          ((gamma1xh << 26) | (gamma1xl >>> 6));\n\n        // Shortcuts\n        var wr7h = w[(i-7) * 2];\n        var wr7l = w[(i-7) * 2 + 1];\n\n        var wr16h = w[(i-16) * 2];\n        var wr16l = w[(i-16) * 2 + 1];\n\n        // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n        wrl = gamma0l + wr7l;\n        wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        wrl += gamma1l;\n        wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        wrl += wr16l;\n        wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\n      }\n\n      w[i*2]     = wrh |= 0;\n      w[i*2 + 1] = wrl |= 0;\n\n      // Ch\n      var chh = (eh & fh) ^ (~eh & gh);\n      var chl = (el & fl) ^ (~el & gl);\n\n      // Maj\n      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n      // Sigma0\n      var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\n      // Sigma1\n      var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n      var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n\n      // K(round)\n      var krh = k[i*2];\n      var krl = k[i*2+1];\n\n      // t1 = h + sigma1 + ch + K(round) + W(round)\n      var t1l = hl + sigma1l;\n      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l += chl;\n      t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l += krl;\n      t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\n      t1l = t1l + wrl|0;   // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n      t1h += wrh + ((t1l >>> 0) < (wrl >>> 0) ? 1 : 0);\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl;\n      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n\n    // Intermediate hash\n    h0l = h[1] = (h0l + al) | 0;\n    h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\n    h1l = h[3] = (h1l + bl) | 0;\n    h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\n    h2l = h[5] = (h2l + cl) | 0;\n    h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\n    h3l = h[7] = (h3l + dl) | 0;\n    h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n    h4l = h[9] = (h4l + el) | 0;\n    h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\n    h5l = h[11] = (h5l + fl) | 0;\n    h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\n    h6l = h[13] = (h6l + gl) | 0;\n    h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\n    h7l = h[15] = (h7l + hl) | 0;\n    h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\n  }\n};\n\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};\n; /* harmony default export */ __webpack_exports__[\"a\"] = (sjcl);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Crypto; });\n/* harmony import */ var sjcl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n\n\n\n/**\n * Node.js Crypto module.\n * @private\n * @type {Object}\n */\nconst NodeCrypto = _utils_js__WEBPACK_IMPORTED_MODULE_1__[/* InternalUtils */ \"a\"].require('crypto');\n\n/**\n * An object containing some cryptography functions\n * with dirty workarounds for Node.js and browsers.\n * @private\n * @type {Object}\n */\nconst Crypto = {};\n\nif (NodeCrypto) {\n\tlet bufferFrom;\n\n\tif (typeof Buffer.from === 'function') {\n\t\tbufferFrom = Buffer.from;\n\t} else {\n\t\t// Node.js < 5.10.0\n\t\tbufferFrom = function (arrbuf) {\n\t\t\t// eslint-disable-next-line no-buffer-constructor, unicorn/no-new-buffer\n\t\t\tconst nodeBuf = new Buffer(arrbuf.byteLength);\n\t\t\tconst arr = new Uint8Array(arrbuf);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tnodeBuf[i] = arr[i];\n\t\t\t}\n\n\t\t\treturn nodeBuf;\n\t\t};\n\t}\n\n\tlet bufferTo;\n\n\tif (Buffer.prototype instanceof Uint8Array) {\n\t\tbufferTo = function (nodeBuf) {\n\t\t\treturn nodeBuf;\n\t\t};\n\t} else {\n\t\t// Node.js < 4.0.0\n\t\tbufferTo = function (nodeBuf) {\n\t\t\tconst arr = new Uint8Array(nodeBuf.length);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = nodeBuf[i];\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\treturn bufferTo(NodeCrypto.randomBytes(size));\n\t};\n\n\t// In Node.js, the command:\n\t//   $ openssl list-message-digest-algorithms\n\t// displays the available digest algorithms.\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\treturn bufferTo(NodeCrypto.createHmac(algorithm, bufferFrom(key))\n\t\t\t.update(bufferFrom(message))\n\t\t\t.digest());\n\t};\n} else {\n\tlet getRandomValues;\n\n\tif (typeof global.crypto !== 'undefined' && typeof global.crypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.crypto.getRandomValues(arr);\n\t\t};\n\t} else if (typeof global.msCrypto !== 'undefined' && typeof global.msCrypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.msCrypto.getRandomValues(arr);\n\t\t};\n\t} else {\n\t\tconsole.warn('Cryptography API not available, falling back to \\'Math.random\\'...');\n\t\tgetRandomValues = function (arr) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\tconst arr = new Uint8Array(size);\n\t\tgetRandomValues(arr);\n\t\treturn arr;\n\t};\n\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\tconst hash = sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].hash[algorithm.toLowerCase()];\n\t\tif (typeof hash === 'undefined') {\n\t\t\tthrow new TypeError('Unknown hash function');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst hmac = new sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].misc.hmac(sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].codec.arrayBuffer.toBits(key), hash);\n\t\thmac.update(sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].codec.arrayBuffer.toBits(message));\n\n\t\treturn sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].codec.arrayBuffer.fromBits(hmac.digest(), false);\n\t};\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/utils.js\nvar utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/crypto.js\nvar src_crypto = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/secret.js\n\n\n\n/**\n * Secret key object.\n */\nclass secret_Secret {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {ArrayBuffer} [config.buffer=Crypto.randomBytes] Secret key.\n\t * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n\t */\n\tconstructor({buffer, size = 20} = {}) {\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tthis.buffer = typeof buffer === 'undefined'\n\t\t\t? src_crypto[\"a\" /* Crypto */].randomBytes(size).buffer\n\t\t\t: buffer;\n\t}\n\n\t/**\n\t * Converts a raw string to a Secret object.\n\t * @method fromRaw\n\t * @param {string} str Raw string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromRaw(str) {\n\t\treturn new this({buffer: utils[\"b\" /* Utils */].raw.encode(str)});\n\t}\n\n\t/**\n\t * Converts a base32 string to a Secret object.\n\t * @method fromB32\n\t * @param {string} str Base32 string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromB32(str) {\n\t\treturn new this({buffer: utils[\"b\" /* Utils */].b32.encode(str)});\n\t}\n\n\t/**\n\t * Converts a hexadecimal string to a Secret object.\n\t * @method fromHex\n\t * @param {string} str Hexadecimal string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromHex(str) {\n\t\treturn new this({buffer: utils[\"b\" /* Utils */].hex.encode(str)});\n\t}\n\n\t/**\n\t * String representation of secret key.\n\t * @type {string}\n\t */\n\tget raw() {\n\t\tObject.defineProperty(this, 'raw', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: utils[\"b\" /* Utils */].raw.decode(this.buffer)\n\t\t});\n\n\t\treturn this.raw;\n\t}\n\n\t/**\n\t * Base32 representation of secret key.\n\t * @type {string}\n\t */\n\tget b32() {\n\t\tObject.defineProperty(this, 'b32', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: utils[\"b\" /* Utils */].b32.decode(this.buffer)\n\t\t});\n\n\t\treturn this.b32;\n\t}\n\n\t/**\n\t * Hexadecimal representation of secret key.\n\t * @type {string}\n\t */\n\tget hex() {\n\t\tObject.defineProperty(this, 'hex', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: utils[\"b\" /* Utils */].hex.decode(this.buffer)\n\t\t});\n\n\t\treturn this.hex;\n\t}\n}\n\n// CONCATENATED MODULE: ./src/uri.js\n\n\n\n\n/**\n * Valid key URI parameters.\n * @private\n * @type {Array}\n */\nconst OTPURI_PARAMS = ['issuer', 'label', 'secret', 'algorithm', 'digits', 'counter', 'period'];\n\n/**\n * Key URI regex.\n *   otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n * @private\n * @type {RegExp}\n */\nconst OTPURI_REGEX = new RegExp(`^otpauth:\\\\/\\\\/([ht]otp)\\\\/(.+)\\\\?((?:&?(?:${OTPURI_PARAMS.join('|')})=[^&]+)+)$`, 'i');\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @private\n * @type {string}\n */\nconst SECRET_REGEX = /^[2-7A-Z]+$/i;\n\n/**\n * Regex for supported algorithms.\n * @private\n * @type {RegExp}\n */\nconst ALGORITHM_REGEX = /^SHA(?:1|256|512)$/i;\n\n/**\n * Integer regex.\n * @private\n * @type {RegExp}\n */\nconst INTEGER_REGEX = /^[+-]?\\d+$/;\n\n/**\n * Positive integer regex.\n * @private\n * @type {RegExp}\n */\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n\n/**\n * HOTP/TOTP object/string conversion.\n * @see https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n */\nclass uri_URI {\n\t/**\n\t * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n\t * @method parse\n\t * @param {string} uri Google Authenticator Key URI.\n\t * @returns {Object} HOTP/TOTP object.\n\t */\n\tstatic parse(uri) {\n\t\tlet uriGroups;\n\n\t\ttry {\n\t\t\turiGroups = decodeURIComponent(uri).match(OTPURI_REGEX);\n\t\t} catch (error) {}\n\n\t\tif (!Array.isArray(uriGroups)) {\n\t\t\tthrow new URIError('Invalid URI format');\n\t\t}\n\n\t\t// Extract URI groups\n\t\tconst uriType = uriGroups[1].toLowerCase();\n\t\tconst uriLabel = uriGroups[2].split(/:(.+)/, 2);\n\t\tconst uriParams = uriGroups[3].split('&').reduce(function (acc, cur) {\n\t\t\tconst pairArr = cur.split(/=(.+)/, 2);\n\t\t\tconst pairKey = pairArr[0].toLowerCase();\n\t\t\tconst pairVal = pairArr[1];\n\t\t\tconst pairAcc = acc;\n\n\t\t\tpairAcc[pairKey] = pairVal;\n\t\t\treturn pairAcc;\n\t\t}, {});\n\n\t\t// 'OTP' will be instantiated with 'config' argument\n\t\tlet OTP;\n\t\tlet config = {};\n\n\t\tif (uriType === 'hotp') {\n\t\t\tOTP = otp_HOTP;\n\n\t\t\t// Counter: required\n\t\t\tif (typeof uriParams.counter !== 'undefined' && INTEGER_REGEX.test(uriParams.counter)) {\n\t\t\t\tconfig.counter = parseInt(uriParams.counter, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Missing or invalid \\'counter\\' parameter');\n\t\t\t}\n\t\t} else if (uriType === 'totp') {\n\t\t\tOTP = otp_TOTP;\n\n\t\t\t// Period: optional\n\t\t\tif (typeof uriParams.period !== 'undefined') {\n\t\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n\t\t\t\t\tconfig.period = parseInt(uriParams.period, 10);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError('Invalid \\'period\\' parameter');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Unknown OTP type');\n\t\t}\n\n\t\t// Label: required\n\t\t// Issuer: optional\n\t\tif (uriLabel.length === 2) {\n\t\t\tconfig.label = uriLabel[1];\n\t\t\tif (typeof uriParams.issuer === 'undefined') {\n\t\t\t\tconfig.issuer = uriLabel[0];\n\t\t\t} else if (uriParams.issuer === uriLabel[0]) {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'issuer\\' parameter');\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.label = uriLabel[0];\n\t\t\tif (typeof uriParams.issuer !== 'undefined') {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t}\n\t\t}\n\n\t\t// Secret: required\n\t\tif (typeof uriParams.secret !== 'undefined' && SECRET_REGEX.test(uriParams.secret)) {\n\t\t\tconfig.secret = new secret_Secret({buffer: utils[\"b\" /* Utils */].b32.encode(uriParams.secret)});\n\t\t} else {\n\t\t\tthrow new TypeError('Missing or invalid \\'secret\\' parameter');\n\t\t}\n\n\t\t// Algorithm: optional\n\t\tif (typeof uriParams.algorithm !== 'undefined') {\n\t\t\tif (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n\t\t\t\tconfig.algorithm = uriParams.algorithm;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'algorithm\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\t// Digits: optional\n\t\tif (typeof uriParams.digits !== 'undefined') {\n\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n\t\t\t\tconfig.digits = parseInt(uriParams.digits, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'digits\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\treturn new OTP(config);\n\t}\n\n\t/**\n\t * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n\t * @method stringify\n\t * @param {Object} otp HOTP/TOTP object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {boolean} [config.legacyIssuer=true] Set issuer label prefix.\n\t * @returns {string} Google Authenticator Key URI.\n\t */\n\tstatic stringify(otp, {legacyIssuer = true} = {}) {\n\t\tconst isHOTP = otp instanceof otp_HOTP;\n\t\tconst isTOTP = otp instanceof otp_TOTP;\n\n\t\tif (!isHOTP && !isTOTP) {\n\t\t\tthrow new TypeError('Invalid \\'HOTP/TOTP\\' object');\n\t\t}\n\n\t\t// Key URI format:\n\t\t// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n\t\tlet uri = 'otpauth://';\n\n\t\t// Type\n\t\turi += (isTOTP ? 'totp' : 'hotp') + '/';\n\n\t\t// Label and optional issuer\n\t\tif (otp.issuer.length > 0) {\n\t\t\t// Issuer label prefix\n\t\t\tif (legacyIssuer) {\n\t\t\t\turi += `${otp.issuer}:`;\n\t\t\t}\n\n\t\t\turi += `${otp.label}?issuer=${otp.issuer}&`;\n\t\t} else {\n\t\t\t// No issuer\n\t\t\turi += `${otp.label}?`;\n\t\t}\n\n\t\t// Generic parameters\n\t\turi += `secret=${otp.secret.b32}` +\n\t\t\t`&algorithm=${otp.algorithm}` +\n\t\t\t`&digits=${otp.digits}`;\n\n\t\t// Extra parameters\n\t\tif (isTOTP) {\n\t\t\t// TOTP parameters\n\t\t\turi += `&period=${otp.period}`;\n\t\t} else {\n\t\t\t// HOTP parameters\n\t\t\turi += `&counter=${otp.counter}`;\n\t\t}\n\n\t\treturn encodeURI(uri);\n\t}\n}\n\n// CONCATENATED MODULE: ./src/otp.js\n\n\n\n\n\n/**\n * Default configuration.\n * @private\n * @type {Object}\n */\nconst DC = {\n\tissuer: '',\n\tlabel: 'OTPAuth',\n\talgorithm: 'SHA1',\n\tdigits: 6,\n\tcounter: 0,\n\tperiod: 30,\n\twindow: 50,\n\tpad: true\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm (RFC 4226).\n * @see https://tools.ietf.org/html/rfc4226\n */\nclass otp_HOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Initial counter value.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new secret_Secret(), algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {string}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Initial counter value.\n\t\t * @type {number}\n\t\t */\n\t\tthis.counter = counter;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter, pad = DC.pad}) {\n\t\tconst digest = new Uint8Array(src_crypto[\"a\" /* Crypto */].hmacDigest(algorithm, secret.buffer, utils[\"b\" /* Utils */].uint.encode(counter)));\n\t\tconst offset = digest[digest.byteLength - 1] & 15;\n\t\tconst otp = (\n\t\t\t((digest[offset] & 127) << 24) |\n\t\t\t((digest[offset + 1] & 255) << 16) |\n\t\t\t((digest[offset + 2] & 255) << 8) |\n\t\t\t(digest[offset + 3] & 255)\n\t\t) % (10 ** digits);\n\n\t\treturn pad\n\t\t\t? new Array(1 + digits - String(otp).length).join('0') + otp\n\t\t\t: otp;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.counter=this.counter++] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({counter = this.counter++, pad} = {}) {\n\t\treturn otp_HOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tcounter: counter,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, counter = DC.counter, window = DC.window}) {\n\t\tconst searchToken = parseInt(token, 10);\n\n\t\tfor (let i = counter - window; i <= counter + window; ++i) {\n\t\t\tconst generatedToken = otp_HOTP.generate({\n\t\t\t\tsecret: secret,\n\t\t\t\talgorithm: algorithm,\n\t\t\t\tcounter: i,\n\t\t\t\tdigits: token.length,\n\t\t\t\tpad: false\n\t\t\t});\n\n\t\t\tif (searchToken === generatedToken) {\n\t\t\t\treturn i - counter;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.counter=this.counter] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, counter = this.counter, window}) {\n\t\treturn otp_HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tcounter: counter,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn uri_URI.stringify(this);\n\t}\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm (RFC 6238).\n * @see https://tools.ietf.org/html/rfc6238\n */\nclass otp_TOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new secret_Secret(), algorithm = DC.algorithm, digits = DC.digits, period = DC.period} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {string}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Token time-step duration.\n\t\t * @type {number}\n\t\t */\n\t\tthis.period = period;\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm, digits, period = DC.period, timestamp = Date.now(), pad}) {\n\t\treturn otp_HOTP.generate({\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tdigits: digits,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({timestamp = Date.now(), pad} = {}) {\n\t\treturn otp_TOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, period = DC.period, timestamp = Date.now(), window}) {\n\t\treturn otp_HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, timestamp, window}) {\n\t\treturn otp_TOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn uri_URI.stringify(this);\n\t}\n}\n\n// CONCATENATED MODULE: ./src/main.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* concated harmony reexport HOTP */__webpack_require__.d(__webpack_exports__, \"HOTP\", function() { return otp_HOTP; });\n/* concated harmony reexport TOTP */__webpack_require__.d(__webpack_exports__, \"TOTP\", function() { return otp_TOTP; });\n/* concated harmony reexport URI */__webpack_require__.d(__webpack_exports__, \"URI\", function() { return uri_URI; });\n/* concated harmony reexport Secret */__webpack_require__.d(__webpack_exports__, \"Secret\", function() { return secret_Secret; });\n/* concated harmony reexport Utils */__webpack_require__.d(__webpack_exports__, \"Utils\", function() { return utils[\"b\" /* Utils */]; });\n/**\n * One Time Password (HOTP/TOTP) library for Node.js and browser.\n * @module OTPAuth\n * @author Héctor Molinero Fernández <hector@molinero.dev>\n */\n\n\n\n\n\n/**\n * Library version.\n * @type {string}\n */\nconst version = \"3.2.3\";\n\n\n/***/ })\n/******/ ]);\n});"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/**\n * An object containing some utilities.\n * @type {Object}\n */\nexport const Utils = {};\n\n/**\n * UInt conversion.\n * @type {Object}\n */\nUtils.uint = {};\n\n/**\n * Converts an ArrayBuffer to an integer.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {number} Integer.\n */\nUtils.uint.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet num = 0;\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnum *= 256;\n\t\tnum += arr[i];\n\t}\n\n\treturn num;\n};\n\n/**\n * Converts an integer to an ArrayBuffer.\n * @param {number} num Integer.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.uint.encode = function (num) {\n\tconst buf = new ArrayBuffer(8);\n\tconst arr = new Uint8Array(buf);\n\tlet acc = num;\n\n\tfor (let i = 7; i >= 0; i--) {\n\t\tif (acc === 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tarr[i] = acc & 255;\n\t\tacc -= arr[i];\n\t\tacc /= 256;\n\t}\n\n\treturn buf;\n};\n\n/**\n * Raw string conversion.\n * @type {Object}\n */\nUtils.raw = {};\n\n/**\n * Converts an ArrayBuffer to a string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} String.\n */\nUtils.raw.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a string to an ArrayBuffer.\n * @param {string} str String.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.raw.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tarr[i] = str.charCodeAt(i);\n\t}\n\n\treturn buf;\n};\n\n/**\n * Base32 string conversion.\n * @type {Object}\n */\nUtils.b32 = {};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */\nUtils.b32.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n/**\n * Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @see https://github.com/LinusU/base32-decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Base32 string.\n */\nUtils.b32.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tvalue = (value << 8) | arr[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\tstr += Utils.b32.alphabet[(value >>> bits - 5) & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\tstr += Utils.b32.alphabet[(value << 5 - bits) & 31];\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a base32 string to an ArrayBuffer (RFC 4648).\n * @see https://github.com/LinusU/base32-encode\n * @param {string} str Base32 string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.b32.encode = function (str) {\n\tconst strUpp = str.toUpperCase();\n\tconst buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet index = 0;\n\n\tfor (let i = 0; i < strUpp.length; i++) {\n\t\tlet idx = Utils.b32.alphabet.indexOf(strUpp[i]);\n\n\t\tif (idx === -1) {\n\t\t\tthrow new TypeError('Invalid character found: ' + strUpp[i]);\n\t\t}\n\n\t\tvalue = (value << 5) | idx;\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\tarr[index++] = (value >>> bits - 8) & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn buf;\n};\n\n/**\n * Hexadecimal string conversion.\n * @type {Object}\n */\nUtils.hex = {};\n\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Hexadecimal string.\n */\nUtils.hex.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst hexByte = arr[i].toString(16);\n\n\t\tstr += hexByte.length === 1\n\t\t\t? '0' + hexByte\n\t\t\t: hexByte;\n\t}\n\n\treturn str.toUpperCase();\n};\n\n/**\n * Converts a hexadecimal string to an ArrayBuffer.\n * @param {string} str Hexadecimal string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.hex.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length / 2);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = parseInt(str.substr(i * 2, 2), 16);\n\t}\n\n\treturn buf;\n};\n\n/**\n * An object containing some utilities (for internal use only).\n * @private\n * @type {Object}\n */\nexport const InternalUtils = {};\n\n/**\n * Detect if running in \"Node.js\".\n * @type {boolean}\n */\n// eslint-disable-next-line dot-notation\nInternalUtils.isNode = Object.prototype.toString.call(global['process']) === '[object process]';\n\n/**\n * Dynamically import \"Node.js\" modules.\n * @param {string} name Name.\n * @returns {Object} Module.\n */\nInternalUtils.require = function (name) {\n\t// eslint-disable-next-line no-eval\n\treturn InternalUtils.isNode ? eval('require')(name) : null;\n};\n","/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\"use strict\";\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n  /** Convert from an ArrayBuffer to a bitArray. */\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements). \n        // The problem is that if we use Uint32Array instead of Array, \n        // the length of Uint32Array cannot be changed. Thus, we replace words with a \n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n  return (new sjcl.hash.sha512()).update(data).finalize();\n};\n\nsjcl.hash.sha512.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 1024,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n        var c = new Uint32Array(b);\n        var j = 0;\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(c.subarray(32 * j, 32 * (j+1)));\n            j += 1;\n        }\n        b.splice(0, 32 * j);\n    } else {\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(b.splice(0,32));\n        }\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 16 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 32 words, less the 4 length words.\n    for (i = b.length + 4; i & 31; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(0);\n    b.push(0);\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,32));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-512 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n\n  /**\n   * Least significant 24 bits of SHA512 initialization values.\n   *\n   * Javascript only has 53 bits of precision, so we compute the 40 most\n   * significant bits and add the remaining 24 bits as constants.\n   *\n   * @private\n   */\n  _initr: [ 0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179 ],\n\n  /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n\n  /**\n   * The SHA-512 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n\n  /**\n   * Least significant 24 bits of SHA512 key values.\n   * @private\n   */\n  _keyr:\n  [0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118,\n   0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235, 0x692694,\n   0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5,\n   0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725, 0x03826f, 0x0e6e70,\n   0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b,\n   0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218, 0x65a910, 0x71202a, 0xbbd1b8,\n   0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3,\n   0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec, 0x631e28, 0x82bde9, 0xc67915, 0x72532b,\n   0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b,\n   0x047d84, 0xc72493, 0xc9bebc, 0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817],\n\n  /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    // XXX: This code is for precomputing the SHA256 constants, change for\n    //      SHA512 and re-enable.\n    var i = 0, prime = 2, factor , isPrime;\n\n    function frac(x)  { return (x-Math.floor(x)) * 0x100000000 | 0; }\n    function frac2(x) { return (x-Math.floor(x)) * 0x10000000000 & 0xff; }\n\n    for (; i<80; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i*2] = frac(Math.pow(prime, 1/2));\n          this._init[i*2+1] = (frac2(Math.pow(prime, 1/2)) << 24) | this._initr[i];\n        }\n        this._key[i*2] = frac(Math.pow(prime, 1/3));\n        this._key[i*2+1] = (frac2(Math.pow(prime, 1/3)) << 24) | this._keyr[i];\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-512.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var i, wrh, wrl,\n        h = this._h,\n        k = this._key,\n        h0h = h[ 0], h0l = h[ 1], h1h = h[ 2], h1l = h[ 3],\n        h2h = h[ 4], h2l = h[ 5], h3h = h[ 6], h3l = h[ 7],\n        h4h = h[ 8], h4l = h[ 9], h5h = h[10], h5l = h[11],\n        h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n\t// When words is passed to _block, it has 32 elements. SHA512 _block\n\t// function extends words with new elements (at the end there are 160 elements). \n\t// The problem is that if we use Uint32Array instead of Array, \n\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t// normal Array here.\n        w = Array(160); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<32; j++){\n    \t    w[j] = words[j]; \n        }\n    } else {\n\tw = words;\n    } \n\n    // Working variables\n    var ah = h0h, al = h0l, bh = h1h, bl = h1l,\n        ch = h2h, cl = h2l, dh = h3h, dl = h3l,\n        eh = h4h, el = h4l, fh = h5h, fl = h5l,\n        gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n\n    for (i=0; i<80; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        wrh = w[i * 2];\n        wrl = w[i * 2 + 1];\n      } else {\n        // Gamma0\n        var gamma0xh = w[(i-15) * 2];\n        var gamma0xl = w[(i-15) * 2 + 1];\n        var gamma0h =\n          ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\n          ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\n           (gamma0xh >>> 7);\n        var gamma0l =\n          ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\n          ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\n          ((gamma0xh << 25) | (gamma0xl >>> 7));\n\n        // Gamma1\n        var gamma1xh = w[(i-2) * 2];\n        var gamma1xl = w[(i-2) * 2 + 1];\n        var gamma1h =\n          ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\n          ((gamma1xh << 3)  | (gamma1xl >>> 29)) ^\n           (gamma1xh >>> 6);\n        var gamma1l =\n          ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\n          ((gamma1xl << 3)  | (gamma1xh >>> 29)) ^\n          ((gamma1xh << 26) | (gamma1xl >>> 6));\n\n        // Shortcuts\n        var wr7h = w[(i-7) * 2];\n        var wr7l = w[(i-7) * 2 + 1];\n\n        var wr16h = w[(i-16) * 2];\n        var wr16l = w[(i-16) * 2 + 1];\n\n        // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n        wrl = gamma0l + wr7l;\n        wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        wrl += gamma1l;\n        wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        wrl += wr16l;\n        wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\n      }\n\n      w[i*2]     = wrh |= 0;\n      w[i*2 + 1] = wrl |= 0;\n\n      // Ch\n      var chh = (eh & fh) ^ (~eh & gh);\n      var chl = (el & fl) ^ (~el & gl);\n\n      // Maj\n      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n      // Sigma0\n      var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\n      // Sigma1\n      var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n      var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n\n      // K(round)\n      var krh = k[i*2];\n      var krl = k[i*2+1];\n\n      // t1 = h + sigma1 + ch + K(round) + W(round)\n      var t1l = hl + sigma1l;\n      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l += chl;\n      t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l += krl;\n      t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\n      t1l = t1l + wrl|0;   // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n      t1h += wrh + ((t1l >>> 0) < (wrl >>> 0) ? 1 : 0);\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl;\n      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n\n    // Intermediate hash\n    h0l = h[1] = (h0l + al) | 0;\n    h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\n    h1l = h[3] = (h1l + bl) | 0;\n    h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\n    h2l = h[5] = (h2l + cl) | 0;\n    h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\n    h3l = h[7] = (h3l + dl) | 0;\n    h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n    h4l = h[9] = (h4l + el) | 0;\n    h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\n    h5l = h[11] = (h5l + fl) | 0;\n    h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\n    h6l = h[13] = (h6l + gl) | 0;\n    h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\n    h7l = h[15] = (h7l + hl) | 0;\n    h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\n  }\n};\n\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};\n; export default sjcl;","import sjcl from 'sjcl';\nimport {InternalUtils} from './utils.js';\n\n/**\n * Node.js Crypto module.\n * @private\n * @type {Object}\n */\nconst NodeCrypto = InternalUtils.require('crypto');\n\n/**\n * An object containing some cryptography functions\n * with dirty workarounds for Node.js and browsers.\n * @private\n * @type {Object}\n */\nexport const Crypto = {};\n\nif (NodeCrypto) {\n\tlet bufferFrom;\n\n\tif (typeof Buffer.from === 'function') {\n\t\tbufferFrom = Buffer.from;\n\t} else {\n\t\t// Node.js < 5.10.0\n\t\tbufferFrom = function (arrbuf) {\n\t\t\t// eslint-disable-next-line no-buffer-constructor, unicorn/no-new-buffer\n\t\t\tconst nodeBuf = new Buffer(arrbuf.byteLength);\n\t\t\tconst arr = new Uint8Array(arrbuf);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tnodeBuf[i] = arr[i];\n\t\t\t}\n\n\t\t\treturn nodeBuf;\n\t\t};\n\t}\n\n\tlet bufferTo;\n\n\tif (Buffer.prototype instanceof Uint8Array) {\n\t\tbufferTo = function (nodeBuf) {\n\t\t\treturn nodeBuf;\n\t\t};\n\t} else {\n\t\t// Node.js < 4.0.0\n\t\tbufferTo = function (nodeBuf) {\n\t\t\tconst arr = new Uint8Array(nodeBuf.length);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = nodeBuf[i];\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\treturn bufferTo(NodeCrypto.randomBytes(size));\n\t};\n\n\t// In Node.js, the command:\n\t//   $ openssl list-message-digest-algorithms\n\t// displays the available digest algorithms.\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\treturn bufferTo(NodeCrypto.createHmac(algorithm, bufferFrom(key))\n\t\t\t.update(bufferFrom(message))\n\t\t\t.digest());\n\t};\n} else {\n\tlet getRandomValues;\n\n\tif (typeof global.crypto !== 'undefined' && typeof global.crypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.crypto.getRandomValues(arr);\n\t\t};\n\t} else if (typeof global.msCrypto !== 'undefined' && typeof global.msCrypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.msCrypto.getRandomValues(arr);\n\t\t};\n\t} else {\n\t\tconsole.warn('Cryptography API not available, falling back to \\'Math.random\\'...');\n\t\tgetRandomValues = function (arr) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\tconst arr = new Uint8Array(size);\n\t\tgetRandomValues(arr);\n\t\treturn arr;\n\t};\n\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\tconst hash = sjcl.hash[algorithm.toLowerCase()];\n\t\tif (typeof hash === 'undefined') {\n\t\t\tthrow new TypeError('Unknown hash function');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst hmac = new sjcl.misc.hmac(sjcl.codec.arrayBuffer.toBits(key), hash);\n\t\thmac.update(sjcl.codec.arrayBuffer.toBits(message));\n\n\t\treturn sjcl.codec.arrayBuffer.fromBits(hmac.digest(), false);\n\t};\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import {Utils} from './utils.js';\nimport {Crypto} from './crypto.js';\n\n/**\n * Secret key object.\n */\nexport class Secret {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {ArrayBuffer} [config.buffer=Crypto.randomBytes] Secret key.\n\t * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n\t */\n\tconstructor({buffer, size = 20} = {}) {\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tthis.buffer = typeof buffer === 'undefined'\n\t\t\t? Crypto.randomBytes(size).buffer\n\t\t\t: buffer;\n\t}\n\n\t/**\n\t * Converts a raw string to a Secret object.\n\t * @method fromRaw\n\t * @param {string} str Raw string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromRaw(str) {\n\t\treturn new this({buffer: Utils.raw.encode(str)});\n\t}\n\n\t/**\n\t * Converts a base32 string to a Secret object.\n\t * @method fromB32\n\t * @param {string} str Base32 string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromB32(str) {\n\t\treturn new this({buffer: Utils.b32.encode(str)});\n\t}\n\n\t/**\n\t * Converts a hexadecimal string to a Secret object.\n\t * @method fromHex\n\t * @param {string} str Hexadecimal string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromHex(str) {\n\t\treturn new this({buffer: Utils.hex.encode(str)});\n\t}\n\n\t/**\n\t * String representation of secret key.\n\t * @type {string}\n\t */\n\tget raw() {\n\t\tObject.defineProperty(this, 'raw', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.raw.decode(this.buffer)\n\t\t});\n\n\t\treturn this.raw;\n\t}\n\n\t/**\n\t * Base32 representation of secret key.\n\t * @type {string}\n\t */\n\tget b32() {\n\t\tObject.defineProperty(this, 'b32', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.b32.decode(this.buffer)\n\t\t});\n\n\t\treturn this.b32;\n\t}\n\n\t/**\n\t * Hexadecimal representation of secret key.\n\t * @type {string}\n\t */\n\tget hex() {\n\t\tObject.defineProperty(this, 'hex', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.hex.decode(this.buffer)\n\t\t});\n\n\t\treturn this.hex;\n\t}\n}\n","import {Utils} from './utils.js';\nimport {Secret} from './secret.js';\nimport {HOTP, TOTP} from './otp.js';\n\n/**\n * Valid key URI parameters.\n * @private\n * @type {Array}\n */\nconst OTPURI_PARAMS = ['issuer', 'label', 'secret', 'algorithm', 'digits', 'counter', 'period'];\n\n/**\n * Key URI regex.\n *   otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n * @private\n * @type {RegExp}\n */\nconst OTPURI_REGEX = new RegExp(`^otpauth:\\\\/\\\\/([ht]otp)\\\\/(.+)\\\\?((?:&?(?:${OTPURI_PARAMS.join('|')})=[^&]+)+)$`, 'i');\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @private\n * @type {string}\n */\nconst SECRET_REGEX = /^[2-7A-Z]+$/i;\n\n/**\n * Regex for supported algorithms.\n * @private\n * @type {RegExp}\n */\nconst ALGORITHM_REGEX = /^SHA(?:1|256|512)$/i;\n\n/**\n * Integer regex.\n * @private\n * @type {RegExp}\n */\nconst INTEGER_REGEX = /^[+-]?\\d+$/;\n\n/**\n * Positive integer regex.\n * @private\n * @type {RegExp}\n */\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n\n/**\n * HOTP/TOTP object/string conversion.\n * @see https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n */\nexport class URI {\n\t/**\n\t * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n\t * @method parse\n\t * @param {string} uri Google Authenticator Key URI.\n\t * @returns {Object} HOTP/TOTP object.\n\t */\n\tstatic parse(uri) {\n\t\tlet uriGroups;\n\n\t\ttry {\n\t\t\turiGroups = decodeURIComponent(uri).match(OTPURI_REGEX);\n\t\t} catch (error) {}\n\n\t\tif (!Array.isArray(uriGroups)) {\n\t\t\tthrow new URIError('Invalid URI format');\n\t\t}\n\n\t\t// Extract URI groups\n\t\tconst uriType = uriGroups[1].toLowerCase();\n\t\tconst uriLabel = uriGroups[2].split(/:(.+)/, 2);\n\t\tconst uriParams = uriGroups[3].split('&').reduce(function (acc, cur) {\n\t\t\tconst pairArr = cur.split(/=(.+)/, 2);\n\t\t\tconst pairKey = pairArr[0].toLowerCase();\n\t\t\tconst pairVal = pairArr[1];\n\t\t\tconst pairAcc = acc;\n\n\t\t\tpairAcc[pairKey] = pairVal;\n\t\t\treturn pairAcc;\n\t\t}, {});\n\n\t\t// 'OTP' will be instantiated with 'config' argument\n\t\tlet OTP;\n\t\tlet config = {};\n\n\t\tif (uriType === 'hotp') {\n\t\t\tOTP = HOTP;\n\n\t\t\t// Counter: required\n\t\t\tif (typeof uriParams.counter !== 'undefined' && INTEGER_REGEX.test(uriParams.counter)) {\n\t\t\t\tconfig.counter = parseInt(uriParams.counter, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Missing or invalid \\'counter\\' parameter');\n\t\t\t}\n\t\t} else if (uriType === 'totp') {\n\t\t\tOTP = TOTP;\n\n\t\t\t// Period: optional\n\t\t\tif (typeof uriParams.period !== 'undefined') {\n\t\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n\t\t\t\t\tconfig.period = parseInt(uriParams.period, 10);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError('Invalid \\'period\\' parameter');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Unknown OTP type');\n\t\t}\n\n\t\t// Label: required\n\t\t// Issuer: optional\n\t\tif (uriLabel.length === 2) {\n\t\t\tconfig.label = uriLabel[1];\n\t\t\tif (typeof uriParams.issuer === 'undefined') {\n\t\t\t\tconfig.issuer = uriLabel[0];\n\t\t\t} else if (uriParams.issuer === uriLabel[0]) {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'issuer\\' parameter');\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.label = uriLabel[0];\n\t\t\tif (typeof uriParams.issuer !== 'undefined') {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t}\n\t\t}\n\n\t\t// Secret: required\n\t\tif (typeof uriParams.secret !== 'undefined' && SECRET_REGEX.test(uriParams.secret)) {\n\t\t\tconfig.secret = new Secret({buffer: Utils.b32.encode(uriParams.secret)});\n\t\t} else {\n\t\t\tthrow new TypeError('Missing or invalid \\'secret\\' parameter');\n\t\t}\n\n\t\t// Algorithm: optional\n\t\tif (typeof uriParams.algorithm !== 'undefined') {\n\t\t\tif (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n\t\t\t\tconfig.algorithm = uriParams.algorithm;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'algorithm\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\t// Digits: optional\n\t\tif (typeof uriParams.digits !== 'undefined') {\n\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n\t\t\t\tconfig.digits = parseInt(uriParams.digits, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'digits\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\treturn new OTP(config);\n\t}\n\n\t/**\n\t * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n\t * @method stringify\n\t * @param {Object} otp HOTP/TOTP object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {boolean} [config.legacyIssuer=true] Set issuer label prefix.\n\t * @returns {string} Google Authenticator Key URI.\n\t */\n\tstatic stringify(otp, {legacyIssuer = true} = {}) {\n\t\tconst isHOTP = otp instanceof HOTP;\n\t\tconst isTOTP = otp instanceof TOTP;\n\n\t\tif (!isHOTP && !isTOTP) {\n\t\t\tthrow new TypeError('Invalid \\'HOTP/TOTP\\' object');\n\t\t}\n\n\t\t// Key URI format:\n\t\t// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n\t\tlet uri = 'otpauth://';\n\n\t\t// Type\n\t\turi += (isTOTP ? 'totp' : 'hotp') + '/';\n\n\t\t// Label and optional issuer\n\t\tif (otp.issuer.length > 0) {\n\t\t\t// Issuer label prefix\n\t\t\tif (legacyIssuer) {\n\t\t\t\turi += `${otp.issuer}:`;\n\t\t\t}\n\n\t\t\turi += `${otp.label}?issuer=${otp.issuer}&`;\n\t\t} else {\n\t\t\t// No issuer\n\t\t\turi += `${otp.label}?`;\n\t\t}\n\n\t\t// Generic parameters\n\t\turi += `secret=${otp.secret.b32}` +\n\t\t\t`&algorithm=${otp.algorithm}` +\n\t\t\t`&digits=${otp.digits}`;\n\n\t\t// Extra parameters\n\t\tif (isTOTP) {\n\t\t\t// TOTP parameters\n\t\t\turi += `&period=${otp.period}`;\n\t\t} else {\n\t\t\t// HOTP parameters\n\t\t\turi += `&counter=${otp.counter}`;\n\t\t}\n\n\t\treturn encodeURI(uri);\n\t}\n}\n","import {Utils} from './utils.js';\nimport {Crypto} from './crypto.js';\nimport {Secret} from './secret.js';\nimport {URI} from './uri.js';\n\n/**\n * Default configuration.\n * @private\n * @type {Object}\n */\nconst DC = {\n\tissuer: '',\n\tlabel: 'OTPAuth',\n\talgorithm: 'SHA1',\n\tdigits: 6,\n\tcounter: 0,\n\tperiod: 30,\n\twindow: 50,\n\tpad: true\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm (RFC 4226).\n * @see https://tools.ietf.org/html/rfc4226\n */\nexport class HOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Initial counter value.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new Secret(), algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {string}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Initial counter value.\n\t\t * @type {number}\n\t\t */\n\t\tthis.counter = counter;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter, pad = DC.pad}) {\n\t\tconst digest = new Uint8Array(Crypto.hmacDigest(algorithm, secret.buffer, Utils.uint.encode(counter)));\n\t\tconst offset = digest[digest.byteLength - 1] & 15;\n\t\tconst otp = (\n\t\t\t((digest[offset] & 127) << 24) |\n\t\t\t((digest[offset + 1] & 255) << 16) |\n\t\t\t((digest[offset + 2] & 255) << 8) |\n\t\t\t(digest[offset + 3] & 255)\n\t\t) % (10 ** digits);\n\n\t\treturn pad\n\t\t\t? new Array(1 + digits - String(otp).length).join('0') + otp\n\t\t\t: otp;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.counter=this.counter++] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({counter = this.counter++, pad} = {}) {\n\t\treturn HOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tcounter: counter,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, counter = DC.counter, window = DC.window}) {\n\t\tconst searchToken = parseInt(token, 10);\n\n\t\tfor (let i = counter - window; i <= counter + window; ++i) {\n\t\t\tconst generatedToken = HOTP.generate({\n\t\t\t\tsecret: secret,\n\t\t\t\talgorithm: algorithm,\n\t\t\t\tcounter: i,\n\t\t\t\tdigits: token.length,\n\t\t\t\tpad: false\n\t\t\t});\n\n\t\t\tif (searchToken === generatedToken) {\n\t\t\t\treturn i - counter;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.counter=this.counter] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, counter = this.counter, window}) {\n\t\treturn HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tcounter: counter,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn URI.stringify(this);\n\t}\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm (RFC 6238).\n * @see https://tools.ietf.org/html/rfc6238\n */\nexport class TOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new Secret(), algorithm = DC.algorithm, digits = DC.digits, period = DC.period} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {string}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Token time-step duration.\n\t\t * @type {number}\n\t\t */\n\t\tthis.period = period;\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm, digits, period = DC.period, timestamp = Date.now(), pad}) {\n\t\treturn HOTP.generate({\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tdigits: digits,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({timestamp = Date.now(), pad} = {}) {\n\t\treturn TOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, period = DC.period, timestamp = Date.now(), window}) {\n\t\treturn HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, timestamp, window}) {\n\t\treturn TOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn URI.stringify(this);\n\t}\n}\n","/**\n * One Time Password (HOTP/TOTP) library for Node.js and browser.\n * @module OTPAuth\n * @author Héctor Molinero Fernández <hector@molinero.dev>\n */\nexport {HOTP, TOTP} from './otp.js';\nexport {URI} from './uri.js';\nexport {Secret} from './secret.js';\nexport {Utils} from './utils.js';\n\n/**\n * Library version.\n * @type {string}\n */\nexport const version = process.env.VERSION;\n"],"sourceRoot":""}